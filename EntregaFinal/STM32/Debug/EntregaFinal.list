
EntregaFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006938  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080069f8  080069f8  000079f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca4  08006ca4  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006ca4  08006ca4  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006ca4  08006ca4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca4  08006ca4  00007ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ca8  08006ca8  00007ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006cac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dcc  20000068  08006d14  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e34  08006d14  00008e34  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133e7  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003204  00000000  00000000  0001b477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0001e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1c  00000000  00000000  0001fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001578f  00000000  00000000  0002092c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156f2  00000000  00000000  000360bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008789b  00000000  00000000  0004b7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3048  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  000d308c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d8094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080069e0 	.word	0x080069e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080069e0 	.word	0x080069e0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_d2uiz>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	2200      	movs	r2, #0
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <__aeabi_d2uiz+0x38>)
 800023a:	0004      	movs	r4, r0
 800023c:	000d      	movs	r5, r1
 800023e:	f001 fae1 	bl	8001804 <__aeabi_dcmpge>
 8000242:	2800      	cmp	r0, #0
 8000244:	d104      	bne.n	8000250 <__aeabi_d2uiz+0x1c>
 8000246:	0020      	movs	r0, r4
 8000248:	0029      	movs	r1, r5
 800024a:	f001 fa19 	bl	8001680 <__aeabi_d2iz>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <__aeabi_d2uiz+0x38>)
 8000252:	2200      	movs	r2, #0
 8000254:	0020      	movs	r0, r4
 8000256:	0029      	movs	r1, r5
 8000258:	f000 fe08 	bl	8000e6c <__aeabi_dsub>
 800025c:	f001 fa10 	bl	8001680 <__aeabi_d2iz>
 8000260:	2380      	movs	r3, #128	@ 0x80
 8000262:	061b      	lsls	r3, r3, #24
 8000264:	469c      	mov	ip, r3
 8000266:	4460      	add	r0, ip
 8000268:	e7f1      	b.n	800024e <__aeabi_d2uiz+0x1a>
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	41e00000 	.word	0x41e00000

08000270 <__aeabi_ddiv>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46de      	mov	lr, fp
 8000274:	4645      	mov	r5, r8
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	b087      	sub	sp, #28
 800027e:	9200      	str	r2, [sp, #0]
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	030b      	lsls	r3, r1, #12
 8000284:	0b1b      	lsrs	r3, r3, #12
 8000286:	469b      	mov	fp, r3
 8000288:	0fca      	lsrs	r2, r1, #31
 800028a:	004b      	lsls	r3, r1, #1
 800028c:	0004      	movs	r4, r0
 800028e:	4680      	mov	r8, r0
 8000290:	0d5b      	lsrs	r3, r3, #21
 8000292:	9202      	str	r2, [sp, #8]
 8000294:	d100      	bne.n	8000298 <__aeabi_ddiv+0x28>
 8000296:	e098      	b.n	80003ca <__aeabi_ddiv+0x15a>
 8000298:	4a7c      	ldr	r2, [pc, #496]	@ (800048c <__aeabi_ddiv+0x21c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d037      	beq.n	800030e <__aeabi_ddiv+0x9e>
 800029e:	4659      	mov	r1, fp
 80002a0:	0f42      	lsrs	r2, r0, #29
 80002a2:	00c9      	lsls	r1, r1, #3
 80002a4:	430a      	orrs	r2, r1
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0409      	lsls	r1, r1, #16
 80002aa:	4311      	orrs	r1, r2
 80002ac:	00c2      	lsls	r2, r0, #3
 80002ae:	4690      	mov	r8, r2
 80002b0:	4a77      	ldr	r2, [pc, #476]	@ (8000490 <__aeabi_ddiv+0x220>)
 80002b2:	4689      	mov	r9, r1
 80002b4:	4692      	mov	sl, r2
 80002b6:	449a      	add	sl, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	2400      	movs	r4, #0
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	9e00      	ldr	r6, [sp, #0]
 80002c0:	9f01      	ldr	r7, [sp, #4]
 80002c2:	033b      	lsls	r3, r7, #12
 80002c4:	0b1b      	lsrs	r3, r3, #12
 80002c6:	469b      	mov	fp, r3
 80002c8:	007b      	lsls	r3, r7, #1
 80002ca:	0030      	movs	r0, r6
 80002cc:	0d5b      	lsrs	r3, r3, #21
 80002ce:	0ffd      	lsrs	r5, r7, #31
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d059      	beq.n	8000388 <__aeabi_ddiv+0x118>
 80002d4:	4a6d      	ldr	r2, [pc, #436]	@ (800048c <__aeabi_ddiv+0x21c>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d048      	beq.n	800036c <__aeabi_ddiv+0xfc>
 80002da:	4659      	mov	r1, fp
 80002dc:	0f72      	lsrs	r2, r6, #29
 80002de:	00c9      	lsls	r1, r1, #3
 80002e0:	430a      	orrs	r2, r1
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	0409      	lsls	r1, r1, #16
 80002e6:	4311      	orrs	r1, r2
 80002e8:	468b      	mov	fp, r1
 80002ea:	4969      	ldr	r1, [pc, #420]	@ (8000490 <__aeabi_ddiv+0x220>)
 80002ec:	00f2      	lsls	r2, r6, #3
 80002ee:	468c      	mov	ip, r1
 80002f0:	4651      	mov	r1, sl
 80002f2:	4463      	add	r3, ip
 80002f4:	1acb      	subs	r3, r1, r3
 80002f6:	469a      	mov	sl, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	9e02      	ldr	r6, [sp, #8]
 80002fc:	406e      	eors	r6, r5
 80002fe:	b2f6      	uxtb	r6, r6
 8000300:	2c0f      	cmp	r4, #15
 8000302:	d900      	bls.n	8000306 <__aeabi_ddiv+0x96>
 8000304:	e0ce      	b.n	80004a4 <__aeabi_ddiv+0x234>
 8000306:	4b63      	ldr	r3, [pc, #396]	@ (8000494 <__aeabi_ddiv+0x224>)
 8000308:	00a4      	lsls	r4, r4, #2
 800030a:	591b      	ldr	r3, [r3, r4]
 800030c:	469f      	mov	pc, r3
 800030e:	465a      	mov	r2, fp
 8000310:	4302      	orrs	r2, r0
 8000312:	4691      	mov	r9, r2
 8000314:	d000      	beq.n	8000318 <__aeabi_ddiv+0xa8>
 8000316:	e090      	b.n	800043a <__aeabi_ddiv+0x1ca>
 8000318:	469a      	mov	sl, r3
 800031a:	2302      	movs	r3, #2
 800031c:	4690      	mov	r8, r2
 800031e:	2408      	movs	r4, #8
 8000320:	9303      	str	r3, [sp, #12]
 8000322:	e7cc      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000324:	46cb      	mov	fp, r9
 8000326:	4642      	mov	r2, r8
 8000328:	9d02      	ldr	r5, [sp, #8]
 800032a:	9903      	ldr	r1, [sp, #12]
 800032c:	2902      	cmp	r1, #2
 800032e:	d100      	bne.n	8000332 <__aeabi_ddiv+0xc2>
 8000330:	e1de      	b.n	80006f0 <__aeabi_ddiv+0x480>
 8000332:	2903      	cmp	r1, #3
 8000334:	d100      	bne.n	8000338 <__aeabi_ddiv+0xc8>
 8000336:	e08d      	b.n	8000454 <__aeabi_ddiv+0x1e4>
 8000338:	2901      	cmp	r1, #1
 800033a:	d000      	beq.n	800033e <__aeabi_ddiv+0xce>
 800033c:	e179      	b.n	8000632 <__aeabi_ddiv+0x3c2>
 800033e:	002e      	movs	r6, r5
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	2400      	movs	r4, #0
 8000346:	4690      	mov	r8, r2
 8000348:	051b      	lsls	r3, r3, #20
 800034a:	4323      	orrs	r3, r4
 800034c:	07f6      	lsls	r6, r6, #31
 800034e:	4333      	orrs	r3, r6
 8000350:	4640      	mov	r0, r8
 8000352:	0019      	movs	r1, r3
 8000354:	b007      	add	sp, #28
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	46bb      	mov	fp, r7
 800035a:	46b2      	mov	sl, r6
 800035c:	46a9      	mov	r9, r5
 800035e:	46a0      	mov	r8, r4
 8000360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000362:	2200      	movs	r2, #0
 8000364:	2400      	movs	r4, #0
 8000366:	4690      	mov	r8, r2
 8000368:	4b48      	ldr	r3, [pc, #288]	@ (800048c <__aeabi_ddiv+0x21c>)
 800036a:	e7ed      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800036c:	465a      	mov	r2, fp
 800036e:	9b00      	ldr	r3, [sp, #0]
 8000370:	431a      	orrs	r2, r3
 8000372:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <__aeabi_ddiv+0x228>)
 8000374:	469c      	mov	ip, r3
 8000376:	44e2      	add	sl, ip
 8000378:	2a00      	cmp	r2, #0
 800037a:	d159      	bne.n	8000430 <__aeabi_ddiv+0x1c0>
 800037c:	2302      	movs	r3, #2
 800037e:	431c      	orrs	r4, r3
 8000380:	2300      	movs	r3, #0
 8000382:	2102      	movs	r1, #2
 8000384:	469b      	mov	fp, r3
 8000386:	e7b8      	b.n	80002fa <__aeabi_ddiv+0x8a>
 8000388:	465a      	mov	r2, fp
 800038a:	9b00      	ldr	r3, [sp, #0]
 800038c:	431a      	orrs	r2, r3
 800038e:	d049      	beq.n	8000424 <__aeabi_ddiv+0x1b4>
 8000390:	465b      	mov	r3, fp
 8000392:	2b00      	cmp	r3, #0
 8000394:	d100      	bne.n	8000398 <__aeabi_ddiv+0x128>
 8000396:	e19c      	b.n	80006d2 <__aeabi_ddiv+0x462>
 8000398:	4658      	mov	r0, fp
 800039a:	f001 fa3d 	bl	8001818 <__clzsi2>
 800039e:	0002      	movs	r2, r0
 80003a0:	0003      	movs	r3, r0
 80003a2:	3a0b      	subs	r2, #11
 80003a4:	271d      	movs	r7, #29
 80003a6:	9e00      	ldr	r6, [sp, #0]
 80003a8:	1aba      	subs	r2, r7, r2
 80003aa:	0019      	movs	r1, r3
 80003ac:	4658      	mov	r0, fp
 80003ae:	40d6      	lsrs	r6, r2
 80003b0:	3908      	subs	r1, #8
 80003b2:	4088      	lsls	r0, r1
 80003b4:	0032      	movs	r2, r6
 80003b6:	4302      	orrs	r2, r0
 80003b8:	4693      	mov	fp, r2
 80003ba:	9a00      	ldr	r2, [sp, #0]
 80003bc:	408a      	lsls	r2, r1
 80003be:	4937      	ldr	r1, [pc, #220]	@ (800049c <__aeabi_ddiv+0x22c>)
 80003c0:	4453      	add	r3, sl
 80003c2:	468a      	mov	sl, r1
 80003c4:	2100      	movs	r1, #0
 80003c6:	449a      	add	sl, r3
 80003c8:	e797      	b.n	80002fa <__aeabi_ddiv+0x8a>
 80003ca:	465b      	mov	r3, fp
 80003cc:	4303      	orrs	r3, r0
 80003ce:	4699      	mov	r9, r3
 80003d0:	d021      	beq.n	8000416 <__aeabi_ddiv+0x1a6>
 80003d2:	465b      	mov	r3, fp
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d100      	bne.n	80003da <__aeabi_ddiv+0x16a>
 80003d8:	e169      	b.n	80006ae <__aeabi_ddiv+0x43e>
 80003da:	4658      	mov	r0, fp
 80003dc:	f001 fa1c 	bl	8001818 <__clzsi2>
 80003e0:	230b      	movs	r3, #11
 80003e2:	425b      	negs	r3, r3
 80003e4:	469c      	mov	ip, r3
 80003e6:	0002      	movs	r2, r0
 80003e8:	4484      	add	ip, r0
 80003ea:	4666      	mov	r6, ip
 80003ec:	231d      	movs	r3, #29
 80003ee:	1b9b      	subs	r3, r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	0011      	movs	r1, r2
 80003f4:	4658      	mov	r0, fp
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	3908      	subs	r1, #8
 80003fa:	4088      	lsls	r0, r1
 80003fc:	0033      	movs	r3, r6
 80003fe:	4303      	orrs	r3, r0
 8000400:	4699      	mov	r9, r3
 8000402:	0023      	movs	r3, r4
 8000404:	408b      	lsls	r3, r1
 8000406:	4698      	mov	r8, r3
 8000408:	4b25      	ldr	r3, [pc, #148]	@ (80004a0 <__aeabi_ddiv+0x230>)
 800040a:	2400      	movs	r4, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	469a      	mov	sl, r3
 8000410:	2300      	movs	r3, #0
 8000412:	9303      	str	r3, [sp, #12]
 8000414:	e753      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000416:	2300      	movs	r3, #0
 8000418:	4698      	mov	r8, r3
 800041a:	469a      	mov	sl, r3
 800041c:	3301      	adds	r3, #1
 800041e:	2404      	movs	r4, #4
 8000420:	9303      	str	r3, [sp, #12]
 8000422:	e74c      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000424:	2301      	movs	r3, #1
 8000426:	431c      	orrs	r4, r3
 8000428:	2300      	movs	r3, #0
 800042a:	2101      	movs	r1, #1
 800042c:	469b      	mov	fp, r3
 800042e:	e764      	b.n	80002fa <__aeabi_ddiv+0x8a>
 8000430:	2303      	movs	r3, #3
 8000432:	0032      	movs	r2, r6
 8000434:	2103      	movs	r1, #3
 8000436:	431c      	orrs	r4, r3
 8000438:	e75f      	b.n	80002fa <__aeabi_ddiv+0x8a>
 800043a:	469a      	mov	sl, r3
 800043c:	2303      	movs	r3, #3
 800043e:	46d9      	mov	r9, fp
 8000440:	240c      	movs	r4, #12
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	e73b      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000446:	2300      	movs	r3, #0
 8000448:	2480      	movs	r4, #128	@ 0x80
 800044a:	4698      	mov	r8, r3
 800044c:	2600      	movs	r6, #0
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000450:	0324      	lsls	r4, r4, #12
 8000452:	e779      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000454:	2480      	movs	r4, #128	@ 0x80
 8000456:	465b      	mov	r3, fp
 8000458:	0324      	lsls	r4, r4, #12
 800045a:	431c      	orrs	r4, r3
 800045c:	0324      	lsls	r4, r4, #12
 800045e:	002e      	movs	r6, r5
 8000460:	4690      	mov	r8, r2
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000464:	0b24      	lsrs	r4, r4, #12
 8000466:	e76f      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000468:	2480      	movs	r4, #128	@ 0x80
 800046a:	464b      	mov	r3, r9
 800046c:	0324      	lsls	r4, r4, #12
 800046e:	4223      	tst	r3, r4
 8000470:	d002      	beq.n	8000478 <__aeabi_ddiv+0x208>
 8000472:	465b      	mov	r3, fp
 8000474:	4223      	tst	r3, r4
 8000476:	d0f0      	beq.n	800045a <__aeabi_ddiv+0x1ea>
 8000478:	2480      	movs	r4, #128	@ 0x80
 800047a:	464b      	mov	r3, r9
 800047c:	0324      	lsls	r4, r4, #12
 800047e:	431c      	orrs	r4, r3
 8000480:	0324      	lsls	r4, r4, #12
 8000482:	9e02      	ldr	r6, [sp, #8]
 8000484:	4b01      	ldr	r3, [pc, #4]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000486:	0b24      	lsrs	r4, r4, #12
 8000488:	e75e      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	000007ff 	.word	0x000007ff
 8000490:	fffffc01 	.word	0xfffffc01
 8000494:	08006a64 	.word	0x08006a64
 8000498:	fffff801 	.word	0xfffff801
 800049c:	000003f3 	.word	0x000003f3
 80004a0:	fffffc0d 	.word	0xfffffc0d
 80004a4:	45cb      	cmp	fp, r9
 80004a6:	d200      	bcs.n	80004aa <__aeabi_ddiv+0x23a>
 80004a8:	e0f8      	b.n	800069c <__aeabi_ddiv+0x42c>
 80004aa:	d100      	bne.n	80004ae <__aeabi_ddiv+0x23e>
 80004ac:	e0f3      	b.n	8000696 <__aeabi_ddiv+0x426>
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	469c      	mov	ip, r3
 80004b4:	4644      	mov	r4, r8
 80004b6:	4648      	mov	r0, r9
 80004b8:	2500      	movs	r5, #0
 80004ba:	44e2      	add	sl, ip
 80004bc:	465b      	mov	r3, fp
 80004be:	0e17      	lsrs	r7, r2, #24
 80004c0:	021b      	lsls	r3, r3, #8
 80004c2:	431f      	orrs	r7, r3
 80004c4:	0c19      	lsrs	r1, r3, #16
 80004c6:	043b      	lsls	r3, r7, #16
 80004c8:	0212      	lsls	r2, r2, #8
 80004ca:	9700      	str	r7, [sp, #0]
 80004cc:	0c1f      	lsrs	r7, r3, #16
 80004ce:	4691      	mov	r9, r2
 80004d0:	9102      	str	r1, [sp, #8]
 80004d2:	9703      	str	r7, [sp, #12]
 80004d4:	f7ff fea8 	bl	8000228 <__aeabi_uidivmod>
 80004d8:	0002      	movs	r2, r0
 80004da:	437a      	muls	r2, r7
 80004dc:	040b      	lsls	r3, r1, #16
 80004de:	0c21      	lsrs	r1, r4, #16
 80004e0:	4680      	mov	r8, r0
 80004e2:	4319      	orrs	r1, r3
 80004e4:	428a      	cmp	r2, r1
 80004e6:	d909      	bls.n	80004fc <__aeabi_ddiv+0x28c>
 80004e8:	9f00      	ldr	r7, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	46bc      	mov	ip, r7
 80004ee:	425b      	negs	r3, r3
 80004f0:	4461      	add	r1, ip
 80004f2:	469c      	mov	ip, r3
 80004f4:	44e0      	add	r8, ip
 80004f6:	428f      	cmp	r7, r1
 80004f8:	d800      	bhi.n	80004fc <__aeabi_ddiv+0x28c>
 80004fa:	e15c      	b.n	80007b6 <__aeabi_ddiv+0x546>
 80004fc:	1a88      	subs	r0, r1, r2
 80004fe:	9902      	ldr	r1, [sp, #8]
 8000500:	f7ff fe92 	bl	8000228 <__aeabi_uidivmod>
 8000504:	9a03      	ldr	r2, [sp, #12]
 8000506:	0424      	lsls	r4, r4, #16
 8000508:	4342      	muls	r2, r0
 800050a:	0409      	lsls	r1, r1, #16
 800050c:	0c24      	lsrs	r4, r4, #16
 800050e:	0003      	movs	r3, r0
 8000510:	430c      	orrs	r4, r1
 8000512:	42a2      	cmp	r2, r4
 8000514:	d906      	bls.n	8000524 <__aeabi_ddiv+0x2b4>
 8000516:	9900      	ldr	r1, [sp, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	468c      	mov	ip, r1
 800051c:	4464      	add	r4, ip
 800051e:	42a1      	cmp	r1, r4
 8000520:	d800      	bhi.n	8000524 <__aeabi_ddiv+0x2b4>
 8000522:	e142      	b.n	80007aa <__aeabi_ddiv+0x53a>
 8000524:	1aa0      	subs	r0, r4, r2
 8000526:	4642      	mov	r2, r8
 8000528:	0412      	lsls	r2, r2, #16
 800052a:	431a      	orrs	r2, r3
 800052c:	4693      	mov	fp, r2
 800052e:	464b      	mov	r3, r9
 8000530:	4659      	mov	r1, fp
 8000532:	0c1b      	lsrs	r3, r3, #16
 8000534:	001f      	movs	r7, r3
 8000536:	9304      	str	r3, [sp, #16]
 8000538:	040b      	lsls	r3, r1, #16
 800053a:	4649      	mov	r1, r9
 800053c:	0409      	lsls	r1, r1, #16
 800053e:	0c09      	lsrs	r1, r1, #16
 8000540:	000c      	movs	r4, r1
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	435c      	muls	r4, r3
 8000546:	0c12      	lsrs	r2, r2, #16
 8000548:	437b      	muls	r3, r7
 800054a:	4688      	mov	r8, r1
 800054c:	4351      	muls	r1, r2
 800054e:	437a      	muls	r2, r7
 8000550:	0c27      	lsrs	r7, r4, #16
 8000552:	46bc      	mov	ip, r7
 8000554:	185b      	adds	r3, r3, r1
 8000556:	4463      	add	r3, ip
 8000558:	4299      	cmp	r1, r3
 800055a:	d903      	bls.n	8000564 <__aeabi_ddiv+0x2f4>
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	0249      	lsls	r1, r1, #9
 8000560:	468c      	mov	ip, r1
 8000562:	4462      	add	r2, ip
 8000564:	0c19      	lsrs	r1, r3, #16
 8000566:	0424      	lsls	r4, r4, #16
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c24      	lsrs	r4, r4, #16
 800056c:	188a      	adds	r2, r1, r2
 800056e:	191c      	adds	r4, r3, r4
 8000570:	4290      	cmp	r0, r2
 8000572:	d302      	bcc.n	800057a <__aeabi_ddiv+0x30a>
 8000574:	d116      	bne.n	80005a4 <__aeabi_ddiv+0x334>
 8000576:	42a5      	cmp	r5, r4
 8000578:	d214      	bcs.n	80005a4 <__aeabi_ddiv+0x334>
 800057a:	465b      	mov	r3, fp
 800057c:	9f00      	ldr	r7, [sp, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	444d      	add	r5, r9
 8000582:	9305      	str	r3, [sp, #20]
 8000584:	454d      	cmp	r5, r9
 8000586:	419b      	sbcs	r3, r3
 8000588:	46bc      	mov	ip, r7
 800058a:	425b      	negs	r3, r3
 800058c:	4463      	add	r3, ip
 800058e:	18c0      	adds	r0, r0, r3
 8000590:	4287      	cmp	r7, r0
 8000592:	d300      	bcc.n	8000596 <__aeabi_ddiv+0x326>
 8000594:	e102      	b.n	800079c <__aeabi_ddiv+0x52c>
 8000596:	4282      	cmp	r2, r0
 8000598:	d900      	bls.n	800059c <__aeabi_ddiv+0x32c>
 800059a:	e129      	b.n	80007f0 <__aeabi_ddiv+0x580>
 800059c:	d100      	bne.n	80005a0 <__aeabi_ddiv+0x330>
 800059e:	e124      	b.n	80007ea <__aeabi_ddiv+0x57a>
 80005a0:	9b05      	ldr	r3, [sp, #20]
 80005a2:	469b      	mov	fp, r3
 80005a4:	1b2c      	subs	r4, r5, r4
 80005a6:	42a5      	cmp	r5, r4
 80005a8:	41ad      	sbcs	r5, r5
 80005aa:	9b00      	ldr	r3, [sp, #0]
 80005ac:	1a80      	subs	r0, r0, r2
 80005ae:	426d      	negs	r5, r5
 80005b0:	1b40      	subs	r0, r0, r5
 80005b2:	4283      	cmp	r3, r0
 80005b4:	d100      	bne.n	80005b8 <__aeabi_ddiv+0x348>
 80005b6:	e10f      	b.n	80007d8 <__aeabi_ddiv+0x568>
 80005b8:	9902      	ldr	r1, [sp, #8]
 80005ba:	f7ff fe35 	bl	8000228 <__aeabi_uidivmod>
 80005be:	9a03      	ldr	r2, [sp, #12]
 80005c0:	040b      	lsls	r3, r1, #16
 80005c2:	4342      	muls	r2, r0
 80005c4:	0c21      	lsrs	r1, r4, #16
 80005c6:	0005      	movs	r5, r0
 80005c8:	4319      	orrs	r1, r3
 80005ca:	428a      	cmp	r2, r1
 80005cc:	d900      	bls.n	80005d0 <__aeabi_ddiv+0x360>
 80005ce:	e0cb      	b.n	8000768 <__aeabi_ddiv+0x4f8>
 80005d0:	1a88      	subs	r0, r1, r2
 80005d2:	9902      	ldr	r1, [sp, #8]
 80005d4:	f7ff fe28 	bl	8000228 <__aeabi_uidivmod>
 80005d8:	9a03      	ldr	r2, [sp, #12]
 80005da:	0424      	lsls	r4, r4, #16
 80005dc:	4342      	muls	r2, r0
 80005de:	0409      	lsls	r1, r1, #16
 80005e0:	0c24      	lsrs	r4, r4, #16
 80005e2:	0003      	movs	r3, r0
 80005e4:	430c      	orrs	r4, r1
 80005e6:	42a2      	cmp	r2, r4
 80005e8:	d900      	bls.n	80005ec <__aeabi_ddiv+0x37c>
 80005ea:	e0ca      	b.n	8000782 <__aeabi_ddiv+0x512>
 80005ec:	4641      	mov	r1, r8
 80005ee:	1aa4      	subs	r4, r4, r2
 80005f0:	042a      	lsls	r2, r5, #16
 80005f2:	431a      	orrs	r2, r3
 80005f4:	9f04      	ldr	r7, [sp, #16]
 80005f6:	0413      	lsls	r3, r2, #16
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	4359      	muls	r1, r3
 80005fc:	4640      	mov	r0, r8
 80005fe:	437b      	muls	r3, r7
 8000600:	469c      	mov	ip, r3
 8000602:	0c15      	lsrs	r5, r2, #16
 8000604:	4368      	muls	r0, r5
 8000606:	0c0b      	lsrs	r3, r1, #16
 8000608:	4484      	add	ip, r0
 800060a:	4463      	add	r3, ip
 800060c:	437d      	muls	r5, r7
 800060e:	4298      	cmp	r0, r3
 8000610:	d903      	bls.n	800061a <__aeabi_ddiv+0x3aa>
 8000612:	2080      	movs	r0, #128	@ 0x80
 8000614:	0240      	lsls	r0, r0, #9
 8000616:	4684      	mov	ip, r0
 8000618:	4465      	add	r5, ip
 800061a:	0c18      	lsrs	r0, r3, #16
 800061c:	0409      	lsls	r1, r1, #16
 800061e:	041b      	lsls	r3, r3, #16
 8000620:	0c09      	lsrs	r1, r1, #16
 8000622:	1940      	adds	r0, r0, r5
 8000624:	185b      	adds	r3, r3, r1
 8000626:	4284      	cmp	r4, r0
 8000628:	d327      	bcc.n	800067a <__aeabi_ddiv+0x40a>
 800062a:	d023      	beq.n	8000674 <__aeabi_ddiv+0x404>
 800062c:	2301      	movs	r3, #1
 800062e:	0035      	movs	r5, r6
 8000630:	431a      	orrs	r2, r3
 8000632:	4b94      	ldr	r3, [pc, #592]	@ (8000884 <__aeabi_ddiv+0x614>)
 8000634:	4453      	add	r3, sl
 8000636:	2b00      	cmp	r3, #0
 8000638:	dd60      	ble.n	80006fc <__aeabi_ddiv+0x48c>
 800063a:	0751      	lsls	r1, r2, #29
 800063c:	d000      	beq.n	8000640 <__aeabi_ddiv+0x3d0>
 800063e:	e086      	b.n	800074e <__aeabi_ddiv+0x4de>
 8000640:	002e      	movs	r6, r5
 8000642:	08d1      	lsrs	r1, r2, #3
 8000644:	465a      	mov	r2, fp
 8000646:	01d2      	lsls	r2, r2, #7
 8000648:	d506      	bpl.n	8000658 <__aeabi_ddiv+0x3e8>
 800064a:	465a      	mov	r2, fp
 800064c:	4b8e      	ldr	r3, [pc, #568]	@ (8000888 <__aeabi_ddiv+0x618>)
 800064e:	401a      	ands	r2, r3
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	4693      	mov	fp, r2
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4453      	add	r3, sl
 8000658:	4a8c      	ldr	r2, [pc, #560]	@ (800088c <__aeabi_ddiv+0x61c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	dd00      	ble.n	8000660 <__aeabi_ddiv+0x3f0>
 800065e:	e680      	b.n	8000362 <__aeabi_ddiv+0xf2>
 8000660:	465a      	mov	r2, fp
 8000662:	0752      	lsls	r2, r2, #29
 8000664:	430a      	orrs	r2, r1
 8000666:	4690      	mov	r8, r2
 8000668:	465a      	mov	r2, fp
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	0254      	lsls	r4, r2, #9
 800066e:	0b24      	lsrs	r4, r4, #12
 8000670:	0d5b      	lsrs	r3, r3, #21
 8000672:	e669      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000674:	0035      	movs	r5, r6
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0db      	beq.n	8000632 <__aeabi_ddiv+0x3c2>
 800067a:	9d00      	ldr	r5, [sp, #0]
 800067c:	1e51      	subs	r1, r2, #1
 800067e:	46ac      	mov	ip, r5
 8000680:	4464      	add	r4, ip
 8000682:	42ac      	cmp	r4, r5
 8000684:	d200      	bcs.n	8000688 <__aeabi_ddiv+0x418>
 8000686:	e09e      	b.n	80007c6 <__aeabi_ddiv+0x556>
 8000688:	4284      	cmp	r4, r0
 800068a:	d200      	bcs.n	800068e <__aeabi_ddiv+0x41e>
 800068c:	e0e1      	b.n	8000852 <__aeabi_ddiv+0x5e2>
 800068e:	d100      	bne.n	8000692 <__aeabi_ddiv+0x422>
 8000690:	e0ee      	b.n	8000870 <__aeabi_ddiv+0x600>
 8000692:	000a      	movs	r2, r1
 8000694:	e7ca      	b.n	800062c <__aeabi_ddiv+0x3bc>
 8000696:	4542      	cmp	r2, r8
 8000698:	d900      	bls.n	800069c <__aeabi_ddiv+0x42c>
 800069a:	e708      	b.n	80004ae <__aeabi_ddiv+0x23e>
 800069c:	464b      	mov	r3, r9
 800069e:	07dc      	lsls	r4, r3, #31
 80006a0:	0858      	lsrs	r0, r3, #1
 80006a2:	4643      	mov	r3, r8
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	431c      	orrs	r4, r3
 80006a8:	4643      	mov	r3, r8
 80006aa:	07dd      	lsls	r5, r3, #31
 80006ac:	e706      	b.n	80004bc <__aeabi_ddiv+0x24c>
 80006ae:	f001 f8b3 	bl	8001818 <__clzsi2>
 80006b2:	2315      	movs	r3, #21
 80006b4:	469c      	mov	ip, r3
 80006b6:	4484      	add	ip, r0
 80006b8:	0002      	movs	r2, r0
 80006ba:	4663      	mov	r3, ip
 80006bc:	3220      	adds	r2, #32
 80006be:	2b1c      	cmp	r3, #28
 80006c0:	dc00      	bgt.n	80006c4 <__aeabi_ddiv+0x454>
 80006c2:	e692      	b.n	80003ea <__aeabi_ddiv+0x17a>
 80006c4:	0023      	movs	r3, r4
 80006c6:	3808      	subs	r0, #8
 80006c8:	4083      	lsls	r3, r0
 80006ca:	4699      	mov	r9, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4698      	mov	r8, r3
 80006d0:	e69a      	b.n	8000408 <__aeabi_ddiv+0x198>
 80006d2:	f001 f8a1 	bl	8001818 <__clzsi2>
 80006d6:	0002      	movs	r2, r0
 80006d8:	0003      	movs	r3, r0
 80006da:	3215      	adds	r2, #21
 80006dc:	3320      	adds	r3, #32
 80006de:	2a1c      	cmp	r2, #28
 80006e0:	dc00      	bgt.n	80006e4 <__aeabi_ddiv+0x474>
 80006e2:	e65f      	b.n	80003a4 <__aeabi_ddiv+0x134>
 80006e4:	9900      	ldr	r1, [sp, #0]
 80006e6:	3808      	subs	r0, #8
 80006e8:	4081      	lsls	r1, r0
 80006ea:	2200      	movs	r2, #0
 80006ec:	468b      	mov	fp, r1
 80006ee:	e666      	b.n	80003be <__aeabi_ddiv+0x14e>
 80006f0:	2200      	movs	r2, #0
 80006f2:	002e      	movs	r6, r5
 80006f4:	2400      	movs	r4, #0
 80006f6:	4690      	mov	r8, r2
 80006f8:	4b65      	ldr	r3, [pc, #404]	@ (8000890 <__aeabi_ddiv+0x620>)
 80006fa:	e625      	b.n	8000348 <__aeabi_ddiv+0xd8>
 80006fc:	002e      	movs	r6, r5
 80006fe:	2101      	movs	r1, #1
 8000700:	1ac9      	subs	r1, r1, r3
 8000702:	2938      	cmp	r1, #56	@ 0x38
 8000704:	dd00      	ble.n	8000708 <__aeabi_ddiv+0x498>
 8000706:	e61b      	b.n	8000340 <__aeabi_ddiv+0xd0>
 8000708:	291f      	cmp	r1, #31
 800070a:	dc7e      	bgt.n	800080a <__aeabi_ddiv+0x59a>
 800070c:	4861      	ldr	r0, [pc, #388]	@ (8000894 <__aeabi_ddiv+0x624>)
 800070e:	0014      	movs	r4, r2
 8000710:	4450      	add	r0, sl
 8000712:	465b      	mov	r3, fp
 8000714:	4082      	lsls	r2, r0
 8000716:	4083      	lsls	r3, r0
 8000718:	40cc      	lsrs	r4, r1
 800071a:	1e50      	subs	r0, r2, #1
 800071c:	4182      	sbcs	r2, r0
 800071e:	4323      	orrs	r3, r4
 8000720:	431a      	orrs	r2, r3
 8000722:	465b      	mov	r3, fp
 8000724:	40cb      	lsrs	r3, r1
 8000726:	0751      	lsls	r1, r2, #29
 8000728:	d009      	beq.n	800073e <__aeabi_ddiv+0x4ce>
 800072a:	210f      	movs	r1, #15
 800072c:	4011      	ands	r1, r2
 800072e:	2904      	cmp	r1, #4
 8000730:	d005      	beq.n	800073e <__aeabi_ddiv+0x4ce>
 8000732:	1d11      	adds	r1, r2, #4
 8000734:	4291      	cmp	r1, r2
 8000736:	4192      	sbcs	r2, r2
 8000738:	4252      	negs	r2, r2
 800073a:	189b      	adds	r3, r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	0219      	lsls	r1, r3, #8
 8000740:	d400      	bmi.n	8000744 <__aeabi_ddiv+0x4d4>
 8000742:	e09b      	b.n	800087c <__aeabi_ddiv+0x60c>
 8000744:	2200      	movs	r2, #0
 8000746:	2301      	movs	r3, #1
 8000748:	2400      	movs	r4, #0
 800074a:	4690      	mov	r8, r2
 800074c:	e5fc      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800074e:	210f      	movs	r1, #15
 8000750:	4011      	ands	r1, r2
 8000752:	2904      	cmp	r1, #4
 8000754:	d100      	bne.n	8000758 <__aeabi_ddiv+0x4e8>
 8000756:	e773      	b.n	8000640 <__aeabi_ddiv+0x3d0>
 8000758:	1d11      	adds	r1, r2, #4
 800075a:	4291      	cmp	r1, r2
 800075c:	4192      	sbcs	r2, r2
 800075e:	4252      	negs	r2, r2
 8000760:	002e      	movs	r6, r5
 8000762:	08c9      	lsrs	r1, r1, #3
 8000764:	4493      	add	fp, r2
 8000766:	e76d      	b.n	8000644 <__aeabi_ddiv+0x3d4>
 8000768:	9b00      	ldr	r3, [sp, #0]
 800076a:	3d01      	subs	r5, #1
 800076c:	469c      	mov	ip, r3
 800076e:	4461      	add	r1, ip
 8000770:	428b      	cmp	r3, r1
 8000772:	d900      	bls.n	8000776 <__aeabi_ddiv+0x506>
 8000774:	e72c      	b.n	80005d0 <__aeabi_ddiv+0x360>
 8000776:	428a      	cmp	r2, r1
 8000778:	d800      	bhi.n	800077c <__aeabi_ddiv+0x50c>
 800077a:	e729      	b.n	80005d0 <__aeabi_ddiv+0x360>
 800077c:	1e85      	subs	r5, r0, #2
 800077e:	4461      	add	r1, ip
 8000780:	e726      	b.n	80005d0 <__aeabi_ddiv+0x360>
 8000782:	9900      	ldr	r1, [sp, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	468c      	mov	ip, r1
 8000788:	4464      	add	r4, ip
 800078a:	42a1      	cmp	r1, r4
 800078c:	d900      	bls.n	8000790 <__aeabi_ddiv+0x520>
 800078e:	e72d      	b.n	80005ec <__aeabi_ddiv+0x37c>
 8000790:	42a2      	cmp	r2, r4
 8000792:	d800      	bhi.n	8000796 <__aeabi_ddiv+0x526>
 8000794:	e72a      	b.n	80005ec <__aeabi_ddiv+0x37c>
 8000796:	1e83      	subs	r3, r0, #2
 8000798:	4464      	add	r4, ip
 800079a:	e727      	b.n	80005ec <__aeabi_ddiv+0x37c>
 800079c:	4287      	cmp	r7, r0
 800079e:	d000      	beq.n	80007a2 <__aeabi_ddiv+0x532>
 80007a0:	e6fe      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007a2:	45a9      	cmp	r9, r5
 80007a4:	d900      	bls.n	80007a8 <__aeabi_ddiv+0x538>
 80007a6:	e6fb      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007a8:	e6f5      	b.n	8000596 <__aeabi_ddiv+0x326>
 80007aa:	42a2      	cmp	r2, r4
 80007ac:	d800      	bhi.n	80007b0 <__aeabi_ddiv+0x540>
 80007ae:	e6b9      	b.n	8000524 <__aeabi_ddiv+0x2b4>
 80007b0:	1e83      	subs	r3, r0, #2
 80007b2:	4464      	add	r4, ip
 80007b4:	e6b6      	b.n	8000524 <__aeabi_ddiv+0x2b4>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	d800      	bhi.n	80007bc <__aeabi_ddiv+0x54c>
 80007ba:	e69f      	b.n	80004fc <__aeabi_ddiv+0x28c>
 80007bc:	46bc      	mov	ip, r7
 80007be:	1e83      	subs	r3, r0, #2
 80007c0:	4698      	mov	r8, r3
 80007c2:	4461      	add	r1, ip
 80007c4:	e69a      	b.n	80004fc <__aeabi_ddiv+0x28c>
 80007c6:	000a      	movs	r2, r1
 80007c8:	4284      	cmp	r4, r0
 80007ca:	d000      	beq.n	80007ce <__aeabi_ddiv+0x55e>
 80007cc:	e72e      	b.n	800062c <__aeabi_ddiv+0x3bc>
 80007ce:	454b      	cmp	r3, r9
 80007d0:	d000      	beq.n	80007d4 <__aeabi_ddiv+0x564>
 80007d2:	e72b      	b.n	800062c <__aeabi_ddiv+0x3bc>
 80007d4:	0035      	movs	r5, r6
 80007d6:	e72c      	b.n	8000632 <__aeabi_ddiv+0x3c2>
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <__aeabi_ddiv+0x614>)
 80007da:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <__aeabi_ddiv+0x628>)
 80007dc:	4453      	add	r3, sl
 80007de:	4592      	cmp	sl, r2
 80007e0:	db43      	blt.n	800086a <__aeabi_ddiv+0x5fa>
 80007e2:	2201      	movs	r2, #1
 80007e4:	2100      	movs	r1, #0
 80007e6:	4493      	add	fp, r2
 80007e8:	e72c      	b.n	8000644 <__aeabi_ddiv+0x3d4>
 80007ea:	42ac      	cmp	r4, r5
 80007ec:	d800      	bhi.n	80007f0 <__aeabi_ddiv+0x580>
 80007ee:	e6d7      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007f0:	2302      	movs	r3, #2
 80007f2:	425b      	negs	r3, r3
 80007f4:	469c      	mov	ip, r3
 80007f6:	9900      	ldr	r1, [sp, #0]
 80007f8:	444d      	add	r5, r9
 80007fa:	454d      	cmp	r5, r9
 80007fc:	419b      	sbcs	r3, r3
 80007fe:	44e3      	add	fp, ip
 8000800:	468c      	mov	ip, r1
 8000802:	425b      	negs	r3, r3
 8000804:	4463      	add	r3, ip
 8000806:	18c0      	adds	r0, r0, r3
 8000808:	e6cc      	b.n	80005a4 <__aeabi_ddiv+0x334>
 800080a:	201f      	movs	r0, #31
 800080c:	4240      	negs	r0, r0
 800080e:	1ac3      	subs	r3, r0, r3
 8000810:	4658      	mov	r0, fp
 8000812:	40d8      	lsrs	r0, r3
 8000814:	2920      	cmp	r1, #32
 8000816:	d004      	beq.n	8000822 <__aeabi_ddiv+0x5b2>
 8000818:	4659      	mov	r1, fp
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <__aeabi_ddiv+0x62c>)
 800081c:	4453      	add	r3, sl
 800081e:	4099      	lsls	r1, r3
 8000820:	430a      	orrs	r2, r1
 8000822:	1e53      	subs	r3, r2, #1
 8000824:	419a      	sbcs	r2, r3
 8000826:	2307      	movs	r3, #7
 8000828:	0019      	movs	r1, r3
 800082a:	4302      	orrs	r2, r0
 800082c:	2400      	movs	r4, #0
 800082e:	4011      	ands	r1, r2
 8000830:	4213      	tst	r3, r2
 8000832:	d009      	beq.n	8000848 <__aeabi_ddiv+0x5d8>
 8000834:	3308      	adds	r3, #8
 8000836:	4013      	ands	r3, r2
 8000838:	2b04      	cmp	r3, #4
 800083a:	d01d      	beq.n	8000878 <__aeabi_ddiv+0x608>
 800083c:	1d13      	adds	r3, r2, #4
 800083e:	4293      	cmp	r3, r2
 8000840:	4189      	sbcs	r1, r1
 8000842:	001a      	movs	r2, r3
 8000844:	4249      	negs	r1, r1
 8000846:	0749      	lsls	r1, r1, #29
 8000848:	08d2      	lsrs	r2, r2, #3
 800084a:	430a      	orrs	r2, r1
 800084c:	4690      	mov	r8, r2
 800084e:	2300      	movs	r3, #0
 8000850:	e57a      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000852:	4649      	mov	r1, r9
 8000854:	9f00      	ldr	r7, [sp, #0]
 8000856:	004d      	lsls	r5, r1, #1
 8000858:	454d      	cmp	r5, r9
 800085a:	4189      	sbcs	r1, r1
 800085c:	46bc      	mov	ip, r7
 800085e:	4249      	negs	r1, r1
 8000860:	4461      	add	r1, ip
 8000862:	46a9      	mov	r9, r5
 8000864:	3a02      	subs	r2, #2
 8000866:	1864      	adds	r4, r4, r1
 8000868:	e7ae      	b.n	80007c8 <__aeabi_ddiv+0x558>
 800086a:	2201      	movs	r2, #1
 800086c:	4252      	negs	r2, r2
 800086e:	e746      	b.n	80006fe <__aeabi_ddiv+0x48e>
 8000870:	4599      	cmp	r9, r3
 8000872:	d3ee      	bcc.n	8000852 <__aeabi_ddiv+0x5e2>
 8000874:	000a      	movs	r2, r1
 8000876:	e7aa      	b.n	80007ce <__aeabi_ddiv+0x55e>
 8000878:	2100      	movs	r1, #0
 800087a:	e7e5      	b.n	8000848 <__aeabi_ddiv+0x5d8>
 800087c:	0759      	lsls	r1, r3, #29
 800087e:	025b      	lsls	r3, r3, #9
 8000880:	0b1c      	lsrs	r4, r3, #12
 8000882:	e7e1      	b.n	8000848 <__aeabi_ddiv+0x5d8>
 8000884:	000003ff 	.word	0x000003ff
 8000888:	feffffff 	.word	0xfeffffff
 800088c:	000007fe 	.word	0x000007fe
 8000890:	000007ff 	.word	0x000007ff
 8000894:	0000041e 	.word	0x0000041e
 8000898:	fffffc02 	.word	0xfffffc02
 800089c:	0000043e 	.word	0x0000043e

080008a0 <__aeabi_dmul>:
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	4657      	mov	r7, sl
 80008a4:	464e      	mov	r6, r9
 80008a6:	46de      	mov	lr, fp
 80008a8:	4645      	mov	r5, r8
 80008aa:	b5e0      	push	{r5, r6, r7, lr}
 80008ac:	001f      	movs	r7, r3
 80008ae:	030b      	lsls	r3, r1, #12
 80008b0:	0b1b      	lsrs	r3, r3, #12
 80008b2:	0016      	movs	r6, r2
 80008b4:	469a      	mov	sl, r3
 80008b6:	0fca      	lsrs	r2, r1, #31
 80008b8:	004b      	lsls	r3, r1, #1
 80008ba:	0004      	movs	r4, r0
 80008bc:	4691      	mov	r9, r2
 80008be:	b085      	sub	sp, #20
 80008c0:	0d5b      	lsrs	r3, r3, #21
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dmul+0x26>
 80008c4:	e1cf      	b.n	8000c66 <__aeabi_dmul+0x3c6>
 80008c6:	4acd      	ldr	r2, [pc, #820]	@ (8000bfc <__aeabi_dmul+0x35c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d055      	beq.n	8000978 <__aeabi_dmul+0xd8>
 80008cc:	4651      	mov	r1, sl
 80008ce:	0f42      	lsrs	r2, r0, #29
 80008d0:	00c9      	lsls	r1, r1, #3
 80008d2:	430a      	orrs	r2, r1
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	0409      	lsls	r1, r1, #16
 80008d8:	4311      	orrs	r1, r2
 80008da:	00c2      	lsls	r2, r0, #3
 80008dc:	4690      	mov	r8, r2
 80008de:	4ac8      	ldr	r2, [pc, #800]	@ (8000c00 <__aeabi_dmul+0x360>)
 80008e0:	468a      	mov	sl, r1
 80008e2:	4693      	mov	fp, r2
 80008e4:	449b      	add	fp, r3
 80008e6:	2300      	movs	r3, #0
 80008e8:	2500      	movs	r5, #0
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	033c      	lsls	r4, r7, #12
 80008ee:	007b      	lsls	r3, r7, #1
 80008f0:	0ffa      	lsrs	r2, r7, #31
 80008f2:	9601      	str	r6, [sp, #4]
 80008f4:	0b24      	lsrs	r4, r4, #12
 80008f6:	0d5b      	lsrs	r3, r3, #21
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	d100      	bne.n	80008fe <__aeabi_dmul+0x5e>
 80008fc:	e188      	b.n	8000c10 <__aeabi_dmul+0x370>
 80008fe:	4abf      	ldr	r2, [pc, #764]	@ (8000bfc <__aeabi_dmul+0x35c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d100      	bne.n	8000906 <__aeabi_dmul+0x66>
 8000904:	e092      	b.n	8000a2c <__aeabi_dmul+0x18c>
 8000906:	4abe      	ldr	r2, [pc, #760]	@ (8000c00 <__aeabi_dmul+0x360>)
 8000908:	4694      	mov	ip, r2
 800090a:	4463      	add	r3, ip
 800090c:	449b      	add	fp, r3
 800090e:	2d0a      	cmp	r5, #10
 8000910:	dc42      	bgt.n	8000998 <__aeabi_dmul+0xf8>
 8000912:	00e4      	lsls	r4, r4, #3
 8000914:	0f73      	lsrs	r3, r6, #29
 8000916:	4323      	orrs	r3, r4
 8000918:	2480      	movs	r4, #128	@ 0x80
 800091a:	4649      	mov	r1, r9
 800091c:	0424      	lsls	r4, r4, #16
 800091e:	431c      	orrs	r4, r3
 8000920:	00f3      	lsls	r3, r6, #3
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	9b00      	ldr	r3, [sp, #0]
 8000926:	2000      	movs	r0, #0
 8000928:	4059      	eors	r1, r3
 800092a:	b2cb      	uxtb	r3, r1
 800092c:	9303      	str	r3, [sp, #12]
 800092e:	2d02      	cmp	r5, #2
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dmul+0x94>
 8000932:	e094      	b.n	8000a5e <__aeabi_dmul+0x1be>
 8000934:	2301      	movs	r3, #1
 8000936:	40ab      	lsls	r3, r5
 8000938:	001d      	movs	r5, r3
 800093a:	23a6      	movs	r3, #166	@ 0xa6
 800093c:	002a      	movs	r2, r5
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	401a      	ands	r2, r3
 8000942:	421d      	tst	r5, r3
 8000944:	d000      	beq.n	8000948 <__aeabi_dmul+0xa8>
 8000946:	e229      	b.n	8000d9c <__aeabi_dmul+0x4fc>
 8000948:	2390      	movs	r3, #144	@ 0x90
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	421d      	tst	r5, r3
 800094e:	d100      	bne.n	8000952 <__aeabi_dmul+0xb2>
 8000950:	e24d      	b.n	8000dee <__aeabi_dmul+0x54e>
 8000952:	2300      	movs	r3, #0
 8000954:	2480      	movs	r4, #128	@ 0x80
 8000956:	4699      	mov	r9, r3
 8000958:	0324      	lsls	r4, r4, #12
 800095a:	4ba8      	ldr	r3, [pc, #672]	@ (8000bfc <__aeabi_dmul+0x35c>)
 800095c:	0010      	movs	r0, r2
 800095e:	464a      	mov	r2, r9
 8000960:	051b      	lsls	r3, r3, #20
 8000962:	4323      	orrs	r3, r4
 8000964:	07d2      	lsls	r2, r2, #31
 8000966:	4313      	orrs	r3, r2
 8000968:	0019      	movs	r1, r3
 800096a:	b005      	add	sp, #20
 800096c:	bcf0      	pop	{r4, r5, r6, r7}
 800096e:	46bb      	mov	fp, r7
 8000970:	46b2      	mov	sl, r6
 8000972:	46a9      	mov	r9, r5
 8000974:	46a0      	mov	r8, r4
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000978:	4652      	mov	r2, sl
 800097a:	4302      	orrs	r2, r0
 800097c:	4690      	mov	r8, r2
 800097e:	d000      	beq.n	8000982 <__aeabi_dmul+0xe2>
 8000980:	e1ac      	b.n	8000cdc <__aeabi_dmul+0x43c>
 8000982:	469b      	mov	fp, r3
 8000984:	2302      	movs	r3, #2
 8000986:	4692      	mov	sl, r2
 8000988:	2508      	movs	r5, #8
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	e7ae      	b.n	80008ec <__aeabi_dmul+0x4c>
 800098e:	9b00      	ldr	r3, [sp, #0]
 8000990:	46a2      	mov	sl, r4
 8000992:	4699      	mov	r9, r3
 8000994:	9b01      	ldr	r3, [sp, #4]
 8000996:	4698      	mov	r8, r3
 8000998:	9b02      	ldr	r3, [sp, #8]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d100      	bne.n	80009a0 <__aeabi_dmul+0x100>
 800099e:	e1ca      	b.n	8000d36 <__aeabi_dmul+0x496>
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dmul+0x106>
 80009a4:	e192      	b.n	8000ccc <__aeabi_dmul+0x42c>
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d110      	bne.n	80009cc <__aeabi_dmul+0x12c>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2400      	movs	r4, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e7d4      	b.n	800095c <__aeabi_dmul+0xbc>
 80009b2:	2201      	movs	r2, #1
 80009b4:	087b      	lsrs	r3, r7, #1
 80009b6:	403a      	ands	r2, r7
 80009b8:	4313      	orrs	r3, r2
 80009ba:	4652      	mov	r2, sl
 80009bc:	07d2      	lsls	r2, r2, #31
 80009be:	4313      	orrs	r3, r2
 80009c0:	4698      	mov	r8, r3
 80009c2:	4653      	mov	r3, sl
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	469a      	mov	sl, r3
 80009c8:	9b03      	ldr	r3, [sp, #12]
 80009ca:	4699      	mov	r9, r3
 80009cc:	465b      	mov	r3, fp
 80009ce:	1c58      	adds	r0, r3, #1
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	445b      	add	r3, fp
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dc00      	bgt.n	80009dc <__aeabi_dmul+0x13c>
 80009da:	e1b1      	b.n	8000d40 <__aeabi_dmul+0x4a0>
 80009dc:	4642      	mov	r2, r8
 80009de:	0752      	lsls	r2, r2, #29
 80009e0:	d00b      	beq.n	80009fa <__aeabi_dmul+0x15a>
 80009e2:	220f      	movs	r2, #15
 80009e4:	4641      	mov	r1, r8
 80009e6:	400a      	ands	r2, r1
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d006      	beq.n	80009fa <__aeabi_dmul+0x15a>
 80009ec:	4642      	mov	r2, r8
 80009ee:	1d11      	adds	r1, r2, #4
 80009f0:	4541      	cmp	r1, r8
 80009f2:	4192      	sbcs	r2, r2
 80009f4:	4688      	mov	r8, r1
 80009f6:	4252      	negs	r2, r2
 80009f8:	4492      	add	sl, r2
 80009fa:	4652      	mov	r2, sl
 80009fc:	01d2      	lsls	r2, r2, #7
 80009fe:	d506      	bpl.n	8000a0e <__aeabi_dmul+0x16e>
 8000a00:	4652      	mov	r2, sl
 8000a02:	4b80      	ldr	r3, [pc, #512]	@ (8000c04 <__aeabi_dmul+0x364>)
 8000a04:	401a      	ands	r2, r3
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	4692      	mov	sl, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	18c3      	adds	r3, r0, r3
 8000a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8000c08 <__aeabi_dmul+0x368>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dmul+0x176>
 8000a14:	e18f      	b.n	8000d36 <__aeabi_dmul+0x496>
 8000a16:	4642      	mov	r2, r8
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	4651      	mov	r1, sl
 8000a22:	055b      	lsls	r3, r3, #21
 8000a24:	024c      	lsls	r4, r1, #9
 8000a26:	0b24      	lsrs	r4, r4, #12
 8000a28:	0d5b      	lsrs	r3, r3, #21
 8000a2a:	e797      	b.n	800095c <__aeabi_dmul+0xbc>
 8000a2c:	4b73      	ldr	r3, [pc, #460]	@ (8000bfc <__aeabi_dmul+0x35c>)
 8000a2e:	4326      	orrs	r6, r4
 8000a30:	469c      	mov	ip, r3
 8000a32:	44e3      	add	fp, ip
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dmul+0x19a>
 8000a38:	e16f      	b.n	8000d1a <__aeabi_dmul+0x47a>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	431d      	orrs	r5, r3
 8000a40:	9b00      	ldr	r3, [sp, #0]
 8000a42:	4059      	eors	r1, r3
 8000a44:	b2cb      	uxtb	r3, r1
 8000a46:	9303      	str	r3, [sp, #12]
 8000a48:	2d0a      	cmp	r5, #10
 8000a4a:	dd00      	ble.n	8000a4e <__aeabi_dmul+0x1ae>
 8000a4c:	e133      	b.n	8000cb6 <__aeabi_dmul+0x416>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	40ab      	lsls	r3, r5
 8000a52:	001d      	movs	r5, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	9302      	str	r3, [sp, #8]
 8000a58:	2288      	movs	r2, #136	@ 0x88
 8000a5a:	422a      	tst	r2, r5
 8000a5c:	d197      	bne.n	800098e <__aeabi_dmul+0xee>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	4643      	mov	r3, r8
 8000a62:	0412      	lsls	r2, r2, #16
 8000a64:	0c12      	lsrs	r2, r2, #16
 8000a66:	0016      	movs	r6, r2
 8000a68:	9801      	ldr	r0, [sp, #4]
 8000a6a:	0c1d      	lsrs	r5, r3, #16
 8000a6c:	0c03      	lsrs	r3, r0, #16
 8000a6e:	0400      	lsls	r0, r0, #16
 8000a70:	0c00      	lsrs	r0, r0, #16
 8000a72:	4346      	muls	r6, r0
 8000a74:	46b4      	mov	ip, r6
 8000a76:	001e      	movs	r6, r3
 8000a78:	436e      	muls	r6, r5
 8000a7a:	9600      	str	r6, [sp, #0]
 8000a7c:	0016      	movs	r6, r2
 8000a7e:	0007      	movs	r7, r0
 8000a80:	435e      	muls	r6, r3
 8000a82:	4661      	mov	r1, ip
 8000a84:	46b0      	mov	r8, r6
 8000a86:	436f      	muls	r7, r5
 8000a88:	0c0e      	lsrs	r6, r1, #16
 8000a8a:	44b8      	add	r8, r7
 8000a8c:	4446      	add	r6, r8
 8000a8e:	42b7      	cmp	r7, r6
 8000a90:	d905      	bls.n	8000a9e <__aeabi_dmul+0x1fe>
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	0249      	lsls	r1, r1, #9
 8000a96:	4688      	mov	r8, r1
 8000a98:	9f00      	ldr	r7, [sp, #0]
 8000a9a:	4447      	add	r7, r8
 8000a9c:	9700      	str	r7, [sp, #0]
 8000a9e:	4661      	mov	r1, ip
 8000aa0:	0409      	lsls	r1, r1, #16
 8000aa2:	0c09      	lsrs	r1, r1, #16
 8000aa4:	0c37      	lsrs	r7, r6, #16
 8000aa6:	0436      	lsls	r6, r6, #16
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	0031      	movs	r1, r6
 8000aac:	4461      	add	r1, ip
 8000aae:	9101      	str	r1, [sp, #4]
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0c26      	lsrs	r6, r4, #16
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	0c24      	lsrs	r4, r4, #16
 8000ab8:	4361      	muls	r1, r4
 8000aba:	468c      	mov	ip, r1
 8000abc:	0021      	movs	r1, r4
 8000abe:	4369      	muls	r1, r5
 8000ac0:	4689      	mov	r9, r1
 8000ac2:	4661      	mov	r1, ip
 8000ac4:	0c09      	lsrs	r1, r1, #16
 8000ac6:	4688      	mov	r8, r1
 8000ac8:	4372      	muls	r2, r6
 8000aca:	444a      	add	r2, r9
 8000acc:	4442      	add	r2, r8
 8000ace:	4375      	muls	r5, r6
 8000ad0:	4591      	cmp	r9, r2
 8000ad2:	d903      	bls.n	8000adc <__aeabi_dmul+0x23c>
 8000ad4:	2180      	movs	r1, #128	@ 0x80
 8000ad6:	0249      	lsls	r1, r1, #9
 8000ad8:	4688      	mov	r8, r1
 8000ada:	4445      	add	r5, r8
 8000adc:	0c11      	lsrs	r1, r2, #16
 8000ade:	4688      	mov	r8, r1
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	0409      	lsls	r1, r1, #16
 8000ae4:	0c09      	lsrs	r1, r1, #16
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	0412      	lsls	r2, r2, #16
 8000aea:	4462      	add	r2, ip
 8000aec:	18b9      	adds	r1, r7, r2
 8000aee:	9102      	str	r1, [sp, #8]
 8000af0:	4651      	mov	r1, sl
 8000af2:	0c09      	lsrs	r1, r1, #16
 8000af4:	468c      	mov	ip, r1
 8000af6:	4651      	mov	r1, sl
 8000af8:	040f      	lsls	r7, r1, #16
 8000afa:	0c3f      	lsrs	r7, r7, #16
 8000afc:	0039      	movs	r1, r7
 8000afe:	4341      	muls	r1, r0
 8000b00:	4445      	add	r5, r8
 8000b02:	4688      	mov	r8, r1
 8000b04:	4661      	mov	r1, ip
 8000b06:	4341      	muls	r1, r0
 8000b08:	468a      	mov	sl, r1
 8000b0a:	4641      	mov	r1, r8
 8000b0c:	4660      	mov	r0, ip
 8000b0e:	0c09      	lsrs	r1, r1, #16
 8000b10:	4689      	mov	r9, r1
 8000b12:	4358      	muls	r0, r3
 8000b14:	437b      	muls	r3, r7
 8000b16:	4453      	add	r3, sl
 8000b18:	444b      	add	r3, r9
 8000b1a:	459a      	cmp	sl, r3
 8000b1c:	d903      	bls.n	8000b26 <__aeabi_dmul+0x286>
 8000b1e:	2180      	movs	r1, #128	@ 0x80
 8000b20:	0249      	lsls	r1, r1, #9
 8000b22:	4689      	mov	r9, r1
 8000b24:	4448      	add	r0, r9
 8000b26:	0c19      	lsrs	r1, r3, #16
 8000b28:	4689      	mov	r9, r1
 8000b2a:	4641      	mov	r1, r8
 8000b2c:	0409      	lsls	r1, r1, #16
 8000b2e:	0c09      	lsrs	r1, r1, #16
 8000b30:	4688      	mov	r8, r1
 8000b32:	0039      	movs	r1, r7
 8000b34:	4361      	muls	r1, r4
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	4443      	add	r3, r8
 8000b3a:	4688      	mov	r8, r1
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	434c      	muls	r4, r1
 8000b40:	4371      	muls	r1, r6
 8000b42:	468c      	mov	ip, r1
 8000b44:	4641      	mov	r1, r8
 8000b46:	4377      	muls	r7, r6
 8000b48:	0c0e      	lsrs	r6, r1, #16
 8000b4a:	193f      	adds	r7, r7, r4
 8000b4c:	19f6      	adds	r6, r6, r7
 8000b4e:	4448      	add	r0, r9
 8000b50:	42b4      	cmp	r4, r6
 8000b52:	d903      	bls.n	8000b5c <__aeabi_dmul+0x2bc>
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0249      	lsls	r1, r1, #9
 8000b58:	4689      	mov	r9, r1
 8000b5a:	44cc      	add	ip, r9
 8000b5c:	9902      	ldr	r1, [sp, #8]
 8000b5e:	9f00      	ldr	r7, [sp, #0]
 8000b60:	4689      	mov	r9, r1
 8000b62:	0431      	lsls	r1, r6, #16
 8000b64:	444f      	add	r7, r9
 8000b66:	4689      	mov	r9, r1
 8000b68:	4641      	mov	r1, r8
 8000b6a:	4297      	cmp	r7, r2
 8000b6c:	4192      	sbcs	r2, r2
 8000b6e:	040c      	lsls	r4, r1, #16
 8000b70:	0c24      	lsrs	r4, r4, #16
 8000b72:	444c      	add	r4, r9
 8000b74:	18ff      	adds	r7, r7, r3
 8000b76:	4252      	negs	r2, r2
 8000b78:	1964      	adds	r4, r4, r5
 8000b7a:	18a1      	adds	r1, r4, r2
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	419b      	sbcs	r3, r3
 8000b80:	4688      	mov	r8, r1
 8000b82:	4682      	mov	sl, r0
 8000b84:	425b      	negs	r3, r3
 8000b86:	4699      	mov	r9, r3
 8000b88:	4590      	cmp	r8, r2
 8000b8a:	4192      	sbcs	r2, r2
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	41a4      	sbcs	r4, r4
 8000b90:	44c2      	add	sl, r8
 8000b92:	44d1      	add	r9, sl
 8000b94:	4252      	negs	r2, r2
 8000b96:	4264      	negs	r4, r4
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	4599      	cmp	r9, r3
 8000b9c:	419b      	sbcs	r3, r3
 8000b9e:	4582      	cmp	sl, r0
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	464a      	mov	r2, r9
 8000baa:	0c36      	lsrs	r6, r6, #16
 8000bac:	19a4      	adds	r4, r4, r6
 8000bae:	18e3      	adds	r3, r4, r3
 8000bb0:	4463      	add	r3, ip
 8000bb2:	025b      	lsls	r3, r3, #9
 8000bb4:	0dd2      	lsrs	r2, r2, #23
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	9901      	ldr	r1, [sp, #4]
 8000bba:	4692      	mov	sl, r2
 8000bbc:	027a      	lsls	r2, r7, #9
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	1e50      	subs	r0, r2, #1
 8000bc2:	4182      	sbcs	r2, r0
 8000bc4:	0dff      	lsrs	r7, r7, #23
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	464a      	mov	r2, r9
 8000bca:	0252      	lsls	r2, r2, #9
 8000bcc:	4317      	orrs	r7, r2
 8000bce:	46b8      	mov	r8, r7
 8000bd0:	01db      	lsls	r3, r3, #7
 8000bd2:	d500      	bpl.n	8000bd6 <__aeabi_dmul+0x336>
 8000bd4:	e6ed      	b.n	80009b2 <__aeabi_dmul+0x112>
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <__aeabi_dmul+0x36c>)
 8000bd8:	9a03      	ldr	r2, [sp, #12]
 8000bda:	445b      	add	r3, fp
 8000bdc:	4691      	mov	r9, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dc00      	bgt.n	8000be4 <__aeabi_dmul+0x344>
 8000be2:	e0ac      	b.n	8000d3e <__aeabi_dmul+0x49e>
 8000be4:	003a      	movs	r2, r7
 8000be6:	0752      	lsls	r2, r2, #29
 8000be8:	d100      	bne.n	8000bec <__aeabi_dmul+0x34c>
 8000bea:	e710      	b.n	8000a0e <__aeabi_dmul+0x16e>
 8000bec:	220f      	movs	r2, #15
 8000bee:	4658      	mov	r0, fp
 8000bf0:	403a      	ands	r2, r7
 8000bf2:	2a04      	cmp	r2, #4
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_dmul+0x358>
 8000bf6:	e6f9      	b.n	80009ec <__aeabi_dmul+0x14c>
 8000bf8:	e709      	b.n	8000a0e <__aeabi_dmul+0x16e>
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	000007ff 	.word	0x000007ff
 8000c00:	fffffc01 	.word	0xfffffc01
 8000c04:	feffffff 	.word	0xfeffffff
 8000c08:	000007fe 	.word	0x000007fe
 8000c0c:	000003ff 	.word	0x000003ff
 8000c10:	0022      	movs	r2, r4
 8000c12:	4332      	orrs	r2, r6
 8000c14:	d06f      	beq.n	8000cf6 <__aeabi_dmul+0x456>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dmul+0x37c>
 8000c1a:	e0c2      	b.n	8000da2 <__aeabi_dmul+0x502>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f000 fdfb 	bl	8001818 <__clzsi2>
 8000c22:	0002      	movs	r2, r0
 8000c24:	0003      	movs	r3, r0
 8000c26:	3a0b      	subs	r2, #11
 8000c28:	201d      	movs	r0, #29
 8000c2a:	1a82      	subs	r2, r0, r2
 8000c2c:	0030      	movs	r0, r6
 8000c2e:	0019      	movs	r1, r3
 8000c30:	40d0      	lsrs	r0, r2
 8000c32:	3908      	subs	r1, #8
 8000c34:	408c      	lsls	r4, r1
 8000c36:	0002      	movs	r2, r0
 8000c38:	4322      	orrs	r2, r4
 8000c3a:	0034      	movs	r4, r6
 8000c3c:	408c      	lsls	r4, r1
 8000c3e:	4659      	mov	r1, fp
 8000c40:	1acb      	subs	r3, r1, r3
 8000c42:	4986      	ldr	r1, [pc, #536]	@ (8000e5c <__aeabi_dmul+0x5bc>)
 8000c44:	468b      	mov	fp, r1
 8000c46:	449b      	add	fp, r3
 8000c48:	2d0a      	cmp	r5, #10
 8000c4a:	dd00      	ble.n	8000c4e <__aeabi_dmul+0x3ae>
 8000c4c:	e6a4      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000c4e:	4649      	mov	r1, r9
 8000c50:	9b00      	ldr	r3, [sp, #0]
 8000c52:	9401      	str	r4, [sp, #4]
 8000c54:	4059      	eors	r1, r3
 8000c56:	b2cb      	uxtb	r3, r1
 8000c58:	0014      	movs	r4, r2
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	9303      	str	r3, [sp, #12]
 8000c5e:	2d02      	cmp	r5, #2
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_dmul+0x3c4>
 8000c62:	e667      	b.n	8000934 <__aeabi_dmul+0x94>
 8000c64:	e6fb      	b.n	8000a5e <__aeabi_dmul+0x1be>
 8000c66:	4653      	mov	r3, sl
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	d03c      	beq.n	8000ce8 <__aeabi_dmul+0x448>
 8000c6e:	4653      	mov	r3, sl
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dmul+0x3d6>
 8000c74:	e0a3      	b.n	8000dbe <__aeabi_dmul+0x51e>
 8000c76:	4650      	mov	r0, sl
 8000c78:	f000 fdce 	bl	8001818 <__clzsi2>
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	425b      	negs	r3, r3
 8000c80:	469c      	mov	ip, r3
 8000c82:	0002      	movs	r2, r0
 8000c84:	4484      	add	ip, r0
 8000c86:	0011      	movs	r1, r2
 8000c88:	4650      	mov	r0, sl
 8000c8a:	3908      	subs	r1, #8
 8000c8c:	4088      	lsls	r0, r1
 8000c8e:	231d      	movs	r3, #29
 8000c90:	4680      	mov	r8, r0
 8000c92:	4660      	mov	r0, ip
 8000c94:	1a1b      	subs	r3, r3, r0
 8000c96:	0020      	movs	r0, r4
 8000c98:	40d8      	lsrs	r0, r3
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	0023      	movs	r3, r4
 8000ca4:	408b      	lsls	r3, r1
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8000e5c <__aeabi_dmul+0x5bc>)
 8000caa:	2500      	movs	r5, #0
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	469b      	mov	fp, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	e61a      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000cb6:	2d0f      	cmp	r5, #15
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_dmul+0x41c>
 8000cba:	e0c9      	b.n	8000e50 <__aeabi_dmul+0x5b0>
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	4652      	mov	r2, sl
 8000cc0:	031b      	lsls	r3, r3, #12
 8000cc2:	421a      	tst	r2, r3
 8000cc4:	d002      	beq.n	8000ccc <__aeabi_dmul+0x42c>
 8000cc6:	421c      	tst	r4, r3
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dmul+0x42c>
 8000cca:	e092      	b.n	8000df2 <__aeabi_dmul+0x552>
 8000ccc:	2480      	movs	r4, #128	@ 0x80
 8000cce:	4653      	mov	r3, sl
 8000cd0:	0324      	lsls	r4, r4, #12
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	0324      	lsls	r4, r4, #12
 8000cd6:	4642      	mov	r2, r8
 8000cd8:	0b24      	lsrs	r4, r4, #12
 8000cda:	e63e      	b.n	800095a <__aeabi_dmul+0xba>
 8000cdc:	469b      	mov	fp, r3
 8000cde:	2303      	movs	r3, #3
 8000ce0:	4680      	mov	r8, r0
 8000ce2:	250c      	movs	r5, #12
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	e601      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	469a      	mov	sl, r3
 8000cec:	469b      	mov	fp, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2504      	movs	r5, #4
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	e5fa      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430d      	orrs	r5, r1
 8000cfa:	2d0a      	cmp	r5, #10
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_dmul+0x460>
 8000cfe:	e64b      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000d00:	4649      	mov	r1, r9
 8000d02:	9800      	ldr	r0, [sp, #0]
 8000d04:	4041      	eors	r1, r0
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	9103      	str	r1, [sp, #12]
 8000d0a:	2d02      	cmp	r5, #2
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_dmul+0x470>
 8000d0e:	e096      	b.n	8000e3e <__aeabi_dmul+0x59e>
 8000d10:	2300      	movs	r3, #0
 8000d12:	2400      	movs	r4, #0
 8000d14:	2001      	movs	r0, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	e60c      	b.n	8000934 <__aeabi_dmul+0x94>
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	9a00      	ldr	r2, [sp, #0]
 8000d20:	432b      	orrs	r3, r5
 8000d22:	4051      	eors	r1, r2
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	9203      	str	r2, [sp, #12]
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	dd00      	ble.n	8000d2e <__aeabi_dmul+0x48e>
 8000d2c:	e634      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d157      	bne.n	8000de2 <__aeabi_dmul+0x542>
 8000d32:	9b03      	ldr	r3, [sp, #12]
 8000d34:	4699      	mov	r9, r3
 8000d36:	2400      	movs	r4, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4b49      	ldr	r3, [pc, #292]	@ (8000e60 <__aeabi_dmul+0x5c0>)
 8000d3c:	e60e      	b.n	800095c <__aeabi_dmul+0xbc>
 8000d3e:	4658      	mov	r0, fp
 8000d40:	2101      	movs	r1, #1
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	2938      	cmp	r1, #56	@ 0x38
 8000d46:	dd00      	ble.n	8000d4a <__aeabi_dmul+0x4aa>
 8000d48:	e62f      	b.n	80009aa <__aeabi_dmul+0x10a>
 8000d4a:	291f      	cmp	r1, #31
 8000d4c:	dd56      	ble.n	8000dfc <__aeabi_dmul+0x55c>
 8000d4e:	221f      	movs	r2, #31
 8000d50:	4654      	mov	r4, sl
 8000d52:	4252      	negs	r2, r2
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2920      	cmp	r1, #32
 8000d5a:	d007      	beq.n	8000d6c <__aeabi_dmul+0x4cc>
 8000d5c:	4b41      	ldr	r3, [pc, #260]	@ (8000e64 <__aeabi_dmul+0x5c4>)
 8000d5e:	4642      	mov	r2, r8
 8000d60:	469c      	mov	ip, r3
 8000d62:	4653      	mov	r3, sl
 8000d64:	4460      	add	r0, ip
 8000d66:	4083      	lsls	r3, r0
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	4690      	mov	r8, r2
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	2107      	movs	r1, #7
 8000d70:	1e53      	subs	r3, r2, #1
 8000d72:	419a      	sbcs	r2, r3
 8000d74:	000b      	movs	r3, r1
 8000d76:	4322      	orrs	r2, r4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	4211      	tst	r1, r2
 8000d7e:	d009      	beq.n	8000d94 <__aeabi_dmul+0x4f4>
 8000d80:	230f      	movs	r3, #15
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d05d      	beq.n	8000e44 <__aeabi_dmul+0x5a4>
 8000d88:	1d11      	adds	r1, r2, #4
 8000d8a:	4291      	cmp	r1, r2
 8000d8c:	419b      	sbcs	r3, r3
 8000d8e:	000a      	movs	r2, r1
 8000d90:	425b      	negs	r3, r3
 8000d92:	075b      	lsls	r3, r3, #29
 8000d94:	08d2      	lsrs	r2, r2, #3
 8000d96:	431a      	orrs	r2, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e5df      	b.n	800095c <__aeabi_dmul+0xbc>
 8000d9c:	9b03      	ldr	r3, [sp, #12]
 8000d9e:	4699      	mov	r9, r3
 8000da0:	e5fa      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000da2:	9801      	ldr	r0, [sp, #4]
 8000da4:	f000 fd38 	bl	8001818 <__clzsi2>
 8000da8:	0002      	movs	r2, r0
 8000daa:	0003      	movs	r3, r0
 8000dac:	3215      	adds	r2, #21
 8000dae:	3320      	adds	r3, #32
 8000db0:	2a1c      	cmp	r2, #28
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_dmul+0x516>
 8000db4:	e738      	b.n	8000c28 <__aeabi_dmul+0x388>
 8000db6:	9a01      	ldr	r2, [sp, #4]
 8000db8:	3808      	subs	r0, #8
 8000dba:	4082      	lsls	r2, r0
 8000dbc:	e73f      	b.n	8000c3e <__aeabi_dmul+0x39e>
 8000dbe:	f000 fd2b 	bl	8001818 <__clzsi2>
 8000dc2:	2315      	movs	r3, #21
 8000dc4:	469c      	mov	ip, r3
 8000dc6:	4484      	add	ip, r0
 8000dc8:	0002      	movs	r2, r0
 8000dca:	4663      	mov	r3, ip
 8000dcc:	3220      	adds	r2, #32
 8000dce:	2b1c      	cmp	r3, #28
 8000dd0:	dc00      	bgt.n	8000dd4 <__aeabi_dmul+0x534>
 8000dd2:	e758      	b.n	8000c86 <__aeabi_dmul+0x3e6>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	0023      	movs	r3, r4
 8000dda:	3808      	subs	r0, #8
 8000ddc:	4083      	lsls	r3, r0
 8000dde:	469a      	mov	sl, r3
 8000de0:	e762      	b.n	8000ca8 <__aeabi_dmul+0x408>
 8000de2:	001d      	movs	r5, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	2400      	movs	r4, #0
 8000de8:	2002      	movs	r0, #2
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	e5a2      	b.n	8000934 <__aeabi_dmul+0x94>
 8000dee:	9002      	str	r0, [sp, #8]
 8000df0:	e632      	b.n	8000a58 <__aeabi_dmul+0x1b8>
 8000df2:	431c      	orrs	r4, r3
 8000df4:	9b00      	ldr	r3, [sp, #0]
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	4699      	mov	r9, r3
 8000dfa:	e5ae      	b.n	800095a <__aeabi_dmul+0xba>
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <__aeabi_dmul+0x5c8>)
 8000dfe:	4652      	mov	r2, sl
 8000e00:	18c3      	adds	r3, r0, r3
 8000e02:	4640      	mov	r0, r8
 8000e04:	409a      	lsls	r2, r3
 8000e06:	40c8      	lsrs	r0, r1
 8000e08:	4302      	orrs	r2, r0
 8000e0a:	4640      	mov	r0, r8
 8000e0c:	4098      	lsls	r0, r3
 8000e0e:	0003      	movs	r3, r0
 8000e10:	1e58      	subs	r0, r3, #1
 8000e12:	4183      	sbcs	r3, r0
 8000e14:	4654      	mov	r4, sl
 8000e16:	431a      	orrs	r2, r3
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	0753      	lsls	r3, r2, #29
 8000e1c:	d009      	beq.n	8000e32 <__aeabi_dmul+0x592>
 8000e1e:	230f      	movs	r3, #15
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d005      	beq.n	8000e32 <__aeabi_dmul+0x592>
 8000e26:	1d13      	adds	r3, r2, #4
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	4192      	sbcs	r2, r2
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	18a4      	adds	r4, r4, r2
 8000e30:	001a      	movs	r2, r3
 8000e32:	0223      	lsls	r3, r4, #8
 8000e34:	d508      	bpl.n	8000e48 <__aeabi_dmul+0x5a8>
 8000e36:	2301      	movs	r3, #1
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	e58e      	b.n	800095c <__aeabi_dmul+0xbc>
 8000e3e:	4689      	mov	r9, r1
 8000e40:	2400      	movs	r4, #0
 8000e42:	e58b      	b.n	800095c <__aeabi_dmul+0xbc>
 8000e44:	2300      	movs	r3, #0
 8000e46:	e7a5      	b.n	8000d94 <__aeabi_dmul+0x4f4>
 8000e48:	0763      	lsls	r3, r4, #29
 8000e4a:	0264      	lsls	r4, r4, #9
 8000e4c:	0b24      	lsrs	r4, r4, #12
 8000e4e:	e7a1      	b.n	8000d94 <__aeabi_dmul+0x4f4>
 8000e50:	9b00      	ldr	r3, [sp, #0]
 8000e52:	46a2      	mov	sl, r4
 8000e54:	4699      	mov	r9, r3
 8000e56:	9b01      	ldr	r3, [sp, #4]
 8000e58:	4698      	mov	r8, r3
 8000e5a:	e737      	b.n	8000ccc <__aeabi_dmul+0x42c>
 8000e5c:	fffffc0d 	.word	0xfffffc0d
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	0000043e 	.word	0x0000043e
 8000e68:	0000041e 	.word	0x0000041e

08000e6c <__aeabi_dsub>:
 8000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6e:	4657      	mov	r7, sl
 8000e70:	464e      	mov	r6, r9
 8000e72:	4645      	mov	r5, r8
 8000e74:	46de      	mov	lr, fp
 8000e76:	b5e0      	push	{r5, r6, r7, lr}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	9101      	str	r1, [sp, #4]
 8000e7e:	030c      	lsls	r4, r1, #12
 8000e80:	004d      	lsls	r5, r1, #1
 8000e82:	0fce      	lsrs	r6, r1, #31
 8000e84:	0a61      	lsrs	r1, r4, #9
 8000e86:	9c00      	ldr	r4, [sp, #0]
 8000e88:	005f      	lsls	r7, r3, #1
 8000e8a:	0f64      	lsrs	r4, r4, #29
 8000e8c:	430c      	orrs	r4, r1
 8000e8e:	9900      	ldr	r1, [sp, #0]
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	00c8      	lsls	r0, r1, #3
 8000e96:	0319      	lsls	r1, r3, #12
 8000e98:	0d7b      	lsrs	r3, r7, #21
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	9b01      	ldr	r3, [sp, #4]
 8000e9e:	4fcc      	ldr	r7, [pc, #816]	@ (80011d0 <__aeabi_dsub+0x364>)
 8000ea0:	0fdb      	lsrs	r3, r3, #31
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	0a4b      	lsrs	r3, r1, #9
 8000ea6:	9900      	ldr	r1, [sp, #0]
 8000ea8:	4680      	mov	r8, r0
 8000eaa:	0f49      	lsrs	r1, r1, #29
 8000eac:	4319      	orrs	r1, r3
 8000eae:	9b00      	ldr	r3, [sp, #0]
 8000eb0:	468b      	mov	fp, r1
 8000eb2:	00da      	lsls	r2, r3, #3
 8000eb4:	4692      	mov	sl, r2
 8000eb6:	0d6d      	lsrs	r5, r5, #21
 8000eb8:	45b9      	cmp	r9, r7
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dsub+0x52>
 8000ebc:	e0bf      	b.n	800103e <__aeabi_dsub+0x1d2>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	4059      	eors	r1, r3
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	1aeb      	subs	r3, r5, r3
 8000eca:	428e      	cmp	r6, r1
 8000ecc:	d075      	beq.n	8000fba <__aeabi_dsub+0x14e>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	dc00      	bgt.n	8000ed4 <__aeabi_dsub+0x68>
 8000ed2:	e2a3      	b.n	800141c <__aeabi_dsub+0x5b0>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dsub+0x70>
 8000eda:	e0ce      	b.n	800107a <__aeabi_dsub+0x20e>
 8000edc:	42bd      	cmp	r5, r7
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dsub+0x76>
 8000ee0:	e200      	b.n	80012e4 <__aeabi_dsub+0x478>
 8000ee2:	2701      	movs	r7, #1
 8000ee4:	2b38      	cmp	r3, #56	@ 0x38
 8000ee6:	dc19      	bgt.n	8000f1c <__aeabi_dsub+0xb0>
 8000ee8:	2780      	movs	r7, #128	@ 0x80
 8000eea:	4659      	mov	r1, fp
 8000eec:	043f      	lsls	r7, r7, #16
 8000eee:	4339      	orrs	r1, r7
 8000ef0:	468b      	mov	fp, r1
 8000ef2:	2b1f      	cmp	r3, #31
 8000ef4:	dd00      	ble.n	8000ef8 <__aeabi_dsub+0x8c>
 8000ef6:	e1fa      	b.n	80012ee <__aeabi_dsub+0x482>
 8000ef8:	2720      	movs	r7, #32
 8000efa:	1af9      	subs	r1, r7, r3
 8000efc:	468c      	mov	ip, r1
 8000efe:	4659      	mov	r1, fp
 8000f00:	4667      	mov	r7, ip
 8000f02:	40b9      	lsls	r1, r7
 8000f04:	000f      	movs	r7, r1
 8000f06:	0011      	movs	r1, r2
 8000f08:	40d9      	lsrs	r1, r3
 8000f0a:	430f      	orrs	r7, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	408a      	lsls	r2, r1
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	418a      	sbcs	r2, r1
 8000f14:	4659      	mov	r1, fp
 8000f16:	40d9      	lsrs	r1, r3
 8000f18:	4317      	orrs	r7, r2
 8000f1a:	1a64      	subs	r4, r4, r1
 8000f1c:	1bc7      	subs	r7, r0, r7
 8000f1e:	42b8      	cmp	r0, r7
 8000f20:	4180      	sbcs	r0, r0
 8000f22:	4240      	negs	r0, r0
 8000f24:	1a24      	subs	r4, r4, r0
 8000f26:	0223      	lsls	r3, r4, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_dsub+0xc0>
 8000f2a:	e140      	b.n	80011ae <__aeabi_dsub+0x342>
 8000f2c:	0264      	lsls	r4, r4, #9
 8000f2e:	0a64      	lsrs	r4, r4, #9
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dsub+0xca>
 8000f34:	e154      	b.n	80011e0 <__aeabi_dsub+0x374>
 8000f36:	0020      	movs	r0, r4
 8000f38:	f000 fc6e 	bl	8001818 <__clzsi2>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	3b08      	subs	r3, #8
 8000f40:	2120      	movs	r1, #32
 8000f42:	0038      	movs	r0, r7
 8000f44:	1aca      	subs	r2, r1, r3
 8000f46:	40d0      	lsrs	r0, r2
 8000f48:	409c      	lsls	r4, r3
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	409f      	lsls	r7, r3
 8000f4e:	4322      	orrs	r2, r4
 8000f50:	429d      	cmp	r5, r3
 8000f52:	dd00      	ble.n	8000f56 <__aeabi_dsub+0xea>
 8000f54:	e1a6      	b.n	80012a4 <__aeabi_dsub+0x438>
 8000f56:	1b58      	subs	r0, r3, r5
 8000f58:	3001      	adds	r0, #1
 8000f5a:	1a09      	subs	r1, r1, r0
 8000f5c:	003c      	movs	r4, r7
 8000f5e:	408f      	lsls	r7, r1
 8000f60:	40c4      	lsrs	r4, r0
 8000f62:	1e7b      	subs	r3, r7, #1
 8000f64:	419f      	sbcs	r7, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	408b      	lsls	r3, r1
 8000f6a:	4327      	orrs	r7, r4
 8000f6c:	431f      	orrs	r7, r3
 8000f6e:	40c2      	lsrs	r2, r0
 8000f70:	003b      	movs	r3, r7
 8000f72:	0014      	movs	r4, r2
 8000f74:	2500      	movs	r5, #0
 8000f76:	4313      	orrs	r3, r2
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dsub+0x110>
 8000f7a:	e1f7      	b.n	800136c <__aeabi_dsub+0x500>
 8000f7c:	077b      	lsls	r3, r7, #29
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dsub+0x116>
 8000f80:	e377      	b.n	8001672 <__aeabi_dsub+0x806>
 8000f82:	230f      	movs	r3, #15
 8000f84:	0038      	movs	r0, r7
 8000f86:	403b      	ands	r3, r7
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d004      	beq.n	8000f96 <__aeabi_dsub+0x12a>
 8000f8c:	1d38      	adds	r0, r7, #4
 8000f8e:	42b8      	cmp	r0, r7
 8000f90:	41bf      	sbcs	r7, r7
 8000f92:	427f      	negs	r7, r7
 8000f94:	19e4      	adds	r4, r4, r7
 8000f96:	0223      	lsls	r3, r4, #8
 8000f98:	d400      	bmi.n	8000f9c <__aeabi_dsub+0x130>
 8000f9a:	e368      	b.n	800166e <__aeabi_dsub+0x802>
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80011d0 <__aeabi_dsub+0x364>)
 8000f9e:	3501      	adds	r5, #1
 8000fa0:	429d      	cmp	r5, r3
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dsub+0x13a>
 8000fa4:	e0f4      	b.n	8001190 <__aeabi_dsub+0x324>
 8000fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80011d4 <__aeabi_dsub+0x368>)
 8000fa8:	056d      	lsls	r5, r5, #21
 8000faa:	401c      	ands	r4, r3
 8000fac:	0d6d      	lsrs	r5, r5, #21
 8000fae:	0767      	lsls	r7, r4, #29
 8000fb0:	08c0      	lsrs	r0, r0, #3
 8000fb2:	0264      	lsls	r4, r4, #9
 8000fb4:	4307      	orrs	r7, r0
 8000fb6:	0b24      	lsrs	r4, r4, #12
 8000fb8:	e0ec      	b.n	8001194 <__aeabi_dsub+0x328>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dc00      	bgt.n	8000fc0 <__aeabi_dsub+0x154>
 8000fbe:	e329      	b.n	8001614 <__aeabi_dsub+0x7a8>
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	2900      	cmp	r1, #0
 8000fc4:	d000      	beq.n	8000fc8 <__aeabi_dsub+0x15c>
 8000fc6:	e0d6      	b.n	8001176 <__aeabi_dsub+0x30a>
 8000fc8:	4659      	mov	r1, fp
 8000fca:	4311      	orrs	r1, r2
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dsub+0x164>
 8000fce:	e12e      	b.n	800122e <__aeabi_dsub+0x3c2>
 8000fd0:	1e59      	subs	r1, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dsub+0x16c>
 8000fd6:	e1e6      	b.n	80013a6 <__aeabi_dsub+0x53a>
 8000fd8:	42bb      	cmp	r3, r7
 8000fda:	d100      	bne.n	8000fde <__aeabi_dsub+0x172>
 8000fdc:	e182      	b.n	80012e4 <__aeabi_dsub+0x478>
 8000fde:	2701      	movs	r7, #1
 8000fe0:	000b      	movs	r3, r1
 8000fe2:	2938      	cmp	r1, #56	@ 0x38
 8000fe4:	dc14      	bgt.n	8001010 <__aeabi_dsub+0x1a4>
 8000fe6:	2b1f      	cmp	r3, #31
 8000fe8:	dd00      	ble.n	8000fec <__aeabi_dsub+0x180>
 8000fea:	e23c      	b.n	8001466 <__aeabi_dsub+0x5fa>
 8000fec:	2720      	movs	r7, #32
 8000fee:	1af9      	subs	r1, r7, r3
 8000ff0:	468c      	mov	ip, r1
 8000ff2:	4659      	mov	r1, fp
 8000ff4:	4667      	mov	r7, ip
 8000ff6:	40b9      	lsls	r1, r7
 8000ff8:	000f      	movs	r7, r1
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	430f      	orrs	r7, r1
 8001000:	4661      	mov	r1, ip
 8001002:	408a      	lsls	r2, r1
 8001004:	1e51      	subs	r1, r2, #1
 8001006:	418a      	sbcs	r2, r1
 8001008:	4659      	mov	r1, fp
 800100a:	40d9      	lsrs	r1, r3
 800100c:	4317      	orrs	r7, r2
 800100e:	1864      	adds	r4, r4, r1
 8001010:	183f      	adds	r7, r7, r0
 8001012:	4287      	cmp	r7, r0
 8001014:	4180      	sbcs	r0, r0
 8001016:	4240      	negs	r0, r0
 8001018:	1824      	adds	r4, r4, r0
 800101a:	0223      	lsls	r3, r4, #8
 800101c:	d400      	bmi.n	8001020 <__aeabi_dsub+0x1b4>
 800101e:	e0c6      	b.n	80011ae <__aeabi_dsub+0x342>
 8001020:	4b6b      	ldr	r3, [pc, #428]	@ (80011d0 <__aeabi_dsub+0x364>)
 8001022:	3501      	adds	r5, #1
 8001024:	429d      	cmp	r5, r3
 8001026:	d100      	bne.n	800102a <__aeabi_dsub+0x1be>
 8001028:	e0b2      	b.n	8001190 <__aeabi_dsub+0x324>
 800102a:	2101      	movs	r1, #1
 800102c:	4b69      	ldr	r3, [pc, #420]	@ (80011d4 <__aeabi_dsub+0x368>)
 800102e:	087a      	lsrs	r2, r7, #1
 8001030:	401c      	ands	r4, r3
 8001032:	4039      	ands	r1, r7
 8001034:	430a      	orrs	r2, r1
 8001036:	07e7      	lsls	r7, r4, #31
 8001038:	4317      	orrs	r7, r2
 800103a:	0864      	lsrs	r4, r4, #1
 800103c:	e79e      	b.n	8000f7c <__aeabi_dsub+0x110>
 800103e:	4b66      	ldr	r3, [pc, #408]	@ (80011d8 <__aeabi_dsub+0x36c>)
 8001040:	4311      	orrs	r1, r2
 8001042:	468a      	mov	sl, r1
 8001044:	18eb      	adds	r3, r5, r3
 8001046:	2900      	cmp	r1, #0
 8001048:	d028      	beq.n	800109c <__aeabi_dsub+0x230>
 800104a:	4566      	cmp	r6, ip
 800104c:	d02c      	beq.n	80010a8 <__aeabi_dsub+0x23c>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d05b      	beq.n	800110a <__aeabi_dsub+0x29e>
 8001052:	2d00      	cmp	r5, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dsub+0x1ec>
 8001056:	e12c      	b.n	80012b2 <__aeabi_dsub+0x446>
 8001058:	465b      	mov	r3, fp
 800105a:	4666      	mov	r6, ip
 800105c:	075f      	lsls	r7, r3, #29
 800105e:	08d2      	lsrs	r2, r2, #3
 8001060:	4317      	orrs	r7, r2
 8001062:	08dd      	lsrs	r5, r3, #3
 8001064:	003b      	movs	r3, r7
 8001066:	432b      	orrs	r3, r5
 8001068:	d100      	bne.n	800106c <__aeabi_dsub+0x200>
 800106a:	e0e2      	b.n	8001232 <__aeabi_dsub+0x3c6>
 800106c:	2480      	movs	r4, #128	@ 0x80
 800106e:	0324      	lsls	r4, r4, #12
 8001070:	432c      	orrs	r4, r5
 8001072:	0324      	lsls	r4, r4, #12
 8001074:	4d56      	ldr	r5, [pc, #344]	@ (80011d0 <__aeabi_dsub+0x364>)
 8001076:	0b24      	lsrs	r4, r4, #12
 8001078:	e08c      	b.n	8001194 <__aeabi_dsub+0x328>
 800107a:	4659      	mov	r1, fp
 800107c:	4311      	orrs	r1, r2
 800107e:	d100      	bne.n	8001082 <__aeabi_dsub+0x216>
 8001080:	e0d5      	b.n	800122e <__aeabi_dsub+0x3c2>
 8001082:	1e59      	subs	r1, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d100      	bne.n	800108a <__aeabi_dsub+0x21e>
 8001088:	e1b9      	b.n	80013fe <__aeabi_dsub+0x592>
 800108a:	42bb      	cmp	r3, r7
 800108c:	d100      	bne.n	8001090 <__aeabi_dsub+0x224>
 800108e:	e1b1      	b.n	80013f4 <__aeabi_dsub+0x588>
 8001090:	2701      	movs	r7, #1
 8001092:	000b      	movs	r3, r1
 8001094:	2938      	cmp	r1, #56	@ 0x38
 8001096:	dd00      	ble.n	800109a <__aeabi_dsub+0x22e>
 8001098:	e740      	b.n	8000f1c <__aeabi_dsub+0xb0>
 800109a:	e72a      	b.n	8000ef2 <__aeabi_dsub+0x86>
 800109c:	4661      	mov	r1, ip
 800109e:	2701      	movs	r7, #1
 80010a0:	4079      	eors	r1, r7
 80010a2:	468c      	mov	ip, r1
 80010a4:	4566      	cmp	r6, ip
 80010a6:	d1d2      	bne.n	800104e <__aeabi_dsub+0x1e2>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dsub+0x242>
 80010ac:	e0c5      	b.n	800123a <__aeabi_dsub+0x3ce>
 80010ae:	2d00      	cmp	r5, #0
 80010b0:	d000      	beq.n	80010b4 <__aeabi_dsub+0x248>
 80010b2:	e155      	b.n	8001360 <__aeabi_dsub+0x4f4>
 80010b4:	464b      	mov	r3, r9
 80010b6:	0025      	movs	r5, r4
 80010b8:	4305      	orrs	r5, r0
 80010ba:	d100      	bne.n	80010be <__aeabi_dsub+0x252>
 80010bc:	e212      	b.n	80014e4 <__aeabi_dsub+0x678>
 80010be:	1e59      	subs	r1, r3, #1
 80010c0:	468c      	mov	ip, r1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x25c>
 80010c6:	e249      	b.n	800155c <__aeabi_dsub+0x6f0>
 80010c8:	4d41      	ldr	r5, [pc, #260]	@ (80011d0 <__aeabi_dsub+0x364>)
 80010ca:	42ab      	cmp	r3, r5
 80010cc:	d100      	bne.n	80010d0 <__aeabi_dsub+0x264>
 80010ce:	e28f      	b.n	80015f0 <__aeabi_dsub+0x784>
 80010d0:	2701      	movs	r7, #1
 80010d2:	2938      	cmp	r1, #56	@ 0x38
 80010d4:	dc11      	bgt.n	80010fa <__aeabi_dsub+0x28e>
 80010d6:	4663      	mov	r3, ip
 80010d8:	2b1f      	cmp	r3, #31
 80010da:	dd00      	ble.n	80010de <__aeabi_dsub+0x272>
 80010dc:	e25b      	b.n	8001596 <__aeabi_dsub+0x72a>
 80010de:	4661      	mov	r1, ip
 80010e0:	2320      	movs	r3, #32
 80010e2:	0027      	movs	r7, r4
 80010e4:	1a5b      	subs	r3, r3, r1
 80010e6:	0005      	movs	r5, r0
 80010e8:	4098      	lsls	r0, r3
 80010ea:	409f      	lsls	r7, r3
 80010ec:	40cd      	lsrs	r5, r1
 80010ee:	1e43      	subs	r3, r0, #1
 80010f0:	4198      	sbcs	r0, r3
 80010f2:	40cc      	lsrs	r4, r1
 80010f4:	432f      	orrs	r7, r5
 80010f6:	4307      	orrs	r7, r0
 80010f8:	44a3      	add	fp, r4
 80010fa:	18bf      	adds	r7, r7, r2
 80010fc:	4297      	cmp	r7, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	445a      	add	r2, fp
 8001104:	0014      	movs	r4, r2
 8001106:	464d      	mov	r5, r9
 8001108:	e787      	b.n	800101a <__aeabi_dsub+0x1ae>
 800110a:	4f34      	ldr	r7, [pc, #208]	@ (80011dc <__aeabi_dsub+0x370>)
 800110c:	1c6b      	adds	r3, r5, #1
 800110e:	423b      	tst	r3, r7
 8001110:	d000      	beq.n	8001114 <__aeabi_dsub+0x2a8>
 8001112:	e0b6      	b.n	8001282 <__aeabi_dsub+0x416>
 8001114:	4659      	mov	r1, fp
 8001116:	0023      	movs	r3, r4
 8001118:	4311      	orrs	r1, r2
 800111a:	000f      	movs	r7, r1
 800111c:	4303      	orrs	r3, r0
 800111e:	2d00      	cmp	r5, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_dsub+0x2b8>
 8001122:	e126      	b.n	8001372 <__aeabi_dsub+0x506>
 8001124:	2b00      	cmp	r3, #0
 8001126:	d100      	bne.n	800112a <__aeabi_dsub+0x2be>
 8001128:	e1c0      	b.n	80014ac <__aeabi_dsub+0x640>
 800112a:	2900      	cmp	r1, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_dsub+0x2c4>
 800112e:	e0a1      	b.n	8001274 <__aeabi_dsub+0x408>
 8001130:	1a83      	subs	r3, r0, r2
 8001132:	4698      	mov	r8, r3
 8001134:	465b      	mov	r3, fp
 8001136:	4540      	cmp	r0, r8
 8001138:	41ad      	sbcs	r5, r5
 800113a:	1ae3      	subs	r3, r4, r3
 800113c:	426d      	negs	r5, r5
 800113e:	1b5b      	subs	r3, r3, r5
 8001140:	2580      	movs	r5, #128	@ 0x80
 8001142:	042d      	lsls	r5, r5, #16
 8001144:	422b      	tst	r3, r5
 8001146:	d100      	bne.n	800114a <__aeabi_dsub+0x2de>
 8001148:	e14b      	b.n	80013e2 <__aeabi_dsub+0x576>
 800114a:	465b      	mov	r3, fp
 800114c:	1a10      	subs	r0, r2, r0
 800114e:	4282      	cmp	r2, r0
 8001150:	4192      	sbcs	r2, r2
 8001152:	1b1c      	subs	r4, r3, r4
 8001154:	0007      	movs	r7, r0
 8001156:	2601      	movs	r6, #1
 8001158:	4663      	mov	r3, ip
 800115a:	4252      	negs	r2, r2
 800115c:	1aa4      	subs	r4, r4, r2
 800115e:	4327      	orrs	r7, r4
 8001160:	401e      	ands	r6, r3
 8001162:	2f00      	cmp	r7, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dsub+0x2fc>
 8001166:	e142      	b.n	80013ee <__aeabi_dsub+0x582>
 8001168:	422c      	tst	r4, r5
 800116a:	d100      	bne.n	800116e <__aeabi_dsub+0x302>
 800116c:	e26d      	b.n	800164a <__aeabi_dsub+0x7de>
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <__aeabi_dsub+0x368>)
 8001170:	2501      	movs	r5, #1
 8001172:	401c      	ands	r4, r3
 8001174:	e71b      	b.n	8000fae <__aeabi_dsub+0x142>
 8001176:	42bd      	cmp	r5, r7
 8001178:	d100      	bne.n	800117c <__aeabi_dsub+0x310>
 800117a:	e13b      	b.n	80013f4 <__aeabi_dsub+0x588>
 800117c:	2701      	movs	r7, #1
 800117e:	2b38      	cmp	r3, #56	@ 0x38
 8001180:	dd00      	ble.n	8001184 <__aeabi_dsub+0x318>
 8001182:	e745      	b.n	8001010 <__aeabi_dsub+0x1a4>
 8001184:	2780      	movs	r7, #128	@ 0x80
 8001186:	4659      	mov	r1, fp
 8001188:	043f      	lsls	r7, r7, #16
 800118a:	4339      	orrs	r1, r7
 800118c:	468b      	mov	fp, r1
 800118e:	e72a      	b.n	8000fe6 <__aeabi_dsub+0x17a>
 8001190:	2400      	movs	r4, #0
 8001192:	2700      	movs	r7, #0
 8001194:	052d      	lsls	r5, r5, #20
 8001196:	4325      	orrs	r5, r4
 8001198:	07f6      	lsls	r6, r6, #31
 800119a:	4335      	orrs	r5, r6
 800119c:	0038      	movs	r0, r7
 800119e:	0029      	movs	r1, r5
 80011a0:	b003      	add	sp, #12
 80011a2:	bcf0      	pop	{r4, r5, r6, r7}
 80011a4:	46bb      	mov	fp, r7
 80011a6:	46b2      	mov	sl, r6
 80011a8:	46a9      	mov	r9, r5
 80011aa:	46a0      	mov	r8, r4
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ae:	077b      	lsls	r3, r7, #29
 80011b0:	d004      	beq.n	80011bc <__aeabi_dsub+0x350>
 80011b2:	230f      	movs	r3, #15
 80011b4:	403b      	ands	r3, r7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d000      	beq.n	80011bc <__aeabi_dsub+0x350>
 80011ba:	e6e7      	b.n	8000f8c <__aeabi_dsub+0x120>
 80011bc:	002b      	movs	r3, r5
 80011be:	08f8      	lsrs	r0, r7, #3
 80011c0:	4a03      	ldr	r2, [pc, #12]	@ (80011d0 <__aeabi_dsub+0x364>)
 80011c2:	0767      	lsls	r7, r4, #29
 80011c4:	4307      	orrs	r7, r0
 80011c6:	08e5      	lsrs	r5, r4, #3
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_dsub+0x362>
 80011cc:	e74a      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80011ce:	e0a5      	b.n	800131c <__aeabi_dsub+0x4b0>
 80011d0:	000007ff 	.word	0x000007ff
 80011d4:	ff7fffff 	.word	0xff7fffff
 80011d8:	fffff801 	.word	0xfffff801
 80011dc:	000007fe 	.word	0x000007fe
 80011e0:	0038      	movs	r0, r7
 80011e2:	f000 fb19 	bl	8001818 <__clzsi2>
 80011e6:	0003      	movs	r3, r0
 80011e8:	3318      	adds	r3, #24
 80011ea:	2b1f      	cmp	r3, #31
 80011ec:	dc00      	bgt.n	80011f0 <__aeabi_dsub+0x384>
 80011ee:	e6a7      	b.n	8000f40 <__aeabi_dsub+0xd4>
 80011f0:	003a      	movs	r2, r7
 80011f2:	3808      	subs	r0, #8
 80011f4:	4082      	lsls	r2, r0
 80011f6:	429d      	cmp	r5, r3
 80011f8:	dd00      	ble.n	80011fc <__aeabi_dsub+0x390>
 80011fa:	e08a      	b.n	8001312 <__aeabi_dsub+0x4a6>
 80011fc:	1b5b      	subs	r3, r3, r5
 80011fe:	1c58      	adds	r0, r3, #1
 8001200:	281f      	cmp	r0, #31
 8001202:	dc00      	bgt.n	8001206 <__aeabi_dsub+0x39a>
 8001204:	e1d8      	b.n	80015b8 <__aeabi_dsub+0x74c>
 8001206:	0017      	movs	r7, r2
 8001208:	3b1f      	subs	r3, #31
 800120a:	40df      	lsrs	r7, r3
 800120c:	2820      	cmp	r0, #32
 800120e:	d005      	beq.n	800121c <__aeabi_dsub+0x3b0>
 8001210:	2340      	movs	r3, #64	@ 0x40
 8001212:	1a1b      	subs	r3, r3, r0
 8001214:	409a      	lsls	r2, r3
 8001216:	1e53      	subs	r3, r2, #1
 8001218:	419a      	sbcs	r2, r3
 800121a:	4317      	orrs	r7, r2
 800121c:	2500      	movs	r5, #0
 800121e:	2f00      	cmp	r7, #0
 8001220:	d100      	bne.n	8001224 <__aeabi_dsub+0x3b8>
 8001222:	e0e5      	b.n	80013f0 <__aeabi_dsub+0x584>
 8001224:	077b      	lsls	r3, r7, #29
 8001226:	d000      	beq.n	800122a <__aeabi_dsub+0x3be>
 8001228:	e6ab      	b.n	8000f82 <__aeabi_dsub+0x116>
 800122a:	002c      	movs	r4, r5
 800122c:	e7c6      	b.n	80011bc <__aeabi_dsub+0x350>
 800122e:	08c0      	lsrs	r0, r0, #3
 8001230:	e7c6      	b.n	80011c0 <__aeabi_dsub+0x354>
 8001232:	2700      	movs	r7, #0
 8001234:	2400      	movs	r4, #0
 8001236:	4dd1      	ldr	r5, [pc, #836]	@ (800157c <__aeabi_dsub+0x710>)
 8001238:	e7ac      	b.n	8001194 <__aeabi_dsub+0x328>
 800123a:	4fd1      	ldr	r7, [pc, #836]	@ (8001580 <__aeabi_dsub+0x714>)
 800123c:	1c6b      	adds	r3, r5, #1
 800123e:	423b      	tst	r3, r7
 8001240:	d171      	bne.n	8001326 <__aeabi_dsub+0x4ba>
 8001242:	0023      	movs	r3, r4
 8001244:	4303      	orrs	r3, r0
 8001246:	2d00      	cmp	r5, #0
 8001248:	d000      	beq.n	800124c <__aeabi_dsub+0x3e0>
 800124a:	e14e      	b.n	80014ea <__aeabi_dsub+0x67e>
 800124c:	4657      	mov	r7, sl
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x3e8>
 8001252:	e1b5      	b.n	80015c0 <__aeabi_dsub+0x754>
 8001254:	2f00      	cmp	r7, #0
 8001256:	d00d      	beq.n	8001274 <__aeabi_dsub+0x408>
 8001258:	1883      	adds	r3, r0, r2
 800125a:	4283      	cmp	r3, r0
 800125c:	4180      	sbcs	r0, r0
 800125e:	445c      	add	r4, fp
 8001260:	4240      	negs	r0, r0
 8001262:	1824      	adds	r4, r4, r0
 8001264:	0222      	lsls	r2, r4, #8
 8001266:	d500      	bpl.n	800126a <__aeabi_dsub+0x3fe>
 8001268:	e1c8      	b.n	80015fc <__aeabi_dsub+0x790>
 800126a:	001f      	movs	r7, r3
 800126c:	4698      	mov	r8, r3
 800126e:	4327      	orrs	r7, r4
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x408>
 8001272:	e0bc      	b.n	80013ee <__aeabi_dsub+0x582>
 8001274:	4643      	mov	r3, r8
 8001276:	0767      	lsls	r7, r4, #29
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	431f      	orrs	r7, r3
 800127c:	08e5      	lsrs	r5, r4, #3
 800127e:	2300      	movs	r3, #0
 8001280:	e04c      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001282:	1a83      	subs	r3, r0, r2
 8001284:	4698      	mov	r8, r3
 8001286:	465b      	mov	r3, fp
 8001288:	4540      	cmp	r0, r8
 800128a:	41bf      	sbcs	r7, r7
 800128c:	1ae3      	subs	r3, r4, r3
 800128e:	427f      	negs	r7, r7
 8001290:	1bdb      	subs	r3, r3, r7
 8001292:	021f      	lsls	r7, r3, #8
 8001294:	d47c      	bmi.n	8001390 <__aeabi_dsub+0x524>
 8001296:	4647      	mov	r7, r8
 8001298:	431f      	orrs	r7, r3
 800129a:	d100      	bne.n	800129e <__aeabi_dsub+0x432>
 800129c:	e0a6      	b.n	80013ec <__aeabi_dsub+0x580>
 800129e:	001c      	movs	r4, r3
 80012a0:	4647      	mov	r7, r8
 80012a2:	e645      	b.n	8000f30 <__aeabi_dsub+0xc4>
 80012a4:	4cb7      	ldr	r4, [pc, #732]	@ (8001584 <__aeabi_dsub+0x718>)
 80012a6:	1aed      	subs	r5, r5, r3
 80012a8:	4014      	ands	r4, r2
 80012aa:	077b      	lsls	r3, r7, #29
 80012ac:	d000      	beq.n	80012b0 <__aeabi_dsub+0x444>
 80012ae:	e780      	b.n	80011b2 <__aeabi_dsub+0x346>
 80012b0:	e784      	b.n	80011bc <__aeabi_dsub+0x350>
 80012b2:	464b      	mov	r3, r9
 80012b4:	0025      	movs	r5, r4
 80012b6:	4305      	orrs	r5, r0
 80012b8:	d066      	beq.n	8001388 <__aeabi_dsub+0x51c>
 80012ba:	1e5f      	subs	r7, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d100      	bne.n	80012c2 <__aeabi_dsub+0x456>
 80012c0:	e0fc      	b.n	80014bc <__aeabi_dsub+0x650>
 80012c2:	4dae      	ldr	r5, [pc, #696]	@ (800157c <__aeabi_dsub+0x710>)
 80012c4:	42ab      	cmp	r3, r5
 80012c6:	d100      	bne.n	80012ca <__aeabi_dsub+0x45e>
 80012c8:	e15e      	b.n	8001588 <__aeabi_dsub+0x71c>
 80012ca:	4666      	mov	r6, ip
 80012cc:	2f38      	cmp	r7, #56	@ 0x38
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_dsub+0x466>
 80012d0:	e0b4      	b.n	800143c <__aeabi_dsub+0x5d0>
 80012d2:	2001      	movs	r0, #1
 80012d4:	1a17      	subs	r7, r2, r0
 80012d6:	42ba      	cmp	r2, r7
 80012d8:	4192      	sbcs	r2, r2
 80012da:	465b      	mov	r3, fp
 80012dc:	4252      	negs	r2, r2
 80012de:	464d      	mov	r5, r9
 80012e0:	1a9c      	subs	r4, r3, r2
 80012e2:	e620      	b.n	8000f26 <__aeabi_dsub+0xba>
 80012e4:	0767      	lsls	r7, r4, #29
 80012e6:	08c0      	lsrs	r0, r0, #3
 80012e8:	4307      	orrs	r7, r0
 80012ea:	08e5      	lsrs	r5, r4, #3
 80012ec:	e6ba      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80012ee:	001f      	movs	r7, r3
 80012f0:	4659      	mov	r1, fp
 80012f2:	3f20      	subs	r7, #32
 80012f4:	40f9      	lsrs	r1, r7
 80012f6:	000f      	movs	r7, r1
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d005      	beq.n	8001308 <__aeabi_dsub+0x49c>
 80012fc:	2140      	movs	r1, #64	@ 0x40
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	4659      	mov	r1, fp
 8001302:	4099      	lsls	r1, r3
 8001304:	430a      	orrs	r2, r1
 8001306:	4692      	mov	sl, r2
 8001308:	4653      	mov	r3, sl
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	4193      	sbcs	r3, r2
 800130e:	431f      	orrs	r7, r3
 8001310:	e604      	b.n	8000f1c <__aeabi_dsub+0xb0>
 8001312:	1aeb      	subs	r3, r5, r3
 8001314:	4d9b      	ldr	r5, [pc, #620]	@ (8001584 <__aeabi_dsub+0x718>)
 8001316:	4015      	ands	r5, r2
 8001318:	076f      	lsls	r7, r5, #29
 800131a:	08ed      	lsrs	r5, r5, #3
 800131c:	032c      	lsls	r4, r5, #12
 800131e:	055d      	lsls	r5, r3, #21
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	0d6d      	lsrs	r5, r5, #21
 8001324:	e736      	b.n	8001194 <__aeabi_dsub+0x328>
 8001326:	4d95      	ldr	r5, [pc, #596]	@ (800157c <__aeabi_dsub+0x710>)
 8001328:	42ab      	cmp	r3, r5
 800132a:	d100      	bne.n	800132e <__aeabi_dsub+0x4c2>
 800132c:	e0d6      	b.n	80014dc <__aeabi_dsub+0x670>
 800132e:	1882      	adds	r2, r0, r2
 8001330:	0021      	movs	r1, r4
 8001332:	4282      	cmp	r2, r0
 8001334:	4180      	sbcs	r0, r0
 8001336:	4459      	add	r1, fp
 8001338:	4240      	negs	r0, r0
 800133a:	1808      	adds	r0, r1, r0
 800133c:	07c7      	lsls	r7, r0, #31
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	4317      	orrs	r7, r2
 8001342:	0844      	lsrs	r4, r0, #1
 8001344:	0752      	lsls	r2, r2, #29
 8001346:	d400      	bmi.n	800134a <__aeabi_dsub+0x4de>
 8001348:	e185      	b.n	8001656 <__aeabi_dsub+0x7ea>
 800134a:	220f      	movs	r2, #15
 800134c:	001d      	movs	r5, r3
 800134e:	403a      	ands	r2, r7
 8001350:	2a04      	cmp	r2, #4
 8001352:	d000      	beq.n	8001356 <__aeabi_dsub+0x4ea>
 8001354:	e61a      	b.n	8000f8c <__aeabi_dsub+0x120>
 8001356:	08ff      	lsrs	r7, r7, #3
 8001358:	0764      	lsls	r4, r4, #29
 800135a:	4327      	orrs	r7, r4
 800135c:	0905      	lsrs	r5, r0, #4
 800135e:	e7dd      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001360:	465b      	mov	r3, fp
 8001362:	08d2      	lsrs	r2, r2, #3
 8001364:	075f      	lsls	r7, r3, #29
 8001366:	4317      	orrs	r7, r2
 8001368:	08dd      	lsrs	r5, r3, #3
 800136a:	e67b      	b.n	8001064 <__aeabi_dsub+0x1f8>
 800136c:	2700      	movs	r7, #0
 800136e:	2400      	movs	r4, #0
 8001370:	e710      	b.n	8001194 <__aeabi_dsub+0x328>
 8001372:	2b00      	cmp	r3, #0
 8001374:	d000      	beq.n	8001378 <__aeabi_dsub+0x50c>
 8001376:	e0d6      	b.n	8001526 <__aeabi_dsub+0x6ba>
 8001378:	2900      	cmp	r1, #0
 800137a:	d000      	beq.n	800137e <__aeabi_dsub+0x512>
 800137c:	e12f      	b.n	80015de <__aeabi_dsub+0x772>
 800137e:	2480      	movs	r4, #128	@ 0x80
 8001380:	2600      	movs	r6, #0
 8001382:	4d7e      	ldr	r5, [pc, #504]	@ (800157c <__aeabi_dsub+0x710>)
 8001384:	0324      	lsls	r4, r4, #12
 8001386:	e705      	b.n	8001194 <__aeabi_dsub+0x328>
 8001388:	4666      	mov	r6, ip
 800138a:	465c      	mov	r4, fp
 800138c:	08d0      	lsrs	r0, r2, #3
 800138e:	e717      	b.n	80011c0 <__aeabi_dsub+0x354>
 8001390:	465b      	mov	r3, fp
 8001392:	1a17      	subs	r7, r2, r0
 8001394:	42ba      	cmp	r2, r7
 8001396:	4192      	sbcs	r2, r2
 8001398:	1b1c      	subs	r4, r3, r4
 800139a:	2601      	movs	r6, #1
 800139c:	4663      	mov	r3, ip
 800139e:	4252      	negs	r2, r2
 80013a0:	1aa4      	subs	r4, r4, r2
 80013a2:	401e      	ands	r6, r3
 80013a4:	e5c4      	b.n	8000f30 <__aeabi_dsub+0xc4>
 80013a6:	1883      	adds	r3, r0, r2
 80013a8:	4283      	cmp	r3, r0
 80013aa:	4180      	sbcs	r0, r0
 80013ac:	445c      	add	r4, fp
 80013ae:	4240      	negs	r0, r0
 80013b0:	1825      	adds	r5, r4, r0
 80013b2:	022a      	lsls	r2, r5, #8
 80013b4:	d400      	bmi.n	80013b8 <__aeabi_dsub+0x54c>
 80013b6:	e0da      	b.n	800156e <__aeabi_dsub+0x702>
 80013b8:	4a72      	ldr	r2, [pc, #456]	@ (8001584 <__aeabi_dsub+0x718>)
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	4015      	ands	r5, r2
 80013be:	07ea      	lsls	r2, r5, #31
 80013c0:	431a      	orrs	r2, r3
 80013c2:	0869      	lsrs	r1, r5, #1
 80013c4:	075b      	lsls	r3, r3, #29
 80013c6:	d400      	bmi.n	80013ca <__aeabi_dsub+0x55e>
 80013c8:	e14a      	b.n	8001660 <__aeabi_dsub+0x7f4>
 80013ca:	230f      	movs	r3, #15
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dsub+0x568>
 80013d2:	e0fc      	b.n	80015ce <__aeabi_dsub+0x762>
 80013d4:	1d17      	adds	r7, r2, #4
 80013d6:	4297      	cmp	r7, r2
 80013d8:	41a4      	sbcs	r4, r4
 80013da:	4264      	negs	r4, r4
 80013dc:	2502      	movs	r5, #2
 80013de:	1864      	adds	r4, r4, r1
 80013e0:	e6ec      	b.n	80011bc <__aeabi_dsub+0x350>
 80013e2:	4647      	mov	r7, r8
 80013e4:	001c      	movs	r4, r3
 80013e6:	431f      	orrs	r7, r3
 80013e8:	d000      	beq.n	80013ec <__aeabi_dsub+0x580>
 80013ea:	e743      	b.n	8001274 <__aeabi_dsub+0x408>
 80013ec:	2600      	movs	r6, #0
 80013ee:	2500      	movs	r5, #0
 80013f0:	2400      	movs	r4, #0
 80013f2:	e6cf      	b.n	8001194 <__aeabi_dsub+0x328>
 80013f4:	08c0      	lsrs	r0, r0, #3
 80013f6:	0767      	lsls	r7, r4, #29
 80013f8:	4307      	orrs	r7, r0
 80013fa:	08e5      	lsrs	r5, r4, #3
 80013fc:	e632      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80013fe:	1a87      	subs	r7, r0, r2
 8001400:	465b      	mov	r3, fp
 8001402:	42b8      	cmp	r0, r7
 8001404:	4180      	sbcs	r0, r0
 8001406:	1ae4      	subs	r4, r4, r3
 8001408:	4240      	negs	r0, r0
 800140a:	1a24      	subs	r4, r4, r0
 800140c:	0223      	lsls	r3, r4, #8
 800140e:	d428      	bmi.n	8001462 <__aeabi_dsub+0x5f6>
 8001410:	0763      	lsls	r3, r4, #29
 8001412:	08ff      	lsrs	r7, r7, #3
 8001414:	431f      	orrs	r7, r3
 8001416:	08e5      	lsrs	r5, r4, #3
 8001418:	2301      	movs	r3, #1
 800141a:	e77f      	b.n	800131c <__aeabi_dsub+0x4b0>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x5b6>
 8001420:	e673      	b.n	800110a <__aeabi_dsub+0x29e>
 8001422:	464b      	mov	r3, r9
 8001424:	1b5f      	subs	r7, r3, r5
 8001426:	003b      	movs	r3, r7
 8001428:	2d00      	cmp	r5, #0
 800142a:	d100      	bne.n	800142e <__aeabi_dsub+0x5c2>
 800142c:	e742      	b.n	80012b4 <__aeabi_dsub+0x448>
 800142e:	2f38      	cmp	r7, #56	@ 0x38
 8001430:	dd00      	ble.n	8001434 <__aeabi_dsub+0x5c8>
 8001432:	e0ec      	b.n	800160e <__aeabi_dsub+0x7a2>
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	000e      	movs	r6, r1
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	431c      	orrs	r4, r3
 800143c:	2f1f      	cmp	r7, #31
 800143e:	dc25      	bgt.n	800148c <__aeabi_dsub+0x620>
 8001440:	2520      	movs	r5, #32
 8001442:	0023      	movs	r3, r4
 8001444:	1bed      	subs	r5, r5, r7
 8001446:	0001      	movs	r1, r0
 8001448:	40a8      	lsls	r0, r5
 800144a:	40ab      	lsls	r3, r5
 800144c:	40f9      	lsrs	r1, r7
 800144e:	1e45      	subs	r5, r0, #1
 8001450:	41a8      	sbcs	r0, r5
 8001452:	430b      	orrs	r3, r1
 8001454:	40fc      	lsrs	r4, r7
 8001456:	4318      	orrs	r0, r3
 8001458:	465b      	mov	r3, fp
 800145a:	1b1b      	subs	r3, r3, r4
 800145c:	469b      	mov	fp, r3
 800145e:	e739      	b.n	80012d4 <__aeabi_dsub+0x468>
 8001460:	4666      	mov	r6, ip
 8001462:	2501      	movs	r5, #1
 8001464:	e562      	b.n	8000f2c <__aeabi_dsub+0xc0>
 8001466:	001f      	movs	r7, r3
 8001468:	4659      	mov	r1, fp
 800146a:	3f20      	subs	r7, #32
 800146c:	40f9      	lsrs	r1, r7
 800146e:	468c      	mov	ip, r1
 8001470:	2b20      	cmp	r3, #32
 8001472:	d005      	beq.n	8001480 <__aeabi_dsub+0x614>
 8001474:	2740      	movs	r7, #64	@ 0x40
 8001476:	4659      	mov	r1, fp
 8001478:	1afb      	subs	r3, r7, r3
 800147a:	4099      	lsls	r1, r3
 800147c:	430a      	orrs	r2, r1
 800147e:	4692      	mov	sl, r2
 8001480:	4657      	mov	r7, sl
 8001482:	1e7b      	subs	r3, r7, #1
 8001484:	419f      	sbcs	r7, r3
 8001486:	4663      	mov	r3, ip
 8001488:	431f      	orrs	r7, r3
 800148a:	e5c1      	b.n	8001010 <__aeabi_dsub+0x1a4>
 800148c:	003b      	movs	r3, r7
 800148e:	0025      	movs	r5, r4
 8001490:	3b20      	subs	r3, #32
 8001492:	40dd      	lsrs	r5, r3
 8001494:	2f20      	cmp	r7, #32
 8001496:	d004      	beq.n	80014a2 <__aeabi_dsub+0x636>
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	1bdb      	subs	r3, r3, r7
 800149c:	409c      	lsls	r4, r3
 800149e:	4320      	orrs	r0, r4
 80014a0:	4680      	mov	r8, r0
 80014a2:	4640      	mov	r0, r8
 80014a4:	1e43      	subs	r3, r0, #1
 80014a6:	4198      	sbcs	r0, r3
 80014a8:	4328      	orrs	r0, r5
 80014aa:	e713      	b.n	80012d4 <__aeabi_dsub+0x468>
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d09d      	beq.n	80013ec <__aeabi_dsub+0x580>
 80014b0:	2601      	movs	r6, #1
 80014b2:	4663      	mov	r3, ip
 80014b4:	465c      	mov	r4, fp
 80014b6:	4690      	mov	r8, r2
 80014b8:	401e      	ands	r6, r3
 80014ba:	e6db      	b.n	8001274 <__aeabi_dsub+0x408>
 80014bc:	1a17      	subs	r7, r2, r0
 80014be:	465b      	mov	r3, fp
 80014c0:	42ba      	cmp	r2, r7
 80014c2:	4192      	sbcs	r2, r2
 80014c4:	1b1c      	subs	r4, r3, r4
 80014c6:	4252      	negs	r2, r2
 80014c8:	1aa4      	subs	r4, r4, r2
 80014ca:	0223      	lsls	r3, r4, #8
 80014cc:	d4c8      	bmi.n	8001460 <__aeabi_dsub+0x5f4>
 80014ce:	0763      	lsls	r3, r4, #29
 80014d0:	08ff      	lsrs	r7, r7, #3
 80014d2:	431f      	orrs	r7, r3
 80014d4:	4666      	mov	r6, ip
 80014d6:	2301      	movs	r3, #1
 80014d8:	08e5      	lsrs	r5, r4, #3
 80014da:	e71f      	b.n	800131c <__aeabi_dsub+0x4b0>
 80014dc:	001d      	movs	r5, r3
 80014de:	2400      	movs	r4, #0
 80014e0:	2700      	movs	r7, #0
 80014e2:	e657      	b.n	8001194 <__aeabi_dsub+0x328>
 80014e4:	465c      	mov	r4, fp
 80014e6:	08d0      	lsrs	r0, r2, #3
 80014e8:	e66a      	b.n	80011c0 <__aeabi_dsub+0x354>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dsub+0x684>
 80014ee:	e737      	b.n	8001360 <__aeabi_dsub+0x4f4>
 80014f0:	4653      	mov	r3, sl
 80014f2:	08c0      	lsrs	r0, r0, #3
 80014f4:	0767      	lsls	r7, r4, #29
 80014f6:	4307      	orrs	r7, r0
 80014f8:	08e5      	lsrs	r5, r4, #3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x694>
 80014fe:	e5b1      	b.n	8001064 <__aeabi_dsub+0x1f8>
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	031b      	lsls	r3, r3, #12
 8001504:	421d      	tst	r5, r3
 8001506:	d008      	beq.n	800151a <__aeabi_dsub+0x6ae>
 8001508:	4659      	mov	r1, fp
 800150a:	08c8      	lsrs	r0, r1, #3
 800150c:	4218      	tst	r0, r3
 800150e:	d104      	bne.n	800151a <__aeabi_dsub+0x6ae>
 8001510:	08d2      	lsrs	r2, r2, #3
 8001512:	0749      	lsls	r1, r1, #29
 8001514:	430a      	orrs	r2, r1
 8001516:	0017      	movs	r7, r2
 8001518:	0005      	movs	r5, r0
 800151a:	0f7b      	lsrs	r3, r7, #29
 800151c:	00ff      	lsls	r7, r7, #3
 800151e:	08ff      	lsrs	r7, r7, #3
 8001520:	075b      	lsls	r3, r3, #29
 8001522:	431f      	orrs	r7, r3
 8001524:	e59e      	b.n	8001064 <__aeabi_dsub+0x1f8>
 8001526:	08c0      	lsrs	r0, r0, #3
 8001528:	0763      	lsls	r3, r4, #29
 800152a:	4318      	orrs	r0, r3
 800152c:	08e5      	lsrs	r5, r4, #3
 800152e:	2900      	cmp	r1, #0
 8001530:	d053      	beq.n	80015da <__aeabi_dsub+0x76e>
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	031b      	lsls	r3, r3, #12
 8001536:	421d      	tst	r5, r3
 8001538:	d00a      	beq.n	8001550 <__aeabi_dsub+0x6e4>
 800153a:	4659      	mov	r1, fp
 800153c:	08cc      	lsrs	r4, r1, #3
 800153e:	421c      	tst	r4, r3
 8001540:	d106      	bne.n	8001550 <__aeabi_dsub+0x6e4>
 8001542:	2601      	movs	r6, #1
 8001544:	4663      	mov	r3, ip
 8001546:	0025      	movs	r5, r4
 8001548:	08d0      	lsrs	r0, r2, #3
 800154a:	0749      	lsls	r1, r1, #29
 800154c:	4308      	orrs	r0, r1
 800154e:	401e      	ands	r6, r3
 8001550:	0f47      	lsrs	r7, r0, #29
 8001552:	00c0      	lsls	r0, r0, #3
 8001554:	08c0      	lsrs	r0, r0, #3
 8001556:	077f      	lsls	r7, r7, #29
 8001558:	4307      	orrs	r7, r0
 800155a:	e583      	b.n	8001064 <__aeabi_dsub+0x1f8>
 800155c:	1883      	adds	r3, r0, r2
 800155e:	4293      	cmp	r3, r2
 8001560:	4192      	sbcs	r2, r2
 8001562:	445c      	add	r4, fp
 8001564:	4252      	negs	r2, r2
 8001566:	18a5      	adds	r5, r4, r2
 8001568:	022a      	lsls	r2, r5, #8
 800156a:	d500      	bpl.n	800156e <__aeabi_dsub+0x702>
 800156c:	e724      	b.n	80013b8 <__aeabi_dsub+0x54c>
 800156e:	076f      	lsls	r7, r5, #29
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	431f      	orrs	r7, r3
 8001574:	08ed      	lsrs	r5, r5, #3
 8001576:	2301      	movs	r3, #1
 8001578:	e6d0      	b.n	800131c <__aeabi_dsub+0x4b0>
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	000007ff 	.word	0x000007ff
 8001580:	000007fe 	.word	0x000007fe
 8001584:	ff7fffff 	.word	0xff7fffff
 8001588:	465b      	mov	r3, fp
 800158a:	08d2      	lsrs	r2, r2, #3
 800158c:	075f      	lsls	r7, r3, #29
 800158e:	4666      	mov	r6, ip
 8001590:	4317      	orrs	r7, r2
 8001592:	08dd      	lsrs	r5, r3, #3
 8001594:	e566      	b.n	8001064 <__aeabi_dsub+0x1f8>
 8001596:	0025      	movs	r5, r4
 8001598:	3b20      	subs	r3, #32
 800159a:	40dd      	lsrs	r5, r3
 800159c:	4663      	mov	r3, ip
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d005      	beq.n	80015ae <__aeabi_dsub+0x742>
 80015a2:	2340      	movs	r3, #64	@ 0x40
 80015a4:	4661      	mov	r1, ip
 80015a6:	1a5b      	subs	r3, r3, r1
 80015a8:	409c      	lsls	r4, r3
 80015aa:	4320      	orrs	r0, r4
 80015ac:	4680      	mov	r8, r0
 80015ae:	4647      	mov	r7, r8
 80015b0:	1e7b      	subs	r3, r7, #1
 80015b2:	419f      	sbcs	r7, r3
 80015b4:	432f      	orrs	r7, r5
 80015b6:	e5a0      	b.n	80010fa <__aeabi_dsub+0x28e>
 80015b8:	2120      	movs	r1, #32
 80015ba:	2700      	movs	r7, #0
 80015bc:	1a09      	subs	r1, r1, r0
 80015be:	e4d2      	b.n	8000f66 <__aeabi_dsub+0xfa>
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dsub+0x75a>
 80015c4:	e713      	b.n	80013ee <__aeabi_dsub+0x582>
 80015c6:	465c      	mov	r4, fp
 80015c8:	0017      	movs	r7, r2
 80015ca:	2500      	movs	r5, #0
 80015cc:	e5f6      	b.n	80011bc <__aeabi_dsub+0x350>
 80015ce:	08d7      	lsrs	r7, r2, #3
 80015d0:	0749      	lsls	r1, r1, #29
 80015d2:	2302      	movs	r3, #2
 80015d4:	430f      	orrs	r7, r1
 80015d6:	092d      	lsrs	r5, r5, #4
 80015d8:	e6a0      	b.n	800131c <__aeabi_dsub+0x4b0>
 80015da:	0007      	movs	r7, r0
 80015dc:	e542      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80015de:	465b      	mov	r3, fp
 80015e0:	2601      	movs	r6, #1
 80015e2:	075f      	lsls	r7, r3, #29
 80015e4:	08dd      	lsrs	r5, r3, #3
 80015e6:	4663      	mov	r3, ip
 80015e8:	08d2      	lsrs	r2, r2, #3
 80015ea:	4317      	orrs	r7, r2
 80015ec:	401e      	ands	r6, r3
 80015ee:	e539      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80015f0:	465b      	mov	r3, fp
 80015f2:	08d2      	lsrs	r2, r2, #3
 80015f4:	075f      	lsls	r7, r3, #29
 80015f6:	4317      	orrs	r7, r2
 80015f8:	08dd      	lsrs	r5, r3, #3
 80015fa:	e533      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80015fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001678 <__aeabi_dsub+0x80c>)
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	4022      	ands	r2, r4
 8001602:	0757      	lsls	r7, r2, #29
 8001604:	0252      	lsls	r2, r2, #9
 8001606:	2501      	movs	r5, #1
 8001608:	431f      	orrs	r7, r3
 800160a:	0b14      	lsrs	r4, r2, #12
 800160c:	e5c2      	b.n	8001194 <__aeabi_dsub+0x328>
 800160e:	000e      	movs	r6, r1
 8001610:	2001      	movs	r0, #1
 8001612:	e65f      	b.n	80012d4 <__aeabi_dsub+0x468>
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <__aeabi_dsub+0x7c8>
 8001618:	464b      	mov	r3, r9
 800161a:	1b5b      	subs	r3, r3, r5
 800161c:	469c      	mov	ip, r3
 800161e:	2d00      	cmp	r5, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_dsub+0x7b8>
 8001622:	e548      	b.n	80010b6 <__aeabi_dsub+0x24a>
 8001624:	2701      	movs	r7, #1
 8001626:	2b38      	cmp	r3, #56	@ 0x38
 8001628:	dd00      	ble.n	800162c <__aeabi_dsub+0x7c0>
 800162a:	e566      	b.n	80010fa <__aeabi_dsub+0x28e>
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	431c      	orrs	r4, r3
 8001632:	e550      	b.n	80010d6 <__aeabi_dsub+0x26a>
 8001634:	1c6b      	adds	r3, r5, #1
 8001636:	4d11      	ldr	r5, [pc, #68]	@ (800167c <__aeabi_dsub+0x810>)
 8001638:	422b      	tst	r3, r5
 800163a:	d000      	beq.n	800163e <__aeabi_dsub+0x7d2>
 800163c:	e673      	b.n	8001326 <__aeabi_dsub+0x4ba>
 800163e:	4659      	mov	r1, fp
 8001640:	0023      	movs	r3, r4
 8001642:	4311      	orrs	r1, r2
 8001644:	468a      	mov	sl, r1
 8001646:	4303      	orrs	r3, r0
 8001648:	e600      	b.n	800124c <__aeabi_dsub+0x3e0>
 800164a:	0767      	lsls	r7, r4, #29
 800164c:	08c0      	lsrs	r0, r0, #3
 800164e:	2300      	movs	r3, #0
 8001650:	4307      	orrs	r7, r0
 8001652:	08e5      	lsrs	r5, r4, #3
 8001654:	e662      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001656:	0764      	lsls	r4, r4, #29
 8001658:	08ff      	lsrs	r7, r7, #3
 800165a:	4327      	orrs	r7, r4
 800165c:	0905      	lsrs	r5, r0, #4
 800165e:	e65d      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001660:	08d2      	lsrs	r2, r2, #3
 8001662:	0749      	lsls	r1, r1, #29
 8001664:	4311      	orrs	r1, r2
 8001666:	000f      	movs	r7, r1
 8001668:	2302      	movs	r3, #2
 800166a:	092d      	lsrs	r5, r5, #4
 800166c:	e656      	b.n	800131c <__aeabi_dsub+0x4b0>
 800166e:	0007      	movs	r7, r0
 8001670:	e5a4      	b.n	80011bc <__aeabi_dsub+0x350>
 8001672:	0038      	movs	r0, r7
 8001674:	e48f      	b.n	8000f96 <__aeabi_dsub+0x12a>
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	ff7fffff 	.word	0xff7fffff
 800167c:	000007fe 	.word	0x000007fe

08001680 <__aeabi_d2iz>:
 8001680:	000b      	movs	r3, r1
 8001682:	0002      	movs	r2, r0
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	4d16      	ldr	r5, [pc, #88]	@ (80016e0 <__aeabi_d2iz+0x60>)
 8001688:	030c      	lsls	r4, r1, #12
 800168a:	b082      	sub	sp, #8
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	2000      	movs	r0, #0
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	0d49      	lsrs	r1, r1, #21
 8001698:	0fde      	lsrs	r6, r3, #31
 800169a:	42a9      	cmp	r1, r5
 800169c:	dd04      	ble.n	80016a8 <__aeabi_d2iz+0x28>
 800169e:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <__aeabi_d2iz+0x64>)
 80016a0:	4281      	cmp	r1, r0
 80016a2:	dd03      	ble.n	80016ac <__aeabi_d2iz+0x2c>
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <__aeabi_d2iz+0x68>)
 80016a6:	18f0      	adds	r0, r6, r3
 80016a8:	b002      	add	sp, #8
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	2080      	movs	r0, #128	@ 0x80
 80016ae:	0340      	lsls	r0, r0, #13
 80016b0:	4320      	orrs	r0, r4
 80016b2:	4c0e      	ldr	r4, [pc, #56]	@ (80016ec <__aeabi_d2iz+0x6c>)
 80016b4:	1a64      	subs	r4, r4, r1
 80016b6:	2c1f      	cmp	r4, #31
 80016b8:	dd08      	ble.n	80016cc <__aeabi_d2iz+0x4c>
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <__aeabi_d2iz+0x70>)
 80016bc:	1a5b      	subs	r3, r3, r1
 80016be:	40d8      	lsrs	r0, r3
 80016c0:	0003      	movs	r3, r0
 80016c2:	4258      	negs	r0, r3
 80016c4:	2e00      	cmp	r6, #0
 80016c6:	d1ef      	bne.n	80016a8 <__aeabi_d2iz+0x28>
 80016c8:	0018      	movs	r0, r3
 80016ca:	e7ed      	b.n	80016a8 <__aeabi_d2iz+0x28>
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <__aeabi_d2iz+0x74>)
 80016ce:	9a00      	ldr	r2, [sp, #0]
 80016d0:	469c      	mov	ip, r3
 80016d2:	0003      	movs	r3, r0
 80016d4:	4461      	add	r1, ip
 80016d6:	408b      	lsls	r3, r1
 80016d8:	40e2      	lsrs	r2, r4
 80016da:	4313      	orrs	r3, r2
 80016dc:	e7f1      	b.n	80016c2 <__aeabi_d2iz+0x42>
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	000003fe 	.word	0x000003fe
 80016e4:	0000041d 	.word	0x0000041d
 80016e8:	7fffffff 	.word	0x7fffffff
 80016ec:	00000433 	.word	0x00000433
 80016f0:	00000413 	.word	0x00000413
 80016f4:	fffffbed 	.word	0xfffffbed

080016f8 <__aeabi_i2d>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d016      	beq.n	800172c <__aeabi_i2d+0x34>
 80016fe:	17c3      	asrs	r3, r0, #31
 8001700:	18c5      	adds	r5, r0, r3
 8001702:	405d      	eors	r5, r3
 8001704:	0fc4      	lsrs	r4, r0, #31
 8001706:	0028      	movs	r0, r5
 8001708:	f000 f886 	bl	8001818 <__clzsi2>
 800170c:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <__aeabi_i2d+0x58>)
 800170e:	1a1b      	subs	r3, r3, r0
 8001710:	055b      	lsls	r3, r3, #21
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	280a      	cmp	r0, #10
 8001716:	dc14      	bgt.n	8001742 <__aeabi_i2d+0x4a>
 8001718:	0002      	movs	r2, r0
 800171a:	002e      	movs	r6, r5
 800171c:	3215      	adds	r2, #21
 800171e:	4096      	lsls	r6, r2
 8001720:	220b      	movs	r2, #11
 8001722:	1a12      	subs	r2, r2, r0
 8001724:	40d5      	lsrs	r5, r2
 8001726:	032d      	lsls	r5, r5, #12
 8001728:	0b2d      	lsrs	r5, r5, #12
 800172a:	e003      	b.n	8001734 <__aeabi_i2d+0x3c>
 800172c:	2400      	movs	r4, #0
 800172e:	2300      	movs	r3, #0
 8001730:	2500      	movs	r5, #0
 8001732:	2600      	movs	r6, #0
 8001734:	051b      	lsls	r3, r3, #20
 8001736:	432b      	orrs	r3, r5
 8001738:	07e4      	lsls	r4, r4, #31
 800173a:	4323      	orrs	r3, r4
 800173c:	0030      	movs	r0, r6
 800173e:	0019      	movs	r1, r3
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	380b      	subs	r0, #11
 8001744:	4085      	lsls	r5, r0
 8001746:	032d      	lsls	r5, r5, #12
 8001748:	2600      	movs	r6, #0
 800174a:	0b2d      	lsrs	r5, r5, #12
 800174c:	e7f2      	b.n	8001734 <__aeabi_i2d+0x3c>
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	0000041e 	.word	0x0000041e

08001754 <__aeabi_ui2d>:
 8001754:	b510      	push	{r4, lr}
 8001756:	1e04      	subs	r4, r0, #0
 8001758:	d010      	beq.n	800177c <__aeabi_ui2d+0x28>
 800175a:	f000 f85d 	bl	8001818 <__clzsi2>
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <__aeabi_ui2d+0x44>)
 8001760:	1a1b      	subs	r3, r3, r0
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	0d5b      	lsrs	r3, r3, #21
 8001766:	280a      	cmp	r0, #10
 8001768:	dc0f      	bgt.n	800178a <__aeabi_ui2d+0x36>
 800176a:	220b      	movs	r2, #11
 800176c:	0021      	movs	r1, r4
 800176e:	1a12      	subs	r2, r2, r0
 8001770:	40d1      	lsrs	r1, r2
 8001772:	3015      	adds	r0, #21
 8001774:	030a      	lsls	r2, r1, #12
 8001776:	4084      	lsls	r4, r0
 8001778:	0b12      	lsrs	r2, r2, #12
 800177a:	e001      	b.n	8001780 <__aeabi_ui2d+0x2c>
 800177c:	2300      	movs	r3, #0
 800177e:	2200      	movs	r2, #0
 8001780:	051b      	lsls	r3, r3, #20
 8001782:	4313      	orrs	r3, r2
 8001784:	0020      	movs	r0, r4
 8001786:	0019      	movs	r1, r3
 8001788:	bd10      	pop	{r4, pc}
 800178a:	0022      	movs	r2, r4
 800178c:	380b      	subs	r0, #11
 800178e:	4082      	lsls	r2, r0
 8001790:	0312      	lsls	r2, r2, #12
 8001792:	2400      	movs	r4, #0
 8001794:	0b12      	lsrs	r2, r2, #12
 8001796:	e7f3      	b.n	8001780 <__aeabi_ui2d+0x2c>
 8001798:	0000041e 	.word	0x0000041e

0800179c <__aeabi_cdrcmple>:
 800179c:	4684      	mov	ip, r0
 800179e:	0010      	movs	r0, r2
 80017a0:	4662      	mov	r2, ip
 80017a2:	468c      	mov	ip, r1
 80017a4:	0019      	movs	r1, r3
 80017a6:	4663      	mov	r3, ip
 80017a8:	e000      	b.n	80017ac <__aeabi_cdcmpeq>
 80017aa:	46c0      	nop			@ (mov r8, r8)

080017ac <__aeabi_cdcmpeq>:
 80017ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017ae:	f000 f905 	bl	80019bc <__ledf2>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d401      	bmi.n	80017ba <__aeabi_cdcmpeq+0xe>
 80017b6:	2100      	movs	r1, #0
 80017b8:	42c8      	cmn	r0, r1
 80017ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080017bc <__aeabi_dcmpeq>:
 80017bc:	b510      	push	{r4, lr}
 80017be:	f000 f849 	bl	8001854 <__eqdf2>
 80017c2:	4240      	negs	r0, r0
 80017c4:	3001      	adds	r0, #1
 80017c6:	bd10      	pop	{r4, pc}

080017c8 <__aeabi_dcmplt>:
 80017c8:	b510      	push	{r4, lr}
 80017ca:	f000 f8f7 	bl	80019bc <__ledf2>
 80017ce:	2800      	cmp	r0, #0
 80017d0:	db01      	blt.n	80017d6 <__aeabi_dcmplt+0xe>
 80017d2:	2000      	movs	r0, #0
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	2001      	movs	r0, #1
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)

080017dc <__aeabi_dcmple>:
 80017dc:	b510      	push	{r4, lr}
 80017de:	f000 f8ed 	bl	80019bc <__ledf2>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	dd01      	ble.n	80017ea <__aeabi_dcmple+0xe>
 80017e6:	2000      	movs	r0, #0
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	2001      	movs	r0, #1
 80017ec:	bd10      	pop	{r4, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)

080017f0 <__aeabi_dcmpgt>:
 80017f0:	b510      	push	{r4, lr}
 80017f2:	f000 f873 	bl	80018dc <__gedf2>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	dc01      	bgt.n	80017fe <__aeabi_dcmpgt+0xe>
 80017fa:	2000      	movs	r0, #0
 80017fc:	bd10      	pop	{r4, pc}
 80017fe:	2001      	movs	r0, #1
 8001800:	bd10      	pop	{r4, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)

08001804 <__aeabi_dcmpge>:
 8001804:	b510      	push	{r4, lr}
 8001806:	f000 f869 	bl	80018dc <__gedf2>
 800180a:	2800      	cmp	r0, #0
 800180c:	da01      	bge.n	8001812 <__aeabi_dcmpge+0xe>
 800180e:	2000      	movs	r0, #0
 8001810:	bd10      	pop	{r4, pc}
 8001812:	2001      	movs	r0, #1
 8001814:	bd10      	pop	{r4, pc}
 8001816:	46c0      	nop			@ (mov r8, r8)

08001818 <__clzsi2>:
 8001818:	211c      	movs	r1, #28
 800181a:	2301      	movs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	4298      	cmp	r0, r3
 8001820:	d301      	bcc.n	8001826 <__clzsi2+0xe>
 8001822:	0c00      	lsrs	r0, r0, #16
 8001824:	3910      	subs	r1, #16
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	4298      	cmp	r0, r3
 800182a:	d301      	bcc.n	8001830 <__clzsi2+0x18>
 800182c:	0a00      	lsrs	r0, r0, #8
 800182e:	3908      	subs	r1, #8
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	4298      	cmp	r0, r3
 8001834:	d301      	bcc.n	800183a <__clzsi2+0x22>
 8001836:	0900      	lsrs	r0, r0, #4
 8001838:	3904      	subs	r1, #4
 800183a:	a202      	add	r2, pc, #8	@ (adr r2, 8001844 <__clzsi2+0x2c>)
 800183c:	5c10      	ldrb	r0, [r2, r0]
 800183e:	1840      	adds	r0, r0, r1
 8001840:	4770      	bx	lr
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	02020304 	.word	0x02020304
 8001848:	01010101 	.word	0x01010101
	...

08001854 <__eqdf2>:
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	4657      	mov	r7, sl
 8001858:	46de      	mov	lr, fp
 800185a:	464e      	mov	r6, r9
 800185c:	4645      	mov	r5, r8
 800185e:	b5e0      	push	{r5, r6, r7, lr}
 8001860:	000d      	movs	r5, r1
 8001862:	0004      	movs	r4, r0
 8001864:	0fe8      	lsrs	r0, r5, #31
 8001866:	4683      	mov	fp, r0
 8001868:	0309      	lsls	r1, r1, #12
 800186a:	0fd8      	lsrs	r0, r3, #31
 800186c:	0b09      	lsrs	r1, r1, #12
 800186e:	4682      	mov	sl, r0
 8001870:	4819      	ldr	r0, [pc, #100]	@ (80018d8 <__eqdf2+0x84>)
 8001872:	468c      	mov	ip, r1
 8001874:	031f      	lsls	r7, r3, #12
 8001876:	0069      	lsls	r1, r5, #1
 8001878:	005e      	lsls	r6, r3, #1
 800187a:	0d49      	lsrs	r1, r1, #21
 800187c:	0b3f      	lsrs	r7, r7, #12
 800187e:	0d76      	lsrs	r6, r6, #21
 8001880:	4281      	cmp	r1, r0
 8001882:	d018      	beq.n	80018b6 <__eqdf2+0x62>
 8001884:	4286      	cmp	r6, r0
 8001886:	d00f      	beq.n	80018a8 <__eqdf2+0x54>
 8001888:	2001      	movs	r0, #1
 800188a:	42b1      	cmp	r1, r6
 800188c:	d10d      	bne.n	80018aa <__eqdf2+0x56>
 800188e:	45bc      	cmp	ip, r7
 8001890:	d10b      	bne.n	80018aa <__eqdf2+0x56>
 8001892:	4294      	cmp	r4, r2
 8001894:	d109      	bne.n	80018aa <__eqdf2+0x56>
 8001896:	45d3      	cmp	fp, sl
 8001898:	d01c      	beq.n	80018d4 <__eqdf2+0x80>
 800189a:	2900      	cmp	r1, #0
 800189c:	d105      	bne.n	80018aa <__eqdf2+0x56>
 800189e:	4660      	mov	r0, ip
 80018a0:	4320      	orrs	r0, r4
 80018a2:	1e43      	subs	r3, r0, #1
 80018a4:	4198      	sbcs	r0, r3
 80018a6:	e000      	b.n	80018aa <__eqdf2+0x56>
 80018a8:	2001      	movs	r0, #1
 80018aa:	bcf0      	pop	{r4, r5, r6, r7}
 80018ac:	46bb      	mov	fp, r7
 80018ae:	46b2      	mov	sl, r6
 80018b0:	46a9      	mov	r9, r5
 80018b2:	46a0      	mov	r8, r4
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	2001      	movs	r0, #1
 80018b8:	428e      	cmp	r6, r1
 80018ba:	d1f6      	bne.n	80018aa <__eqdf2+0x56>
 80018bc:	4661      	mov	r1, ip
 80018be:	4339      	orrs	r1, r7
 80018c0:	000f      	movs	r7, r1
 80018c2:	4317      	orrs	r7, r2
 80018c4:	4327      	orrs	r7, r4
 80018c6:	d1f0      	bne.n	80018aa <__eqdf2+0x56>
 80018c8:	465b      	mov	r3, fp
 80018ca:	4652      	mov	r2, sl
 80018cc:	1a98      	subs	r0, r3, r2
 80018ce:	1e43      	subs	r3, r0, #1
 80018d0:	4198      	sbcs	r0, r3
 80018d2:	e7ea      	b.n	80018aa <__eqdf2+0x56>
 80018d4:	2000      	movs	r0, #0
 80018d6:	e7e8      	b.n	80018aa <__eqdf2+0x56>
 80018d8:	000007ff 	.word	0x000007ff

080018dc <__gedf2>:
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	000d      	movs	r5, r1
 80018ea:	030e      	lsls	r6, r1, #12
 80018ec:	0049      	lsls	r1, r1, #1
 80018ee:	0d49      	lsrs	r1, r1, #21
 80018f0:	468a      	mov	sl, r1
 80018f2:	0fdf      	lsrs	r7, r3, #31
 80018f4:	0fe9      	lsrs	r1, r5, #31
 80018f6:	46bc      	mov	ip, r7
 80018f8:	b083      	sub	sp, #12
 80018fa:	4f2f      	ldr	r7, [pc, #188]	@ (80019b8 <__gedf2+0xdc>)
 80018fc:	0004      	movs	r4, r0
 80018fe:	4680      	mov	r8, r0
 8001900:	9101      	str	r1, [sp, #4]
 8001902:	0058      	lsls	r0, r3, #1
 8001904:	0319      	lsls	r1, r3, #12
 8001906:	4691      	mov	r9, r2
 8001908:	0b36      	lsrs	r6, r6, #12
 800190a:	0b09      	lsrs	r1, r1, #12
 800190c:	0d40      	lsrs	r0, r0, #21
 800190e:	45ba      	cmp	sl, r7
 8001910:	d01d      	beq.n	800194e <__gedf2+0x72>
 8001912:	42b8      	cmp	r0, r7
 8001914:	d00d      	beq.n	8001932 <__gedf2+0x56>
 8001916:	4657      	mov	r7, sl
 8001918:	2f00      	cmp	r7, #0
 800191a:	d12a      	bne.n	8001972 <__gedf2+0x96>
 800191c:	4334      	orrs	r4, r6
 800191e:	2800      	cmp	r0, #0
 8001920:	d124      	bne.n	800196c <__gedf2+0x90>
 8001922:	430a      	orrs	r2, r1
 8001924:	d036      	beq.n	8001994 <__gedf2+0xb8>
 8001926:	2c00      	cmp	r4, #0
 8001928:	d141      	bne.n	80019ae <__gedf2+0xd2>
 800192a:	4663      	mov	r3, ip
 800192c:	0058      	lsls	r0, r3, #1
 800192e:	3801      	subs	r0, #1
 8001930:	e015      	b.n	800195e <__gedf2+0x82>
 8001932:	4311      	orrs	r1, r2
 8001934:	d138      	bne.n	80019a8 <__gedf2+0xcc>
 8001936:	4653      	mov	r3, sl
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <__gedf2+0x64>
 800193c:	4326      	orrs	r6, r4
 800193e:	d0f4      	beq.n	800192a <__gedf2+0x4e>
 8001940:	9b01      	ldr	r3, [sp, #4]
 8001942:	4563      	cmp	r3, ip
 8001944:	d107      	bne.n	8001956 <__gedf2+0x7a>
 8001946:	9b01      	ldr	r3, [sp, #4]
 8001948:	0058      	lsls	r0, r3, #1
 800194a:	3801      	subs	r0, #1
 800194c:	e007      	b.n	800195e <__gedf2+0x82>
 800194e:	4326      	orrs	r6, r4
 8001950:	d12a      	bne.n	80019a8 <__gedf2+0xcc>
 8001952:	4550      	cmp	r0, sl
 8001954:	d021      	beq.n	800199a <__gedf2+0xbe>
 8001956:	2001      	movs	r0, #1
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	425f      	negs	r7, r3
 800195c:	4338      	orrs	r0, r7
 800195e:	b003      	add	sp, #12
 8001960:	bcf0      	pop	{r4, r5, r6, r7}
 8001962:	46bb      	mov	fp, r7
 8001964:	46b2      	mov	sl, r6
 8001966:	46a9      	mov	r9, r5
 8001968:	46a0      	mov	r8, r4
 800196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196c:	2c00      	cmp	r4, #0
 800196e:	d0dc      	beq.n	800192a <__gedf2+0x4e>
 8001970:	e7e6      	b.n	8001940 <__gedf2+0x64>
 8001972:	2800      	cmp	r0, #0
 8001974:	d0ef      	beq.n	8001956 <__gedf2+0x7a>
 8001976:	9b01      	ldr	r3, [sp, #4]
 8001978:	4563      	cmp	r3, ip
 800197a:	d1ec      	bne.n	8001956 <__gedf2+0x7a>
 800197c:	4582      	cmp	sl, r0
 800197e:	dcea      	bgt.n	8001956 <__gedf2+0x7a>
 8001980:	dbe1      	blt.n	8001946 <__gedf2+0x6a>
 8001982:	428e      	cmp	r6, r1
 8001984:	d8e7      	bhi.n	8001956 <__gedf2+0x7a>
 8001986:	d1de      	bne.n	8001946 <__gedf2+0x6a>
 8001988:	45c8      	cmp	r8, r9
 800198a:	d8e4      	bhi.n	8001956 <__gedf2+0x7a>
 800198c:	2000      	movs	r0, #0
 800198e:	45c8      	cmp	r8, r9
 8001990:	d2e5      	bcs.n	800195e <__gedf2+0x82>
 8001992:	e7d8      	b.n	8001946 <__gedf2+0x6a>
 8001994:	2c00      	cmp	r4, #0
 8001996:	d0e2      	beq.n	800195e <__gedf2+0x82>
 8001998:	e7dd      	b.n	8001956 <__gedf2+0x7a>
 800199a:	4311      	orrs	r1, r2
 800199c:	d104      	bne.n	80019a8 <__gedf2+0xcc>
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	4563      	cmp	r3, ip
 80019a2:	d1d8      	bne.n	8001956 <__gedf2+0x7a>
 80019a4:	2000      	movs	r0, #0
 80019a6:	e7da      	b.n	800195e <__gedf2+0x82>
 80019a8:	2002      	movs	r0, #2
 80019aa:	4240      	negs	r0, r0
 80019ac:	e7d7      	b.n	800195e <__gedf2+0x82>
 80019ae:	9b01      	ldr	r3, [sp, #4]
 80019b0:	4563      	cmp	r3, ip
 80019b2:	d0e6      	beq.n	8001982 <__gedf2+0xa6>
 80019b4:	e7cf      	b.n	8001956 <__gedf2+0x7a>
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	000007ff 	.word	0x000007ff

080019bc <__ledf2>:
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	4657      	mov	r7, sl
 80019c0:	464e      	mov	r6, r9
 80019c2:	4645      	mov	r5, r8
 80019c4:	46de      	mov	lr, fp
 80019c6:	b5e0      	push	{r5, r6, r7, lr}
 80019c8:	000d      	movs	r5, r1
 80019ca:	030e      	lsls	r6, r1, #12
 80019cc:	0049      	lsls	r1, r1, #1
 80019ce:	0d49      	lsrs	r1, r1, #21
 80019d0:	468a      	mov	sl, r1
 80019d2:	0fdf      	lsrs	r7, r3, #31
 80019d4:	0fe9      	lsrs	r1, r5, #31
 80019d6:	46bc      	mov	ip, r7
 80019d8:	b083      	sub	sp, #12
 80019da:	4f2e      	ldr	r7, [pc, #184]	@ (8001a94 <__ledf2+0xd8>)
 80019dc:	0004      	movs	r4, r0
 80019de:	4680      	mov	r8, r0
 80019e0:	9101      	str	r1, [sp, #4]
 80019e2:	0058      	lsls	r0, r3, #1
 80019e4:	0319      	lsls	r1, r3, #12
 80019e6:	4691      	mov	r9, r2
 80019e8:	0b36      	lsrs	r6, r6, #12
 80019ea:	0b09      	lsrs	r1, r1, #12
 80019ec:	0d40      	lsrs	r0, r0, #21
 80019ee:	45ba      	cmp	sl, r7
 80019f0:	d01e      	beq.n	8001a30 <__ledf2+0x74>
 80019f2:	42b8      	cmp	r0, r7
 80019f4:	d00d      	beq.n	8001a12 <__ledf2+0x56>
 80019f6:	4657      	mov	r7, sl
 80019f8:	2f00      	cmp	r7, #0
 80019fa:	d127      	bne.n	8001a4c <__ledf2+0x90>
 80019fc:	4334      	orrs	r4, r6
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d133      	bne.n	8001a6a <__ledf2+0xae>
 8001a02:	430a      	orrs	r2, r1
 8001a04:	d034      	beq.n	8001a70 <__ledf2+0xb4>
 8001a06:	2c00      	cmp	r4, #0
 8001a08:	d140      	bne.n	8001a8c <__ledf2+0xd0>
 8001a0a:	4663      	mov	r3, ip
 8001a0c:	0058      	lsls	r0, r3, #1
 8001a0e:	3801      	subs	r0, #1
 8001a10:	e015      	b.n	8001a3e <__ledf2+0x82>
 8001a12:	4311      	orrs	r1, r2
 8001a14:	d112      	bne.n	8001a3c <__ledf2+0x80>
 8001a16:	4653      	mov	r3, sl
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <__ledf2+0x64>
 8001a1c:	4326      	orrs	r6, r4
 8001a1e:	d0f4      	beq.n	8001a0a <__ledf2+0x4e>
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	4563      	cmp	r3, ip
 8001a24:	d01d      	beq.n	8001a62 <__ledf2+0xa6>
 8001a26:	2001      	movs	r0, #1
 8001a28:	9b01      	ldr	r3, [sp, #4]
 8001a2a:	425f      	negs	r7, r3
 8001a2c:	4338      	orrs	r0, r7
 8001a2e:	e006      	b.n	8001a3e <__ledf2+0x82>
 8001a30:	4326      	orrs	r6, r4
 8001a32:	d103      	bne.n	8001a3c <__ledf2+0x80>
 8001a34:	4550      	cmp	r0, sl
 8001a36:	d1f6      	bne.n	8001a26 <__ledf2+0x6a>
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	d01c      	beq.n	8001a76 <__ledf2+0xba>
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	b003      	add	sp, #12
 8001a40:	bcf0      	pop	{r4, r5, r6, r7}
 8001a42:	46bb      	mov	fp, r7
 8001a44:	46b2      	mov	sl, r6
 8001a46:	46a9      	mov	r9, r5
 8001a48:	46a0      	mov	r8, r4
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d0ea      	beq.n	8001a26 <__ledf2+0x6a>
 8001a50:	9b01      	ldr	r3, [sp, #4]
 8001a52:	4563      	cmp	r3, ip
 8001a54:	d1e7      	bne.n	8001a26 <__ledf2+0x6a>
 8001a56:	4582      	cmp	sl, r0
 8001a58:	dce5      	bgt.n	8001a26 <__ledf2+0x6a>
 8001a5a:	db02      	blt.n	8001a62 <__ledf2+0xa6>
 8001a5c:	428e      	cmp	r6, r1
 8001a5e:	d8e2      	bhi.n	8001a26 <__ledf2+0x6a>
 8001a60:	d00e      	beq.n	8001a80 <__ledf2+0xc4>
 8001a62:	9b01      	ldr	r3, [sp, #4]
 8001a64:	0058      	lsls	r0, r3, #1
 8001a66:	3801      	subs	r0, #1
 8001a68:	e7e9      	b.n	8001a3e <__ledf2+0x82>
 8001a6a:	2c00      	cmp	r4, #0
 8001a6c:	d0cd      	beq.n	8001a0a <__ledf2+0x4e>
 8001a6e:	e7d7      	b.n	8001a20 <__ledf2+0x64>
 8001a70:	2c00      	cmp	r4, #0
 8001a72:	d0e4      	beq.n	8001a3e <__ledf2+0x82>
 8001a74:	e7d7      	b.n	8001a26 <__ledf2+0x6a>
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	2000      	movs	r0, #0
 8001a7a:	4563      	cmp	r3, ip
 8001a7c:	d0df      	beq.n	8001a3e <__ledf2+0x82>
 8001a7e:	e7d2      	b.n	8001a26 <__ledf2+0x6a>
 8001a80:	45c8      	cmp	r8, r9
 8001a82:	d8d0      	bhi.n	8001a26 <__ledf2+0x6a>
 8001a84:	2000      	movs	r0, #0
 8001a86:	45c8      	cmp	r8, r9
 8001a88:	d2d9      	bcs.n	8001a3e <__ledf2+0x82>
 8001a8a:	e7ea      	b.n	8001a62 <__ledf2+0xa6>
 8001a8c:	9b01      	ldr	r3, [sp, #4]
 8001a8e:	4563      	cmp	r3, ip
 8001a90:	d0e4      	beq.n	8001a5c <__ledf2+0xa0>
 8001a92:	e7c8      	b.n	8001a26 <__ledf2+0x6a>
 8001a94:	000007ff 	.word	0x000007ff

08001a98 <USER_ADC_Init>:
#include <stdint.h>
#include "main.h"
#include "adclib.h"
#include "user_tim.h"

void USER_ADC_Init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
    // Habilitar reloj del ADC y del puerto GPIOA
    RCC->IOPENR |= (1 << 0);     // GPIOAEN
 8001a9e:	4b47      	ldr	r3, [pc, #284]	@ (8001bbc <USER_ADC_Init+0x124>)
 8001aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa2:	4b46      	ldr	r3, [pc, #280]	@ (8001bbc <USER_ADC_Init+0x124>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (1 << 20);   // ADCEN
 8001aaa:	4b44      	ldr	r3, [pc, #272]	@ (8001bbc <USER_ADC_Init+0x124>)
 8001aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aae:	4b43      	ldr	r3, [pc, #268]	@ (8001bbc <USER_ADC_Init+0x124>)
 8001ab0:	2180      	movs	r1, #128	@ 0x80
 8001ab2:	0349      	lsls	r1, r1, #13
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    // PA0 en modo analógico
    GPIOA->MODER |= (0x3 << (0*2));   // Modo analógico
 8001ab8:	23a0      	movs	r3, #160	@ 0xa0
 8001aba:	05db      	lsls	r3, r3, #23
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	23a0      	movs	r3, #160	@ 0xa0
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR &= ~(0x3 << (0*2));  // Sin pull-up/pull-down
 8001ac8:	23a0      	movs	r3, #160	@ 0xa0
 8001aca:	05db      	lsls	r3, r3, #23
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	23a0      	movs	r3, #160	@ 0xa0
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

    // Configurar CKMODE para reloj síncrono dividido entre 2
    ADC1->CFGR2 &= ~(0x3 << 30);        // Borrar CKMODE
 8001ad8:	4b39      	ldr	r3, [pc, #228]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	0892      	lsrs	r2, r2, #2
 8001ae2:	611a      	str	r2, [r3, #16]
    //ADC1->CFGR2 |=  (0x1 << 30);        // CKMODE = 01: PCLK/2

    ADC->CCR &= ~(0xE << 18);
 8001ae4:	4b37      	ldr	r3, [pc, #220]	@ (8001bc4 <USER_ADC_Init+0x12c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b36      	ldr	r3, [pc, #216]	@ (8001bc4 <USER_ADC_Init+0x12c>)
 8001aea:	4937      	ldr	r1, [pc, #220]	@ (8001bc8 <USER_ADC_Init+0x130>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
    ADC->CCR|=  (0x1 << 18);
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <USER_ADC_Init+0x12c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <USER_ADC_Init+0x12c>)
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	02c9      	lsls	r1, r1, #11
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

    // Configurar resolución, alineación, modo de conversión
    ADC1->CFGR1 &= ~(0x1 << 13); // Single conversion mode
 8001afe:	4b30      	ldr	r3, [pc, #192]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b04:	4931      	ldr	r1, [pc, #196]	@ (8001bcc <USER_ADC_Init+0x134>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 &= ~(0x1 << 5);  // Right alignment
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b10:	2120      	movs	r1, #32
 8001b12:	438a      	bics	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 &= ~(0x3 << 3);  // 12-bit resolution
 8001b16:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b1c:	2118      	movs	r1, #24
 8001b1e:	438a      	bics	r2, r1
 8001b20:	60da      	str	r2, [r3, #12]

    // Tiempo de muestreo
    ADC1->SMPR |= ~(0x7 << 0);   // Sampling time = shortest
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b28:	2108      	movs	r1, #8
 8001b2a:	4249      	negs	r1, r1
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	615a      	str	r2, [r3, #20]

    ADC1->ISR &= ~( 0x1UL << 13U );
 8001b30:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b36:	4925      	ldr	r1, [pc, #148]	@ (8001bcc <USER_ADC_Init+0x134>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
    ADC1->CFGR1 &= ~( 0x1UL << 21U ) & ~( 0x1UL << 2U );
 8001b3c:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b42:	4923      	ldr	r1, [pc, #140]	@ (8001bd0 <USER_ADC_Init+0x138>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	60da      	str	r2, [r3, #12]

    // Seleccionar canal 0 (PA0)
    ADC1->CHSELR |= (1 << 0);
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	430a      	orrs	r2, r1
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28

    while( !(ADC1->ISR & (0x1UL << 13U)));
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	019b      	lsls	r3, r3, #6
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d0f9      	beq.n	8001b56 <USER_ADC_Init+0xbe>

    // Habilitar regulador interno

    ADC1->CR |= (1 << 28);       // ADVREGEN
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]
    USER_TIM14_Delay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f001 f80d 	bl	8002b90 <USER_TIM14_Delay>

    // Calibración
    while (!USER_ADC_Calibration());
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	f000 f82c 	bl	8001bd4 <USER_ADC_Calibration>
 8001b7c:	1e03      	subs	r3, r0, #0
 8001b7e:	d0fb      	beq.n	8001b78 <USER_ADC_Init+0xe0>

    // Habilitar ADC
    ADC1->CR |= (1 << 0);         // ADEN
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]
    for (uint32_t i = 0; i < 1000 && !(ADC1->ISR & (1 << 0)); i++) USER_TIM14_Delay(1); // Wait up to 1ms
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	e005      	b.n	8001b9e <USER_ADC_Init+0x106>
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 fffc 	bl	8002b90 <USER_TIM14_Delay>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	23fa      	movs	r3, #250	@ 0xfa
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d204      	bcs.n	8001bb2 <USER_ADC_Init+0x11a>
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d0ef      	beq.n	8001b92 <USER_ADC_Init+0xfa>
    if (!(ADC1->ISR & (1 << 0))) return;  // Fail if ADRDY not set
 8001bb2:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <USER_ADC_Init+0x128>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
}
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40012400 	.word	0x40012400
 8001bc4:	40012708 	.word	0x40012708
 8001bc8:	ffc7ffff 	.word	0xffc7ffff
 8001bcc:	ffffdfff 	.word	0xffffdfff
 8001bd0:	ffdffffb 	.word	0xffdffffb

08001bd4 <USER_ADC_Calibration>:

uint8_t USER_ADC_Calibration(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    ADC1->CR |= (1 << 31);                   // ADCAL
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <USER_ADC_Calibration+0x38>)
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <USER_ADC_Calibration+0x38>)
 8001bde:	2180      	movs	r1, #128	@ 0x80
 8001be0:	0609      	lsls	r1, r1, #24
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
    while (ADC1->CR & (1 << 31));            // Esperar fin de calibración
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <USER_ADC_Calibration+0x38>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	dbfb      	blt.n	8001be8 <USER_ADC_Calibration+0x14>

    // (Opcional) Ajustar factor de calibración
    if (ADC1->CALFACT > 0x7F) {
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <USER_ADC_Calibration+0x38>)
 8001bf2:	23b4      	movs	r3, #180	@ 0xb4
 8001bf4:	58d3      	ldr	r3, [r2, r3]
 8001bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bf8:	d903      	bls.n	8001c02 <USER_ADC_Calibration+0x2e>
        ADC1->CALFACT = 0x7F;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <USER_ADC_Calibration+0x38>)
 8001bfc:	23b4      	movs	r3, #180	@ 0xb4
 8001bfe:	217f      	movs	r1, #127	@ 0x7f
 8001c00:	50d1      	str	r1, [r2, r3]
    }
    return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	40012400 	.word	0x40012400

08001c10 <USER_ADC_Read>:

uint16_t USER_ADC_Read(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    ADC1->CR |= (1 << 2);               // ADSTART
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <USER_ADC_Read+0x40>)
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <USER_ADC_Read+0x40>)
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & (1 << 2)));    // Esperar EOC
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <USER_ADC_Read+0x40>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2204      	movs	r2, #4
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0fa      	beq.n	8001c22 <USER_ADC_Read+0x12>
    if (ADC1->ISR & (1 << 4)) {         // Check for overrun error
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <USER_ADC_Read+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2210      	movs	r2, #16
 8001c32:	4013      	ands	r3, r2
 8001c34:	d005      	beq.n	8001c42 <USER_ADC_Read+0x32>
        ADC1->ISR |= (1 << 4);          // Clear overrun flag
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <USER_ADC_Read+0x40>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <USER_ADC_Read+0x40>)
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
    }
    return (uint16_t)(ADC1->DR);        // Leer valor convertido
 8001c42:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <USER_ADC_Read+0x40>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	b29b      	uxth	r3, r3
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	40012400 	.word	0x40012400

08001c54 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Habilitamos las señales de reloj para los puertos I/O
	*/
	RCC->IOPENR		|=	( 0x1UL <<  1U );
 8001c5a:	4bab      	ldr	r3, [pc, #684]	@ (8001f08 <LCD_Init+0x2b4>)
 8001c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c5e:	4baa      	ldr	r3, [pc, #680]	@ (8001f08 <LCD_Init+0x2b4>)
 8001c60:	2102      	movs	r1, #2
 8001c62:	430a      	orrs	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	@ 0x34

/**
  * Configuración de los pines de control (RS, RW, EN) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 18U );
 8001c66:	4ba9      	ldr	r3, [pc, #676]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4ba8      	ldr	r3, [pc, #672]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c6c:	49a8      	ldr	r1, [pc, #672]	@ (8001f10 <LCD_Init+0x2bc>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL <<  9U );
 8001c72:	4ba6      	ldr	r3, [pc, #664]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4ba5      	ldr	r3, [pc, #660]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c78:	49a6      	ldr	r1, [pc, #664]	@ (8001f14 <LCD_Init+0x2c0>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 18U );
 8001c7e:	4ba3      	ldr	r3, [pc, #652]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4ba2      	ldr	r3, [pc, #648]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c84:	49a4      	ldr	r1, [pc, #656]	@ (8001f18 <LCD_Init+0x2c4>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 18U );
 8001c8a:	4ba0      	ldr	r3, [pc, #640]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b9f      	ldr	r3, [pc, #636]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	02c9      	lsls	r1, r1, #11
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 20U );
 8001c98:	4b9c      	ldr	r3, [pc, #624]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4b9b      	ldr	r3, [pc, #620]	@ (8001f0c <LCD_Init+0x2b8>)
 8001c9e:	499f      	ldr	r1, [pc, #636]	@ (8001f1c <LCD_Init+0x2c8>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 10U );
 8001ca4:	4b99      	ldr	r3, [pc, #612]	@ (8001f0c <LCD_Init+0x2b8>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4b98      	ldr	r3, [pc, #608]	@ (8001f0c <LCD_Init+0x2b8>)
 8001caa:	499d      	ldr	r1, [pc, #628]	@ (8001f20 <LCD_Init+0x2cc>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 20U );
 8001cb0:	4b96      	ldr	r3, [pc, #600]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b95      	ldr	r3, [pc, #596]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cb6:	499b      	ldr	r1, [pc, #620]	@ (8001f24 <LCD_Init+0x2d0>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 20U );
 8001cbc:	4b93      	ldr	r3, [pc, #588]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cc2:	2180      	movs	r1, #128	@ 0x80
 8001cc4:	0349      	lsls	r1, r1, #13
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 22U );
 8001cca:	4b90      	ldr	r3, [pc, #576]	@ (8001f0c <LCD_Init+0x2b8>)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	4b8f      	ldr	r3, [pc, #572]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cd0:	4995      	ldr	r1, [pc, #596]	@ (8001f28 <LCD_Init+0x2d4>)
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 11U );
 8001cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4b8c      	ldr	r3, [pc, #560]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cdc:	4993      	ldr	r1, [pc, #588]	@ (8001f2c <LCD_Init+0x2d8>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 22U );
 8001ce2:	4b8a      	ldr	r3, [pc, #552]	@ (8001f0c <LCD_Init+0x2b8>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b89      	ldr	r3, [pc, #548]	@ (8001f0c <LCD_Init+0x2b8>)
 8001ce8:	4991      	ldr	r1, [pc, #580]	@ (8001f30 <LCD_Init+0x2dc>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 22U );
 8001cee:	4b87      	ldr	r3, [pc, #540]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b86      	ldr	r3, [pc, #536]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	03c9      	lsls	r1, r1, #15
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

/**
  * Configuración de los pines de datos (D4-D7) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 24U );
 8001cfc:	4b83      	ldr	r3, [pc, #524]	@ (8001f0c <LCD_Init+0x2b8>)
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b82      	ldr	r3, [pc, #520]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d02:	498c      	ldr	r1, [pc, #560]	@ (8001f34 <LCD_Init+0x2e0>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 12U );
 8001d08:	4b80      	ldr	r3, [pc, #512]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d0e:	498a      	ldr	r1, [pc, #552]	@ (8001f38 <LCD_Init+0x2e4>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 24U );
 8001d14:	4b7d      	ldr	r3, [pc, #500]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b7c      	ldr	r3, [pc, #496]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d1a:	4988      	ldr	r1, [pc, #544]	@ (8001f3c <LCD_Init+0x2e8>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 24U );
 8001d20:	4b7a      	ldr	r3, [pc, #488]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b79      	ldr	r3, [pc, #484]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d26:	2180      	movs	r1, #128	@ 0x80
 8001d28:	0449      	lsls	r1, r1, #17
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 26U );
 8001d2e:	4b77      	ldr	r3, [pc, #476]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	4b76      	ldr	r3, [pc, #472]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d34:	4982      	ldr	r1, [pc, #520]	@ (8001f40 <LCD_Init+0x2ec>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 13U );
 8001d3a:	4b74      	ldr	r3, [pc, #464]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4b73      	ldr	r3, [pc, #460]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d40:	4980      	ldr	r1, [pc, #512]	@ (8001f44 <LCD_Init+0x2f0>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 26U );
 8001d46:	4b71      	ldr	r3, [pc, #452]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b70      	ldr	r3, [pc, #448]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d4c:	497e      	ldr	r1, [pc, #504]	@ (8001f48 <LCD_Init+0x2f4>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 26U );
 8001d52:	4b6e      	ldr	r3, [pc, #440]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b6d      	ldr	r3, [pc, #436]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d58:	2180      	movs	r1, #128	@ 0x80
 8001d5a:	04c9      	lsls	r1, r1, #19
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 28U );
 8001d60:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b69      	ldr	r3, [pc, #420]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d66:	4979      	ldr	r1, [pc, #484]	@ (8001f4c <LCD_Init+0x2f8>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 14U );
 8001d6c:	4b67      	ldr	r3, [pc, #412]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4b66      	ldr	r3, [pc, #408]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d72:	4977      	ldr	r1, [pc, #476]	@ (8001f50 <LCD_Init+0x2fc>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 28U );
 8001d78:	4b64      	ldr	r3, [pc, #400]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b63      	ldr	r3, [pc, #396]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d7e:	4975      	ldr	r1, [pc, #468]	@ (8001f54 <LCD_Init+0x300>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 28U );
 8001d84:	4b61      	ldr	r3, [pc, #388]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b60      	ldr	r3, [pc, #384]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	0549      	lsls	r1, r1, #21
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 8001d92:	4b5e      	ldr	r3, [pc, #376]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <LCD_Init+0x2b8>)
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	0892      	lsrs	r2, r2, #2
 8001d9c:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f0c <LCD_Init+0x2b8>)
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f0c <LCD_Init+0x2b8>)
 8001da4:	496c      	ldr	r1, [pc, #432]	@ (8001f58 <LCD_Init+0x304>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 30U );
 8001daa:	4b58      	ldr	r3, [pc, #352]	@ (8001f0c <LCD_Init+0x2b8>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <LCD_Init+0x2b8>)
 8001db0:	0052      	lsls	r2, r2, #1
 8001db2:	0852      	lsrs	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8001db6:	4b55      	ldr	r3, [pc, #340]	@ (8001f0c <LCD_Init+0x2b8>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b54      	ldr	r3, [pc, #336]	@ (8001f0c <LCD_Init+0x2b8>)
 8001dbc:	2180      	movs	r1, #128	@ 0x80
 8001dbe:	05c9      	lsls	r1, r1, #23
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOB->BSRR	 =	 LCD_RS_PIN_LOW;
 8001dc4:	4b51      	ldr	r3, [pc, #324]	@ (8001f0c <LCD_Init+0x2b8>)
 8001dc6:	2280      	movs	r2, #128	@ 0x80
 8001dc8:	0492      	lsls	r2, r2, #18
 8001dca:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_RW_PIN_LOW;
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8001f0c <LCD_Init+0x2b8>)
 8001dce:	2280      	movs	r2, #128	@ 0x80
 8001dd0:	04d2      	lsls	r2, r2, #19
 8001dd2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_EN_PIN_LOW;
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <LCD_Init+0x2b8>)
 8001dd6:	2280      	movs	r2, #128	@ 0x80
 8001dd8:	0512      	lsls	r2, r2, #20
 8001dda:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 8001ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8001f0c <LCD_Init+0x2b8>)
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	0552      	lsls	r2, r2, #21
 8001de2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_LOW;
 8001de4:	4b49      	ldr	r3, [pc, #292]	@ (8001f0c <LCD_Init+0x2b8>)
 8001de6:	2280      	movs	r2, #128	@ 0x80
 8001de8:	0592      	lsls	r2, r2, #22
 8001dea:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8001dec:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <LCD_Init+0x2b8>)
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	05d2      	lsls	r2, r2, #23
 8001df2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8001df4:	4b45      	ldr	r3, [pc, #276]	@ (8001f0c <LCD_Init+0x2b8>)
 8001df6:	2280      	movs	r2, #128	@ 0x80
 8001df8:	0612      	lsls	r2, r2, #24
 8001dfa:	619a      	str	r2, [r3, #24]
	USER_TIM14_Delay(50);
 8001dfc:	2032      	movs	r0, #50	@ 0x32
 8001dfe:	f000 fec7 	bl	8002b90 <USER_TIM14_Delay>

	/* Special case of 'Function Set'	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8001e02:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e04:	2280      	movs	r2, #128	@ 0x80
 8001e06:	0152      	lsls	r2, r2, #5
 8001e08:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	0192      	lsls	r2, r2, #6
 8001e10:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8001e12:	4b3e      	ldr	r3, [pc, #248]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	05d2      	lsls	r2, r2, #23
 8001e18:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8001e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	0612      	lsls	r2, r2, #24
 8001e20:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8001e22:	f000 f9ff 	bl	8002224 <LCD_Pulse_EN>
	USER_TIM14_Delay(50);
 8001e26:	2032      	movs	r0, #50	@ 0x32
 8001e28:	f000 feb2 	bl	8002b90 <USER_TIM14_Delay>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8001e2c:	4b37      	ldr	r3, [pc, #220]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0152      	lsls	r2, r2, #5
 8001e32:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8001e34:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e36:	2280      	movs	r2, #128	@ 0x80
 8001e38:	0192      	lsls	r2, r2, #6
 8001e3a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8001e3c:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e3e:	2280      	movs	r2, #128	@ 0x80
 8001e40:	05d2      	lsls	r2, r2, #23
 8001e42:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8001e44:	4b31      	ldr	r3, [pc, #196]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	0612      	lsls	r2, r2, #24
 8001e4a:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8001e4c:	f000 f9ea 	bl	8002224 <LCD_Pulse_EN>
	USER_TIM14_Delay(50);
 8001e50:	2032      	movs	r0, #50	@ 0x32
 8001e52:	f000 fe9d 	bl	8002b90 <USER_TIM14_Delay>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8001e56:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e58:	2280      	movs	r2, #128	@ 0x80
 8001e5a:	0152      	lsls	r2, r2, #5
 8001e5c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e60:	2280      	movs	r2, #128	@ 0x80
 8001e62:	0192      	lsls	r2, r2, #6
 8001e64:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8001e66:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e68:	2280      	movs	r2, #128	@ 0x80
 8001e6a:	05d2      	lsls	r2, r2, #23
 8001e6c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8001e6e:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e70:	2280      	movs	r2, #128	@ 0x80
 8001e72:	0612      	lsls	r2, r2, #24
 8001e74:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8001e76:	f000 f9d5 	bl	8002224 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	f000 f962 	bl	8002144 <LCD_Busy>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d1fb      	bne.n	8001e7c <LCD_Init+0x228>

	/* Initial 'Function Set' to change 4-bit mode	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e86:	2280      	movs	r2, #128	@ 0x80
 8001e88:	0552      	lsls	r2, r2, #21
 8001e8a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	0192      	lsls	r2, r2, #6
 8001e92:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	05d2      	lsls	r2, r2, #23
 8001e9a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <LCD_Init+0x2b8>)
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	0612      	lsls	r2, r2, #24
 8001ea2:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8001ea4:	f000 f9be 	bl	8002224 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	f000 f94b 	bl	8002144 <LCD_Busy>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d1fb      	bne.n	8001eaa <LCD_Init+0x256>
	/* 'Function Set' (I=1, N and F as required)	*/
	LCD_Write_Cmd( 0x28U );
 8001eb2:	2028      	movs	r0, #40	@ 0x28
 8001eb4:	f000 f8bc 	bl	8002030 <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=1, C=0, B=0)	*/
	LCD_Write_Cmd( 0x0CU );
 8001eb8:	200c      	movs	r0, #12
 8001eba:	f000 f8b9 	bl	8002030 <LCD_Write_Cmd>
	/* 'Clear Display'	*/
	LCD_Write_Cmd( 0x01U );//
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 f8b6 	bl	8002030 <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)	*/
	LCD_Write_Cmd( 0x06U );
 8001ec4:	2006      	movs	r0, #6
 8001ec6:	f000 f8b3 	bl	8002030 <LCD_Write_Cmd>
	/* Initialization Ends	*/
//	LCD_Write_Cmd( 0x0FU );

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );
 8001eca:	2040      	movs	r0, #64	@ 0x40
 8001ecc:	f000 f8b0 	bl	8002030 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <LCD_Init+0x308>)
 8001ed2:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	e00c      	b.n	8001ef4 <LCD_Init+0x2a0>
		LCD_Put_Char( *p );
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f8ba 	bl	800205c <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ef8:	d9ef      	bls.n	8001eda <LCD_Init+0x286>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8001efa:	2080      	movs	r0, #128	@ 0x80
 8001efc:	f000 f898 	bl	8002030 <LCD_Write_Cmd>
}
 8001f00:	46c0      	nop			@ (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	50000400 	.word	0x50000400
 8001f10:	fff3ffff 	.word	0xfff3ffff
 8001f14:	fffffdff 	.word	0xfffffdff
 8001f18:	fff7ffff 	.word	0xfff7ffff
 8001f1c:	ffcfffff 	.word	0xffcfffff
 8001f20:	fffffbff 	.word	0xfffffbff
 8001f24:	ffdfffff 	.word	0xffdfffff
 8001f28:	ff3fffff 	.word	0xff3fffff
 8001f2c:	fffff7ff 	.word	0xfffff7ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fcffffff 	.word	0xfcffffff
 8001f38:	ffffefff 	.word	0xffffefff
 8001f3c:	fdffffff 	.word	0xfdffffff
 8001f40:	f3ffffff 	.word	0xf3ffffff
 8001f44:	ffffdfff 	.word	0xffffdfff
 8001f48:	f7ffffff 	.word	0xf7ffffff
 8001f4c:	cfffffff 	.word	0xcfffffff
 8001f50:	ffffbfff 	.word	0xffffbfff
 8001f54:	dfffffff 	.word	0xdfffffff
 8001f58:	ffff7fff 	.word	0xffff7fff
 8001f5c:	08006aa4 	.word	0x08006aa4

08001f60 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	0002      	movs	r2, r0
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	701a      	strb	r2, [r3, #0]
	if( ( val & 0x01U ) == 0x01U )
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	d004      	beq.n	8001f80 <LCD_Out_Data4+0x20>
		GPIOB->BSRR	=	LCD_D4_PIN_HIGH;
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001f78:	2280      	movs	r2, #128	@ 0x80
 8001f7a:	0152      	lsls	r2, r2, #5
 8001f7c:	619a      	str	r2, [r3, #24]
 8001f7e:	e003      	b.n	8001f88 <LCD_Out_Data4+0x28>
	else
		GPIOB->BSRR	=	LCD_D4_PIN_LOW;
 8001f80:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001f82:	2280      	movs	r2, #128	@ 0x80
 8001f84:	0552      	lsls	r2, r2, #21
 8001f86:	619a      	str	r2, [r3, #24]

	if( ( val & 0x02U ) == 0x02U )
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d004      	beq.n	8001f9c <LCD_Out_Data4+0x3c>
		GPIOB->BSRR	=	LCD_D5_PIN_HIGH;
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001f94:	2280      	movs	r2, #128	@ 0x80
 8001f96:	0192      	lsls	r2, r2, #6
 8001f98:	619a      	str	r2, [r3, #24]
 8001f9a:	e003      	b.n	8001fa4 <LCD_Out_Data4+0x44>
	else
		GPIOB->BSRR	=	LCD_D5_PIN_LOW;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	0592      	lsls	r2, r2, #22
 8001fa2:	619a      	str	r2, [r3, #24]

	if( ( val & 0x04U ) == 0x04U )
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	4013      	ands	r3, r2
 8001fac:	d004      	beq.n	8001fb8 <LCD_Out_Data4+0x58>
		GPIOB->BSRR	=	LCD_D6_PIN_HIGH;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	01d2      	lsls	r2, r2, #7
 8001fb4:	619a      	str	r2, [r3, #24]
 8001fb6:	e003      	b.n	8001fc0 <LCD_Out_Data4+0x60>
	else
		GPIOB->BSRR	=	LCD_D6_PIN_LOW;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	05d2      	lsls	r2, r2, #23
 8001fbe:	619a      	str	r2, [r3, #24]

	if( ( val & 0x08U ) == 0x08U )
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <LCD_Out_Data4+0x74>
		GPIOB->BSRR	=	LCD_D7_PIN_HIGH;
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	0212      	lsls	r2, r2, #8
 8001fd0:	619a      	str	r2, [r3, #24]
	else
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
}
 8001fd2:	e003      	b.n	8001fdc <LCD_Out_Data4+0x7c>
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <LCD_Out_Data4+0x84>)
 8001fd6:	2280      	movs	r2, #128	@ 0x80
 8001fd8:	0612      	lsls	r2, r2, #24
 8001fda:	619a      	str	r2, [r3, #24]
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	50000400 	.word	0x50000400

08001fe8 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	701a      	strb	r2, [r3, #0]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff ffaf 	bl	8001f60 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8002002:	f000 f90f 	bl	8002224 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	220f      	movs	r2, #15
 800200c:	4013      	ands	r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff ffa5 	bl	8001f60 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8002016:	f000 f905 	bl	8002224 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	f000 f892 	bl	8002144 <LCD_Busy>
 8002020:	1e03      	subs	r3, r0, #0
 8002022:	d1fb      	bne.n	800201c <LCD_Write_Byte+0x34>
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	0002      	movs	r2, r0
 8002038:	1dfb      	adds	r3, r7, #7
 800203a:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_LOW;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <LCD_Write_Cmd+0x28>)
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	0492      	lsls	r2, r2, #18
 8002042:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( val );
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff ffcd 	bl	8001fe8 <LCD_Write_Byte>
}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b002      	add	sp, #8
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	50000400 	.word	0x50000400

0800205c <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	0002      	movs	r2, r0
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_HIGH;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <LCD_Put_Char+0x28>)
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( c );
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff ffb7 	bl	8001fe8 <LCD_Write_Byte>
}
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b002      	add	sp, #8
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	50000400 	.word	0x50000400

08002088 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	0002      	movs	r2, r0
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	1c0a      	adds	r2, r1, #0
 8002098:	701a      	strb	r2, [r3, #0]
	uint8_t address;
	column--;
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	1dbb      	adds	r3, r7, #6
 80020a0:	3a01      	subs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
	line--;
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	3a01      	subs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
	address = ( line * 0x40U ) + column;
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	019b      	lsls	r3, r3, #6
 80020b4:	b2d9      	uxtb	r1, r3
 80020b6:	200f      	movs	r0, #15
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	1dba      	adds	r2, r7, #6
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	188a      	adds	r2, r1, r2
 80020c0:	701a      	strb	r2, [r3, #0]
	address = 0x80U + ( address & 0x7FU );
 80020c2:	0001      	movs	r1, r0
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	227f      	movs	r2, #127	@ 0x7f
 80020ca:	4013      	ands	r3, r2
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	187b      	adds	r3, r7, r1
 80020d0:	3a80      	subs	r2, #128	@ 0x80
 80020d2:	701a      	strb	r2, [r3, #0]
	LCD_Write_Cmd( address );
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	0018      	movs	r0, r3
 80020da:	f7ff ffa9 	bl	8002030 <LCD_Write_Cmd>
}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 80020e6:	b590      	push	{r4, r7, lr}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 80020ee:	230e      	movs	r3, #14
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	e012      	b.n	800211e <LCD_Put_Str+0x38>
		LCD_Put_Char( str[ i ] );
 80020f8:	240e      	movs	r4, #14
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2200      	movs	r2, #0
 80020fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	18d3      	adds	r3, r2, r3
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ffa8 	bl	800205c <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 800210c:	0021      	movs	r1, r4
 800210e:	187b      	adds	r3, r7, r1
 8002110:	2200      	movs	r2, #0
 8002112:	5e9b      	ldrsh	r3, [r3, r2]
 8002114:	b29b      	uxth	r3, r3
 8002116:	3301      	adds	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	187b      	adds	r3, r7, r1
 800211c:	801a      	strh	r2, [r3, #0]
 800211e:	220e      	movs	r2, #14
 8002120:	18bb      	adds	r3, r7, r2
 8002122:	2100      	movs	r1, #0
 8002124:	5e5b      	ldrsh	r3, [r3, r1]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	dc07      	bgt.n	800213a <LCD_Put_Str+0x54>
 800212a:	18bb      	adds	r3, r7, r2
 800212c:	2200      	movs	r2, #0
 800212e:	5e9b      	ldrsh	r3, [r3, r2]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	18d3      	adds	r3, r2, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1de      	bne.n	80020f8 <LCD_Put_Str+0x12>
}
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	46bd      	mov	sp, r7
 800213e:	b005      	add	sp, #20
 8002140:	bd90      	pop	{r4, r7, pc}
	...

08002144 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
/**
  * Configuracion de D7 as input floating
  */
	GPIOB->PUPDR &= ~( 0x3UL << 30U );
 8002148:	4b34      	ldr	r3, [pc, #208]	@ (800221c <LCD_Busy+0xd8>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4b33      	ldr	r3, [pc, #204]	@ (800221c <LCD_Busy+0xd8>)
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	0892      	lsrs	r2, r2, #2
 8002152:	60da      	str	r2, [r3, #12]
  GPIOB->MODER &= ~( 0x3UL << 30U );
 8002154:	4b31      	ldr	r3, [pc, #196]	@ (800221c <LCD_Busy+0xd8>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b30      	ldr	r3, [pc, #192]	@ (800221c <LCD_Busy+0xd8>)
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	0892      	lsrs	r2, r2, #2
 800215e:	601a      	str	r2, [r3, #0]
	GPIOB->BSRR	  =	 LCD_RS_PIN_LOW;
 8002160:	4b2e      	ldr	r3, [pc, #184]	@ (800221c <LCD_Busy+0xd8>)
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	0492      	lsls	r2, r2, #18
 8002166:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_RW_PIN_HIGH;
 8002168:	4b2c      	ldr	r3, [pc, #176]	@ (800221c <LCD_Busy+0xd8>)
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	00d2      	lsls	r2, r2, #3
 800216e:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_EN_PIN_HIGH;
 8002170:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <LCD_Busy+0xd8>)
 8002172:	2280      	movs	r2, #128	@ 0x80
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	619a      	str	r2, [r3, #24]
	USER_TIM14_Delay(1);
 8002178:	2001      	movs	r0, #1
 800217a:	f000 fd09 	bl	8002b90 <USER_TIM14_Delay>
	if(( GPIOB->IDR	& LCD_D7_PIN_HIGH )) {
 800217e:	4b27      	ldr	r3, [pc, #156]	@ (800221c <LCD_Busy+0xd8>)
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4013      	ands	r3, r2
 8002188:	d022      	beq.n	80021d0 <LCD_Busy+0x8c>
		GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 800218a:	4b24      	ldr	r3, [pc, #144]	@ (800221c <LCD_Busy+0xd8>)
 800218c:	2280      	movs	r2, #128	@ 0x80
 800218e:	0512      	lsls	r2, r2, #20
 8002190:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR	=	 LCD_RW_PIN_LOW;
 8002192:	4b22      	ldr	r3, [pc, #136]	@ (800221c <LCD_Busy+0xd8>)
 8002194:	2280      	movs	r2, #128	@ 0x80
 8002196:	04d2      	lsls	r2, r2, #19
 8002198:	619a      	str	r2, [r3, #24]
/**
  * Configuracion de D7 as output push-pull
  */
		GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <LCD_Busy+0xd8>)
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <LCD_Busy+0xd8>)
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	0892      	lsrs	r2, r2, #2
 80021a4:	60da      	str	r2, [r3, #12]
  	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 80021a6:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <LCD_Busy+0xd8>)
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <LCD_Busy+0xd8>)
 80021ac:	491c      	ldr	r1, [pc, #112]	@ (8002220 <LCD_Busy+0xdc>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  	GPIOB->MODER  &= ~( 0x2UL << 30U );
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <LCD_Busy+0xd8>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <LCD_Busy+0xd8>)
 80021b8:	0052      	lsls	r2, r2, #1
 80021ba:	0852      	lsrs	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
  	GPIOB->MODER  |=  ( 0x1UL << 30U );
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <LCD_Busy+0xd8>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <LCD_Busy+0xd8>)
 80021c4:	2180      	movs	r1, #128	@ 0x80
 80021c6:	05c9      	lsls	r1, r1, #23
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
		return 1;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e021      	b.n	8002214 <LCD_Busy+0xd0>
	} else {
		GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <LCD_Busy+0xd8>)
 80021d2:	2280      	movs	r2, #128	@ 0x80
 80021d4:	0512      	lsls	r2, r2, #20
 80021d6:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR	=	 LCD_RW_PIN_LOW;
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <LCD_Busy+0xd8>)
 80021da:	2280      	movs	r2, #128	@ 0x80
 80021dc:	04d2      	lsls	r2, r2, #19
 80021de:	619a      	str	r2, [r3, #24]
/**
  * Configuracion de D7 as output push-pull
  */
		GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <LCD_Busy+0xd8>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <LCD_Busy+0xd8>)
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	0892      	lsrs	r2, r2, #2
 80021ea:	60da      	str	r2, [r3, #12]
  	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <LCD_Busy+0xd8>)
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <LCD_Busy+0xd8>)
 80021f2:	490b      	ldr	r1, [pc, #44]	@ (8002220 <LCD_Busy+0xdc>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
  	GPIOB->MODER  &= ~( 0x2UL << 30U );
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <LCD_Busy+0xd8>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <LCD_Busy+0xd8>)
 80021fe:	0052      	lsls	r2, r2, #1
 8002200:	0852      	lsrs	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
  	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <LCD_Busy+0xd8>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <LCD_Busy+0xd8>)
 800220a:	2180      	movs	r1, #128	@ 0x80
 800220c:	05c9      	lsls	r1, r1, #23
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
		return 0;
 8002212:	2300      	movs	r3, #0
	}
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	50000400 	.word	0x50000400
 8002220:	ffff7fff 	.word	0xffff7fff

08002224 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;//
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <LCD_Pulse_EN+0x34>)
 800222a:	2280      	movs	r2, #128	@ 0x80
 800222c:	0512      	lsls	r2, r2, #20
 800222e:	619a      	str	r2, [r3, #24]
	USER_TIM14_Delay(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f000 fcad 	bl	8002b90 <USER_TIM14_Delay>
	GPIOB->BSRR	=	LCD_EN_PIN_HIGH;
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <LCD_Pulse_EN+0x34>)
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	619a      	str	r2, [r3, #24]
	USER_TIM14_Delay(1);
 800223e:	2001      	movs	r0, #1
 8002240:	f000 fca6 	bl	8002b90 <USER_TIM14_Delay>
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <LCD_Pulse_EN+0x34>)
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	0512      	lsls	r2, r2, #20
 800224a:	619a      	str	r2, [r3, #24]
	USER_TIM14_Delay(1);
 800224c:	2001      	movs	r0, #1
 800224e:	f000 fc9f 	bl	8002b90 <USER_TIM14_Delay>
}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	50000400 	.word	0x50000400

0800225c <main>:
void StartTask2( void *pvParameters );
void StartTask3( void *pvParameters );
void StartTask4( void *pvParameters );
/* Superloop structure */
int main(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af02      	add	r7, sp, #8
	/* Declarations and Initializations */
	HAL_Init();
 8002262:	f000 feb6 	bl	8002fd2 <HAL_Init>
	System_init();
 8002266:	f000 f8ef 	bl	8002448 <System_init>

	/* Create a task with a priority of 0 (idle), 1 (belowNormal), 2 (Normal), 3 (High), 4 (VeryHigh) */
	xTaskCreate(StartTask1, "Task1", 128, NULL, 1, &Task1Handle);
 800226a:	4916      	ldr	r1, [pc, #88]	@ (80022c4 <main+0x68>)
 800226c:	4816      	ldr	r0, [pc, #88]	@ (80022c8 <main+0x6c>)
 800226e:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <main+0x70>)
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	2301      	movs	r3, #1
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	2280      	movs	r2, #128	@ 0x80
 800227a:	f001 fe53 	bl	8003f24 <xTaskCreate>
	xTaskCreate(StartTask2, "Task2", 128, NULL, 3, &Task2Handle);
 800227e:	4914      	ldr	r1, [pc, #80]	@ (80022d0 <main+0x74>)
 8002280:	4814      	ldr	r0, [pc, #80]	@ (80022d4 <main+0x78>)
 8002282:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <main+0x7c>)
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	2303      	movs	r3, #3
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	2280      	movs	r2, #128	@ 0x80
 800228e:	f001 fe49 	bl	8003f24 <xTaskCreate>
	xTaskCreate(StartTask3, "Task3", 128, NULL, 2, &Task3Handle);
 8002292:	4912      	ldr	r1, [pc, #72]	@ (80022dc <main+0x80>)
 8002294:	4812      	ldr	r0, [pc, #72]	@ (80022e0 <main+0x84>)
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <main+0x88>)
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	2302      	movs	r3, #2
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2300      	movs	r3, #0
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	f001 fe3f 	bl	8003f24 <xTaskCreate>
	xTaskCreate(StartTask4, "Task4", 128, NULL, 4, &Task4Handle);
 80022a6:	4910      	ldr	r1, [pc, #64]	@ (80022e8 <main+0x8c>)
 80022a8:	4810      	ldr	r0, [pc, #64]	@ (80022ec <main+0x90>)
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <main+0x94>)
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	2304      	movs	r3, #4
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2300      	movs	r3, #0
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	f001 fe35 	bl	8003f24 <xTaskCreate>

	vTaskStartScheduler();
 80022ba:	f001 ffd1 	bl	8004260 <vTaskStartScheduler>


	/* Repetitive block */
	for(;;){
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	e7fd      	b.n	80022be <main+0x62>
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	080069f8 	.word	0x080069f8
 80022c8:	080022f5 	.word	0x080022f5
 80022cc:	200000b0 	.word	0x200000b0
 80022d0:	08006a00 	.word	0x08006a00
 80022d4:	08002335 	.word	0x08002335
 80022d8:	200000b4 	.word	0x200000b4
 80022dc:	08006a08 	.word	0x08006a08
 80022e0:	080023b1 	.word	0x080023b1
 80022e4:	200000b8 	.word	0x200000b8
 80022e8:	08006a10 	.word	0x08006a10
 80022ec:	080023e9 	.word	0x080023e9
 80022f0:	200000bc 	.word	0x200000bc

080022f4 <StartTask1>:
	}

}

// Task1 function
void StartTask1(void *pvParameters) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;) {

	  val = USER_ADC_Read();
 80022fc:	f7ff fc88 	bl	8001c10 <USER_ADC_Read>
 8002300:	0003      	movs	r3, r0
 8002302:	001a      	movs	r2, r3
 8002304:	4b09      	ldr	r3, [pc, #36]	@ (800232c <StartTask1+0x38>)
 8002306:	801a      	strh	r2, [r3, #0]
	  if (GPIOA->IDR & (0x1UL << 7U))
 8002308:	23a0      	movs	r3, #160	@ 0xa0
 800230a:	05db      	lsls	r3, r3, #23
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2280      	movs	r2, #128	@ 0x80
 8002310:	4013      	ands	r3, r2
 8002312:	d003      	beq.n	800231c <StartTask1+0x28>
				{
					button_status = 1;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <StartTask1+0x3c>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e002      	b.n	8002322 <StartTask1+0x2e>
				}
				else
				{
					button_status = 0;
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <StartTask1+0x3c>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
				}
	  vTaskDelay(6); //1
 8002322:	2006      	movs	r0, #6
 8002324:	f001 ff76 	bl	8004214 <vTaskDelay>
	  val = USER_ADC_Read();
 8002328:	e7e8      	b.n	80022fc <StartTask1+0x8>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	200000ae 	.word	0x200000ae
 8002330:	200000ac 	.word	0x200000ac

08002334 <StartTask2>:
  }
}

void StartTask2(void *pvParameters) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 //vTaskDelay(100);
	vTaskDelay(2);
 800233c:	2002      	movs	r0, #2
 800233e:	f001 ff69 	bl	8004214 <vTaskDelay>
  /* Infinite loop */
  for(;;) {

		LCD_Set_Cursor(1, 1);
 8002342:	2101      	movs	r1, #1
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff fe9f 	bl	8002088 <LCD_Set_Cursor>
		LCD_Put_Str("Vel:       G:  ");
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <StartTask2+0x68>)
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff feca 	bl	80020e6 <LCD_Put_Str>
		LCD_Set_Cursor(1, 5);
 8002352:	2105      	movs	r1, #5
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff fe97 	bl	8002088 <LCD_Set_Cursor>
		LCD_Put_Str(buffer_vel);
 800235a:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <StartTask2+0x6c>)
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fec2 	bl	80020e6 <LCD_Put_Str>
		LCD_Set_Cursor(1, 14);
 8002362:	210e      	movs	r1, #14
 8002364:	2001      	movs	r0, #1
 8002366:	f7ff fe8f 	bl	8002088 <LCD_Set_Cursor>
		LCD_Put_Str(buffer_gear);
 800236a:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <StartTask2+0x70>)
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff feba 	bl	80020e6 <LCD_Put_Str>
		LCD_Set_Cursor(2, 1);
 8002372:	2101      	movs	r1, #1
 8002374:	2002      	movs	r0, #2
 8002376:	f7ff fe87 	bl	8002088 <LCD_Set_Cursor>
		LCD_Put_Str("RPM:       ");
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <StartTask2+0x74>)
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff feb2 	bl	80020e6 <LCD_Put_Str>
		LCD_Set_Cursor(2, 5);
 8002382:	2105      	movs	r1, #5
 8002384:	2002      	movs	r0, #2
 8002386:	f7ff fe7f 	bl	8002088 <LCD_Set_Cursor>
		LCD_Put_Str(buffer_rpm);
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <StartTask2+0x78>)
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff feaa 	bl	80020e6 <LCD_Put_Str>
		vTaskDelay(6); //3
 8002392:	2006      	movs	r0, #6
 8002394:	f001 ff3e 	bl	8004214 <vTaskDelay>
		LCD_Set_Cursor(1, 1);
 8002398:	46c0      	nop			@ (mov r8, r8)
 800239a:	e7d2      	b.n	8002342 <StartTask2+0xe>
 800239c:	08006a18 	.word	0x08006a18
 80023a0:	2000008c 	.word	0x2000008c
 80023a4:	2000009c 	.word	0x2000009c
 80023a8:	08006a28 	.word	0x08006a28
 80023ac:	20000094 	.word	0x20000094

080023b0 <StartTask3>:
  }
}

void StartTask3(void *pvParameters) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

	vTaskDelay(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f001 ff2b 	bl	8004214 <vTaskDelay>
  /* Infinite loop */
  for(;;) {
	  printf("{adc: %u, button: %u}\n", val, button_status);
 80023be:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <StartTask3+0x2c>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	0019      	movs	r1, r3
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <StartTask3+0x30>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	001a      	movs	r2, r3
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <StartTask3+0x34>)
 80023cc:	0018      	movs	r0, r3
 80023ce:	f003 fbf9 	bl	8005bc4 <iprintf>
	  vTaskDelay(6); //1
 80023d2:	2006      	movs	r0, #6
 80023d4:	f001 ff1e 	bl	8004214 <vTaskDelay>
	  printf("{adc: %u, button: %u}\n", val, button_status);
 80023d8:	46c0      	nop			@ (mov r8, r8)
 80023da:	e7f0      	b.n	80023be <StartTask3+0xe>
 80023dc:	200000ae 	.word	0x200000ae
 80023e0:	200000ac 	.word	0x200000ac
 80023e4:	08006a34 	.word	0x08006a34

080023e8 <StartTask4>:
  }
}

void StartTask4(void *pvParameters) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
 vTaskDelay(5);
 80023f0:	2005      	movs	r0, #5
 80023f2:	f001 ff0f 	bl	8004214 <vTaskDelay>
  for(;;) {
	  //printf("Task4, enter \r\n");
	  if(velocity > 50 ){
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <StartTask4+0x5c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b32      	cmp	r3, #50	@ 0x32
 80023fc:	dd02      	ble.n	8002404 <StartTask4+0x1c>
	  		velocity = 50;
 80023fe:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <StartTask4+0x5c>)
 8002400:	2232      	movs	r2, #50	@ 0x32
 8002402:	601a      	str	r2, [r3, #0]
	  	}
	  		update_cycle(velocity,1);
 8002404:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <StartTask4+0x5c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2101      	movs	r1, #1
 800240c:	0018      	movs	r0, r3
 800240e:	f000 fbfd 	bl	8002c0c <update_cycle>
	  		update_cycle(velocity,2);
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <StartTask4+0x5c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2102      	movs	r1, #2
 800241a:	0018      	movs	r0, r3
 800241c:	f000 fbf6 	bl	8002c0c <update_cycle>
	  		update_cycle(velocity,3);
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <StartTask4+0x5c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2103      	movs	r1, #3
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fbef 	bl	8002c0c <update_cycle>
	  		update_cycle(velocity,4);
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <StartTask4+0x5c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2104      	movs	r1, #4
 8002436:	0018      	movs	r0, r3
 8002438:	f000 fbe8 	bl	8002c0c <update_cycle>
	  vTaskDelay(5); //1
 800243c:	2005      	movs	r0, #5
 800243e:	f001 fee9 	bl	8004214 <vTaskDelay>
	  if(velocity > 50 ){
 8002442:	e7d8      	b.n	80023f6 <StartTask4+0xe>
 8002444:	200000a4 	.word	0x200000a4

08002448 <System_init>:
  }
}

void System_init(void){
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	USER_RCC_Init();
 800244c:	f000 f8a8 	bl	80025a0 <USER_RCC_Init>
	USER_UART1_Init();
 8002450:	f000 fc58 	bl	8002d04 <USER_UART1_Init>
	USER_UART2_Init();
 8002454:	f000 fcc6 	bl	8002de4 <USER_UART2_Init>
	USER_GPIO_Init();
 8002458:	f000 f880 	bl	800255c <USER_GPIO_Init>
	USER_TIM14_Init();
 800245c:	f000 fb7a 	bl	8002b54 <USER_TIM14_Init>
	USER_TIM3_PWM_Init( );
 8002460:	f000 fa10 	bl	8002884 <USER_TIM3_PWM_Init>
	USER_ADC_Init();
 8002464:	f7ff fb18 	bl	8001a98 <USER_ADC_Init>
    LCD_Init();
 8002468:	f7ff fbf4 	bl	8001c54 <LCD_Init>
	LCD_Clear();
 800246c:	2001      	movs	r0, #1
 800246e:	f7ff fddf 	bl	8002030 <LCD_Write_Cmd>
}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <USART1_IRQHandler>:


void USART1_IRQHandler(void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
	if ((USART1->ISR & (0x1UL << 5U)))
 800247e:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <USART1_IRQHandler+0xc8>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2220      	movs	r2, #32
 8002484:	4013      	ands	r3, r2
 8002486:	d057      	beq.n	8002538 <USART1_IRQHandler+0xc0>
		{ // wait until a data is received (ISR register)
			char received = USART1->RDR;
 8002488:	4b2d      	ldr	r3, [pc, #180]	@ (8002540 <USART1_IRQHandler+0xc8>)
 800248a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	701a      	strb	r2, [r3, #0]
			if (received == 'V')
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b56      	cmp	r3, #86	@ 0x56
 8002496:	d114      	bne.n	80024c2 <USART1_IRQHandler+0x4a>
			{
				velocity = atoi(buffer_str);
 8002498:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <USART1_IRQHandler+0xcc>)
 800249a:	0018      	movs	r0, r3
 800249c:	f003 fa32 	bl	8005904 <atoi>
 80024a0:	0002      	movs	r2, r0
 80024a2:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <USART1_IRQHandler+0xd0>)
 80024a4:	601a      	str	r2, [r3, #0]
				memcpy(buffer_vel, buffer_str, sizeof(buffer_str));
 80024a6:	4b29      	ldr	r3, [pc, #164]	@ (800254c <USART1_IRQHandler+0xd4>)
 80024a8:	4a26      	ldr	r2, [pc, #152]	@ (8002544 <USART1_IRQHandler+0xcc>)
 80024aa:	ca03      	ldmia	r2!, {r0, r1}
 80024ac:	c303      	stmia	r3!, {r0, r1}
				memset(buffer_str, 0, sizeof(buffer_str));
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <USART1_IRQHandler+0xcc>)
 80024b0:	2208      	movs	r2, #8
 80024b2:	2100      	movs	r1, #0
 80024b4:	0018      	movs	r0, r3
 80024b6:	f003 fbe1 	bl	8005c7c <memset>
				index_k = 0;
 80024ba:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <USART1_IRQHandler+0xd8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
					memset(buffer_str, 0, sizeof(buffer_str));
					index_k = 0;
				}
			}
		}
}
 80024c0:	e03a      	b.n	8002538 <USART1_IRQHandler+0xc0>
			else if (received == 'S')
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b53      	cmp	r3, #83	@ 0x53
 80024c8:	d10d      	bne.n	80024e6 <USART1_IRQHandler+0x6e>
						memcpy(buffer_rpm, buffer_str, sizeof(buffer_str));
 80024ca:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <USART1_IRQHandler+0xdc>)
 80024cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <USART1_IRQHandler+0xcc>)
 80024ce:	ca03      	ldmia	r2!, {r0, r1}
 80024d0:	c303      	stmia	r3!, {r0, r1}
						memset(buffer_str, 0, sizeof(buffer_str));
 80024d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002544 <USART1_IRQHandler+0xcc>)
 80024d4:	2208      	movs	r2, #8
 80024d6:	2100      	movs	r1, #0
 80024d8:	0018      	movs	r0, r3
 80024da:	f003 fbcf 	bl	8005c7c <memset>
						index_k = 0;
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <USART1_IRQHandler+0xd8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
}
 80024e4:	e028      	b.n	8002538 <USART1_IRQHandler+0xc0>
			else if (received == 'E')
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b45      	cmp	r3, #69	@ 0x45
 80024ec:	d10d      	bne.n	800250a <USART1_IRQHandler+0x92>
								memcpy(buffer_gear, buffer_str, sizeof(buffer_str));
 80024ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <USART1_IRQHandler+0xe0>)
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <USART1_IRQHandler+0xcc>)
 80024f2:	ca03      	ldmia	r2!, {r0, r1}
 80024f4:	c303      	stmia	r3!, {r0, r1}
								memset(buffer_str, 0, sizeof(buffer_str));
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <USART1_IRQHandler+0xcc>)
 80024f8:	2208      	movs	r2, #8
 80024fa:	2100      	movs	r1, #0
 80024fc:	0018      	movs	r0, r3
 80024fe:	f003 fbbd 	bl	8005c7c <memset>
								index_k = 0;
 8002502:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <USART1_IRQHandler+0xd8>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	e016      	b.n	8002538 <USART1_IRQHandler+0xc0>
				if (index_k < BUFFER_SIZE - 1)
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <USART1_IRQHandler+0xd8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b06      	cmp	r3, #6
 8002510:	dc09      	bgt.n	8002526 <USART1_IRQHandler+0xae>
					buffer_str[index_k++] = received;
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <USART1_IRQHandler+0xd8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <USART1_IRQHandler+0xd8>)
 800251a:	6011      	str	r1, [r2, #0]
 800251c:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <USART1_IRQHandler+0xcc>)
 800251e:	1df9      	adds	r1, r7, #7
 8002520:	7809      	ldrb	r1, [r1, #0]
 8002522:	54d1      	strb	r1, [r2, r3]
}
 8002524:	e008      	b.n	8002538 <USART1_IRQHandler+0xc0>
					memset(buffer_str, 0, sizeof(buffer_str));
 8002526:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <USART1_IRQHandler+0xcc>)
 8002528:	2208      	movs	r2, #8
 800252a:	2100      	movs	r1, #0
 800252c:	0018      	movs	r0, r3
 800252e:	f003 fba5 	bl	8005c7c <memset>
					index_k = 0;
 8002532:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <USART1_IRQHandler+0xd8>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40013800 	.word	0x40013800
 8002544:	20000084 	.word	0x20000084
 8002548:	200000a4 	.word	0x200000a4
 800254c:	2000008c 	.word	0x2000008c
 8002550:	200000a8 	.word	0x200000a8
 8002554:	20000094 	.word	0x20000094
 8002558:	2000009c 	.word	0x2000009c

0800255c <USER_GPIO_Init>:

void USER_GPIO_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
//	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 10U);	// Clear pull-up/pull-down bits for PA5
//	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 5U); // Clear output type bit for PA5
//	GPIOA->MODER = GPIOA->MODER & ~(0x2UL << 10U);	// Set PA5 as output
//	GPIOA->MODER = GPIOA->MODER | (0x1UL << 10U);	// Set PA5 as output
	// PINA9 AS INPUT PULL DOWN
	GPIOA->MODER &= ~(0x3UL << 14U);
 8002560:	23a0      	movs	r3, #160	@ 0xa0
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	23a0      	movs	r3, #160	@ 0xa0
 8002568:	05db      	lsls	r3, r3, #23
 800256a:	490b      	ldr	r1, [pc, #44]	@ (8002598 <USER_GPIO_Init+0x3c>)
 800256c:	400a      	ands	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR &= ~(0x1UL << 14U);
 8002570:	23a0      	movs	r3, #160	@ 0xa0
 8002572:	05db      	lsls	r3, r3, #23
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	23a0      	movs	r3, #160	@ 0xa0
 8002578:	05db      	lsls	r3, r3, #23
 800257a:	4908      	ldr	r1, [pc, #32]	@ (800259c <USER_GPIO_Init+0x40>)
 800257c:	400a      	ands	r2, r1
 800257e:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (0x2UL << 14U);
 8002580:	23a0      	movs	r3, #160	@ 0xa0
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	23a0      	movs	r3, #160	@ 0xa0
 8002588:	05db      	lsls	r3, r3, #23
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	0209      	lsls	r1, r1, #8
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	ffff3fff 	.word	0xffff3fff
 800259c:	ffffbfff 	.word	0xffffbfff

080025a0 <USER_RCC_Init>:

void USER_RCC_Init( void ){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	/* System Clock (SYSCLK) configuration for 48 MHz */
	FLASH->ACR	&= ~( 0x6UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <USER_RCC_Init+0x68>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <USER_RCC_Init+0x68>)
 80025aa:	2106      	movs	r1, #6
 80025ac:	438a      	bics	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
	FLASH->ACR	|=  ( 0x1UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 80025b0:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <USER_RCC_Init+0x68>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <USER_RCC_Init+0x68>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
	while(( FLASH->ACR & ( 0x7UL <<  0U )) != 0x001UL );// wait until LATENCY[2:0]=001
 80025bc:	46c0      	nop			@ (mov r8, r8)
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <USER_RCC_Init+0x68>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2207      	movs	r2, #7
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d1f9      	bne.n	80025be <USER_RCC_Init+0x1e>
	RCC->CR		&= ~( 0x7UL << 11U );// select HSISYS division factor by 1
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <USER_RCC_Init+0x6c>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <USER_RCC_Init+0x6c>)
 80025d0:	490f      	ldr	r1, [pc, #60]	@ (8002610 <USER_RCC_Init+0x70>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
	while(!( RCC->CR & ( 0x1UL << 10U )));// wait until HSISYS is stable and ready
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <USER_RCC_Init+0x6c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4013      	ands	r3, r2
 80025e2:	d0f9      	beq.n	80025d8 <USER_RCC_Init+0x38>
	RCC->CFGR	&= ~( 0x7UL <<  0U );// select HSISYS as the SYSCLK clock source
 80025e4:	4b09      	ldr	r3, [pc, #36]	@ (800260c <USER_RCC_Init+0x6c>)
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <USER_RCC_Init+0x6c>)
 80025ea:	2107      	movs	r1, #7
 80025ec:	438a      	bics	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
	RCC->CFGR	&= ~( 0x1UL << 11U );// select HCLK division factor by 1
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <USER_RCC_Init+0x6c>)
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <USER_RCC_Init+0x6c>)
 80025f6:	4907      	ldr	r1, [pc, #28]	@ (8002614 <USER_RCC_Init+0x74>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
	SystemCoreClock = 48000000;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <USER_RCC_Init+0x78>)
 80025fe:	4a07      	ldr	r2, [pc, #28]	@ (800261c <USER_RCC_Init+0x7c>)
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40022000 	.word	0x40022000
 800260c:	40021000 	.word	0x40021000
 8002610:	ffffc7ff 	.word	0xffffc7ff
 8002614:	fffff7ff 	.word	0xfffff7ff
 8002618:	20000000 	.word	0x20000000
 800261c:	02dc6c00 	.word	0x02dc6c00

08002620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_MspInit+0x50>)
 8002628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_MspInit+0x50>)
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
 8002632:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_MspInit+0x50>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <HAL_MspInit+0x50>)
 8002640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_MspInit+0x50>)
 8002644:	2180      	movs	r1, #128	@ 0x80
 8002646:	0549      	lsls	r1, r1, #21
 8002648:	430a      	orrs	r2, r1
 800264a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800264c:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_MspInit+0x50>)
 800264e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	055b      	lsls	r3, r3, #21
 8002654:	4013      	ands	r3, r2
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800265a:	2302      	movs	r3, #2
 800265c:	425b      	negs	r3, r3
 800265e:	2200      	movs	r2, #0
 8002660:	2103      	movs	r1, #3
 8002662:	0018      	movs	r0, r3
 8002664:	f000 fd54 	bl	8003110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002668:	46c0      	nop			@ (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b002      	add	sp, #8
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	@ 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d843      	bhi.n	8002712 <HAL_InitTick+0x9e>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	0019      	movs	r1, r3
 8002690:	2016      	movs	r0, #22
 8002692:	f000 fd3d 	bl	8003110 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002696:	2016      	movs	r0, #22
 8002698:	f000 fd4f 	bl	800313a <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800269c:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_InitTick+0xb8>)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80026a2:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_InitTick+0xbc>)
 80026a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a6:	4b22      	ldr	r3, [pc, #136]	@ (8002730 <HAL_InitTick+0xbc>)
 80026a8:	2180      	movs	r1, #128	@ 0x80
 80026aa:	02c9      	lsls	r1, r1, #11
 80026ac:	430a      	orrs	r2, r1
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80026b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <HAL_InitTick+0xbc>)
 80026b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	02db      	lsls	r3, r3, #11
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026be:	2310      	movs	r3, #16
 80026c0:	18fa      	adds	r2, r7, r3
 80026c2:	2314      	movs	r3, #20
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	0011      	movs	r1, r2
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fdbd 	bl	8003248 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026ce:	f000 fda3 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 80026d2:	0003      	movs	r3, r0
 80026d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d8:	4916      	ldr	r1, [pc, #88]	@ (8002734 <HAL_InitTick+0xc0>)
 80026da:	0018      	movs	r0, r3
 80026dc:	f7fd fd1e 	bl	800011c <__udivsi3>
 80026e0:	0003      	movs	r3, r0
 80026e2:	3b01      	subs	r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80026e6:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <HAL_InitTick+0xc4>)
 80026e8:	4a14      	ldr	r2, [pc, #80]	@ (800273c <HAL_InitTick+0xc8>)
 80026ea:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_InitTick+0xc4>)
 80026ee:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <HAL_InitTick+0xcc>)
 80026f0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_InitTick+0xc4>)
 80026f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026f6:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <HAL_InitTick+0xc4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_InitTick+0xc4>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_InitTick+0xc4>)
 8002706:	0018      	movs	r0, r3
 8002708:	f000 fdcc 	bl	80032a4 <HAL_TIM_Base_Init>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d108      	bne.n	8002722 <HAL_InitTick+0xae>
 8002710:	e001      	b.n	8002716 <HAL_InitTick+0xa2>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e006      	b.n	8002724 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_InitTick+0xc4>)
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fe23 	bl	8003364 <HAL_TIM_Base_Start_IT>
 800271e:	0003      	movs	r3, r0
 8002720:	e000      	b.n	8002724 <HAL_InitTick+0xb0>
  }

  /* Return function status */
  return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b00c      	add	sp, #48	@ 0x30
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000004 	.word	0x20000004
 8002730:	40021000 	.word	0x40021000
 8002734:	000f4240 	.word	0x000f4240
 8002738:	200000c0 	.word	0x200000c0
 800273c:	40014800 	.word	0x40014800
 8002740:	000003e7 	.word	0x000003e7

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002748:	46c0      	nop			@ (mov r8, r8)
 800274a:	e7fd      	b.n	8002748 <NMI_Handler+0x4>

0800274c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	e7fd      	b.n	8002750 <HardFault_Handler+0x4>

08002754 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <TIM17_IRQHandler+0x14>)
 800275a:	0018      	movs	r0, r3
 800275c:	f000 fe50 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	200000c0 	.word	0x200000c0

0800276c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e00a      	b.n	8002794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800277e:	e000      	b.n	8002782 <_read+0x16>
 8002780:	bf00      	nop
 8002782:	0001      	movs	r1, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf0      	blt.n	800277e <_read+0x12>
  }

  return len;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b006      	add	sp, #24
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	425b      	negs	r3, r3
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b002      	add	sp, #8
 80027b8:	bd80      	pop	{r7, pc}

080027ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2280      	movs	r2, #128	@ 0x80
 80027c8:	0192      	lsls	r2, r2, #6
 80027ca:	605a      	str	r2, [r3, #4]
  return 0;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_isatty>:

int _isatty(int file)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <_sbrk+0x5c>)
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <_sbrk+0x60>)
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002814:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <_sbrk+0x64>)
 800281e:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <_sbrk+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	18d3      	adds	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d207      	bcs.n	8002840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002830:	f003 fae4 	bl	8005dfc <__errno>
 8002834:	0003      	movs	r3, r0
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283a:	2301      	movs	r3, #1
 800283c:	425b      	negs	r3, r3
 800283e:	e009      	b.n	8002854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002846:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	18d2      	adds	r2, r2, r3
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <_sbrk+0x64>)
 8002850:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b006      	add	sp, #24
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20003000 	.word	0x20003000
 8002860:	00000400 	.word	0x00000400
 8002864:	2000010c 	.word	0x2000010c
 8002868:	20001e38 	.word	0x20001e38

0800286c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002870:	4b03      	ldr	r3, [pc, #12]	@ (8002880 <SystemInit+0x14>)
 8002872:	2280      	movs	r2, #128	@ 0x80
 8002874:	0512      	lsls	r2, r2, #20
 8002876:	609a      	str	r2, [r3, #8]
#endif
}
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <USER_TIM3_PWM_Init>:
#include <stdint.h>
#include "main.h"
#include "user_tim.h"

void USER_TIM3_PWM_Init( void ){
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	/* STEP 0. Enable the clock signal for the TIM3 and GPIOB peripherals */
	RCC->IOPENR		|=  ( 0x1UL <<  1U );
 8002888:	4ba3      	ldr	r3, [pc, #652]	@ (8002b18 <USER_TIM3_PWM_Init+0x294>)
 800288a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800288c:	4ba2      	ldr	r3, [pc, #648]	@ (8002b18 <USER_TIM3_PWM_Init+0x294>)
 800288e:	2102      	movs	r1, #2
 8002890:	430a      	orrs	r2, r1
 8002892:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC->APBENR1	|=  ( 0x1UL <<  1U );
 8002894:	4ba0      	ldr	r3, [pc, #640]	@ (8002b18 <USER_TIM3_PWM_Init+0x294>)
 8002896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002898:	4b9f      	ldr	r3, [pc, #636]	@ (8002b18 <USER_TIM3_PWM_Init+0x294>)
 800289a:	2102      	movs	r1, #2
 800289c:	430a      	orrs	r2, r1
 800289e:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* STEP 0. Configure TIM3_CH1 (PB4) to output the PWM signal */
	GPIOB->AFR[0]		&= ~( 0xEUL << 16U );
 80028a0:	4b9e      	ldr	r3, [pc, #632]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028a6:	499e      	ldr	r1, [pc, #632]	@ (8002b20 <USER_TIM3_PWM_Init+0x29c>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0]		|=  ( 0x1UL << 16U );
 80028ac:	4b9b      	ldr	r3, [pc, #620]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	4b9a      	ldr	r3, [pc, #616]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028b2:	2180      	movs	r1, #128	@ 0x80
 80028b4:	0249      	lsls	r1, r1, #9
 80028b6:	430a      	orrs	r2, r1
 80028b8:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~( 0x3UL <<  8U );
 80028ba:	4b98      	ldr	r3, [pc, #608]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	4b97      	ldr	r3, [pc, #604]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028c0:	4998      	ldr	r1, [pc, #608]	@ (8002b24 <USER_TIM3_PWM_Init+0x2a0>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~( 0x1UL <<  4U );
 80028c6:	4b95      	ldr	r3, [pc, #596]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4b94      	ldr	r3, [pc, #592]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028cc:	2110      	movs	r1, #16
 80028ce:	438a      	bics	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x1UL <<  8U );
 80028d2:	4b92      	ldr	r3, [pc, #584]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b91      	ldr	r3, [pc, #580]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028d8:	4993      	ldr	r1, [pc, #588]	@ (8002b28 <USER_TIM3_PWM_Init+0x2a4>)
 80028da:	400a      	ands	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x2UL <<  8U );
 80028de:	4b8f      	ldr	r3, [pc, #572]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b8e      	ldr	r3, [pc, #568]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028e4:	2180      	movs	r1, #128	@ 0x80
 80028e6:	0089      	lsls	r1, r1, #2
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
	/* STEP 0. Configure TIM3_CH1 (PB5) to output the PWM signal */
	GPIOB->AFR[0]		&= ~( 0xEUL << 20U );
 80028ec:	4b8b      	ldr	r3, [pc, #556]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	4b8a      	ldr	r3, [pc, #552]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028f2:	498e      	ldr	r1, [pc, #568]	@ (8002b2c <USER_TIM3_PWM_Init+0x2a8>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0]		|=  ( 0x1UL << 20U );
 80028f8:	4b88      	ldr	r3, [pc, #544]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028fa:	6a1a      	ldr	r2, [r3, #32]
 80028fc:	4b87      	ldr	r3, [pc, #540]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	0349      	lsls	r1, r1, #13
 8002902:	430a      	orrs	r2, r1
 8002904:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~( 0x3UL <<  10U );
 8002906:	4b85      	ldr	r3, [pc, #532]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	4b84      	ldr	r3, [pc, #528]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800290c:	4988      	ldr	r1, [pc, #544]	@ (8002b30 <USER_TIM3_PWM_Init+0x2ac>)
 800290e:	400a      	ands	r2, r1
 8002910:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~( 0x1UL <<  5U );
 8002912:	4b82      	ldr	r3, [pc, #520]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4b81      	ldr	r3, [pc, #516]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002918:	2120      	movs	r1, #32
 800291a:	438a      	bics	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x1UL <<  10U );
 800291e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b7e      	ldr	r3, [pc, #504]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002924:	4983      	ldr	r1, [pc, #524]	@ (8002b34 <USER_TIM3_PWM_Init+0x2b0>)
 8002926:	400a      	ands	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x2UL <<  10U );
 800292a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	0109      	lsls	r1, r1, #4
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

	GPIOB->AFR[0]		&= ~( 0xEUL << 0U );
 8002938:	4b78      	ldr	r3, [pc, #480]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800293a:	6a1a      	ldr	r2, [r3, #32]
 800293c:	4b77      	ldr	r3, [pc, #476]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800293e:	210e      	movs	r1, #14
 8002940:	438a      	bics	r2, r1
 8002942:	621a      	str	r2, [r3, #32]
		GPIOB->AFR[0]		|=  ( 0x1UL << 0U );
 8002944:	4b75      	ldr	r3, [pc, #468]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	4b74      	ldr	r3, [pc, #464]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800294a:	2101      	movs	r1, #1
 800294c:	430a      	orrs	r2, r1
 800294e:	621a      	str	r2, [r3, #32]
		GPIOB->PUPDR  &= ~( 0x3UL <<  0U );
 8002950:	4b72      	ldr	r3, [pc, #456]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4b71      	ldr	r3, [pc, #452]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002956:	2103      	movs	r1, #3
 8002958:	438a      	bics	r2, r1
 800295a:	60da      	str	r2, [r3, #12]
		GPIOB->OTYPER	&= ~( 0x1UL <<  0U );
 800295c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4b6e      	ldr	r3, [pc, #440]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002962:	2101      	movs	r1, #1
 8002964:	438a      	bics	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
		GPIOB->MODER  &= ~( 0x1UL <<  0U );
 8002968:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800296e:	2101      	movs	r1, #1
 8002970:	438a      	bics	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
		GPIOB->MODER  |=  ( 0x2UL <<  0U );
 8002974:	4b69      	ldr	r3, [pc, #420]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800297a:	2102      	movs	r1, #2
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

		GPIOB->AFR[0]		&= ~( 0xEUL << 4U );
 8002980:	4b66      	ldr	r3, [pc, #408]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002986:	21e0      	movs	r1, #224	@ 0xe0
 8002988:	438a      	bics	r2, r1
 800298a:	621a      	str	r2, [r3, #32]
			GPIOB->AFR[0]		|=  ( 0x1UL << 4U );
 800298c:	4b63      	ldr	r3, [pc, #396]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	4b62      	ldr	r3, [pc, #392]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 8002992:	2110      	movs	r1, #16
 8002994:	430a      	orrs	r2, r1
 8002996:	621a      	str	r2, [r3, #32]
			GPIOB->PUPDR  &= ~( 0x3UL <<  2U );
 8002998:	4b60      	ldr	r3, [pc, #384]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	4b5f      	ldr	r3, [pc, #380]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 800299e:	210c      	movs	r1, #12
 80029a0:	438a      	bics	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]
			GPIOB->OTYPER	&= ~( 0x1UL <<  1U );
 80029a4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4b5c      	ldr	r3, [pc, #368]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80029aa:	2102      	movs	r1, #2
 80029ac:	438a      	bics	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
			GPIOB->MODER  &= ~( 0x1UL <<  2U );
 80029b0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80029b6:	2104      	movs	r1, #4
 80029b8:	438a      	bics	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]
			GPIOB->MODER  |=  ( 0x2UL <<  2U );
 80029bc:	4b57      	ldr	r3, [pc, #348]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b56      	ldr	r3, [pc, #344]	@ (8002b1c <USER_TIM3_PWM_Init+0x298>)
 80029c2:	2108      	movs	r1, #8
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

	/* STEP 1. Configure the clock source (internal) */
	TIM3->SMCR		&= ~( 0x1UL << 16U )
 80029c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029ce:	495b      	ldr	r1, [pc, #364]	@ (8002b3c <USER_TIM3_PWM_Init+0x2b8>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
								&  ~( 0x7UL <<  0U );//		Prescaler is clocked directed by the internal clock

	/* STEP 2. Configure the counter mode, the auto-reload and the overflow UEV-event  */
	TIM3->CR1			&= ~( 0x3UL <<  5U ) //		Selects edge-aligned mode
 80029d4:	4b58      	ldr	r3, [pc, #352]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b57      	ldr	r3, [pc, #348]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029da:	2176      	movs	r1, #118	@ 0x76
 80029dc:	438a      	bics	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
								&  ~( 0x1UL <<  4U ) //		Counter used as upcounter
								&  ~( 0x1UL <<  2U ) //		UEV can be generated by software
								&  ~( 0x1UL <<  1U );//		Update Event (UEV) enabled
	TIM3->CR1			|=  ( 0x1UL <<  7U );//		Auto-reload register is buffered
 80029e0:	4b55      	ldr	r3, [pc, #340]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b54      	ldr	r3, [pc, #336]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029e6:	2180      	movs	r1, #128	@ 0x80
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

	/* STEP 3. Configure the prescaler, the period and the duty cycle register values */
	TIM3->PSC			 = 0U;
 80029ec:	4b52      	ldr	r3, [pc, #328]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR			 = 47999U;//	for 1 KHz frequency
 80029f2:	4b51      	ldr	r3, [pc, #324]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 80029f4:	4a52      	ldr	r2, [pc, #328]	@ (8002b40 <USER_TIM3_PWM_Init+0x2bc>)
 80029f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	///////////////////////////////////////////////////////////////////////
	TIM3->CCR1		 = USER_Duty_Cycle( 0 );//	for 25% of duty cycle
 80029f8:	2000      	movs	r0, #0
 80029fa:	f000 f94d 	bl	8002c98 <USER_Duty_Cycle>
 80029fe:	0003      	movs	r3, r0
 8002a00:	001a      	movs	r2, r3
 8002a02:	4b4d      	ldr	r3, [pc, #308]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2		 = USER_Duty_Cycle( 0 );//	for 25% of duty cycle
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f946 	bl	8002c98 <USER_Duty_Cycle>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	001a      	movs	r2, r3
 8002a10:	4b49      	ldr	r3, [pc, #292]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a12:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3		 = USER_Duty_Cycle( 0 );//	for 25% of duty cycle
 8002a14:	2000      	movs	r0, #0
 8002a16:	f000 f93f 	bl	8002c98 <USER_Duty_Cycle>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	4b46      	ldr	r3, [pc, #280]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a20:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4		 = USER_Duty_Cycle( 0 );//	for 25% of duty cycle
 8002a22:	2000      	movs	r0, #0
 8002a24:	f000 f938 	bl	8002c98 <USER_Duty_Cycle>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	4b42      	ldr	r3, [pc, #264]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40

	///////////////////////////////////////////////////////////////////////
	/* STEP 4. Configure the PWM mode, the compare register load and channel direction */
	TIM3->CCMR1		&= ~( 0x1UL << 16U )
 8002a30:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	4b40      	ldr	r3, [pc, #256]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a36:	4943      	ldr	r1, [pc, #268]	@ (8002b44 <USER_TIM3_PWM_Init+0x2c0>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	619a      	str	r2, [r3, #24]
								&  ~( 0x1UL <<  4U ) //		Selects PWM 1 mode
								&  ~( 0x3UL <<  0U );//		Selects CH1 as output

 	TIM3->CCMR1		|=  ( 0x6UL <<  4U ) //		Selects PWM 1 mode
 8002a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a42:	2168      	movs	r1, #104	@ 0x68
 8002a44:	430a      	orrs	r2, r1
 8002a46:	619a      	str	r2, [r3, #24]
								|   ( 0x1UL <<  3U );//		CCR1 loads on the UEV event

 	///////////////////////////////////////////////////////////////////////

 	TIM3->CCMR1		&= ~( 0x1UL << 24U )
 8002a48:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a4e:	493e      	ldr	r1, [pc, #248]	@ (8002b48 <USER_TIM3_PWM_Init+0x2c4>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	619a      	str	r2, [r3, #24]
 									&  ~( 0x1UL <<  12U ) //		Selects PWM 1 mode
 									&  ~( 0x3UL <<  8U );//		Selects CH1 as output

 	 TIM3->CCMR1		|=  ( 0x6UL <<  12U ) //		Selects PWM 1 mode
 8002a54:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	4b37      	ldr	r3, [pc, #220]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a5a:	21d0      	movs	r1, #208	@ 0xd0
 8002a5c:	01c9      	lsls	r1, r1, #7
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	619a      	str	r2, [r3, #24]
 	///////////////////////////////////////////////////////////////////////


 	///////////////////////////////////////////////////////////////////////
 	/* STEP 4. Configure the PWM mode, the compare register load and channel direction */
 	TIM3->CCMR2		&= ~( 0x1UL << 16U )
 8002a62:	4b35      	ldr	r3, [pc, #212]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a68:	4936      	ldr	r1, [pc, #216]	@ (8002b44 <USER_TIM3_PWM_Init+0x2c0>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	61da      	str	r2, [r3, #28]
 								&  ~( 0x1UL <<  4U ) //		Selects PWM 1 mode
 								&  ~( 0x3UL <<  0U );//		Selects CH1 as output

  	TIM3->CCMR2		|=  ( 0x6UL <<  4U ) //		Selects PWM 1 mode
 8002a6e:	4b32      	ldr	r3, [pc, #200]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	4b31      	ldr	r3, [pc, #196]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a74:	2168      	movs	r1, #104	@ 0x68
 8002a76:	430a      	orrs	r2, r1
 8002a78:	61da      	str	r2, [r3, #28]
 								|   ( 0x1UL <<  3U );//		CCR1 loads on the UEV event

  	///////////////////////////////////////////////////////////////////////

  	TIM3->CCMR2		&= ~( 0x1UL << 24U )
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a80:	4931      	ldr	r1, [pc, #196]	@ (8002b48 <USER_TIM3_PWM_Init+0x2c4>)
 8002a82:	400a      	ands	r2, r1
 8002a84:	61da      	str	r2, [r3, #28]
  									&  ~( 0x1UL <<  12U ) //		Selects PWM 1 mode
  									&  ~( 0x3UL <<  8U );//		Selects CH1 as output

  	 TIM3->CCMR2		|=  ( 0x6UL <<  12U ) //		Selects PWM 1 mode
 8002a86:	4b2c      	ldr	r3, [pc, #176]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a8c:	21d0      	movs	r1, #208	@ 0xd0
 8002a8e:	01c9      	lsls	r1, r1, #7
 8002a90:	430a      	orrs	r2, r1
 8002a92:	61da      	str	r2, [r3, #28]
  	///////////////////////////////////////////////////////////////////////



	/* STEP 5. Generate the UEV-event to load the registers */
	TIM3->EGR			|=  ( 0x1UL <<  0U );
 8002a94:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	615a      	str	r2, [r3, #20]

	///////////////////////////////////////////////////////////////////////
	/* STEP 6. Enable the PWM signal output and set the polarity */
	TIM3->CCER		&= ~( 0x1UL <<  3U ) //		for output mode, this bit must be cleared
 8002aa0:	4b25      	ldr	r3, [pc, #148]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002aa6:	210a      	movs	r1, #10
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	621a      	str	r2, [r3, #32]
								&  ~( 0x1UL <<  1U );//		OC1 active high
	TIM3->CCER		|=  ( 0x1UL <<  0U );//		OC1 signal is output on the corresponding pin
 8002aac:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	4b21      	ldr	r3, [pc, #132]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	621a      	str	r2, [r3, #32]
	///////////////////////////////////////////////////////////////////////
	TIM3->CCER		&= ~( 0x1UL <<  7U ) //		for output mode, this bit must be cleared
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002abe:	21a0      	movs	r1, #160	@ 0xa0
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	621a      	str	r2, [r3, #32]
								&  ~( 0x1UL <<  5U );//		OC1 active high
	TIM3->CCER		|=  ( 0x1UL <<  4U );//		OC1 signal is output on the corresponding pin
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002aca:	2110      	movs	r1, #16
 8002acc:	430a      	orrs	r2, r1
 8002ace:	621a      	str	r2, [r3, #32]
	///////////////////////////////////////////////////////////////////////
	TIM3->CCER		&= ~( 0x1UL <<  11U ) //		for output mode, this bit must be cleared
 8002ad0:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002ad2:	6a1a      	ldr	r2, [r3, #32]
 8002ad4:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002ad6:	491d      	ldr	r1, [pc, #116]	@ (8002b4c <USER_TIM3_PWM_Init+0x2c8>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	621a      	str	r2, [r3, #32]
									&  ~( 0x1UL <<  9U );//		OC1 active high
	TIM3->CCER		|=  ( 0x1UL <<  8U );//		OC1 signal is output on the corresponding pin
 8002adc:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002ae2:	2180      	movs	r1, #128	@ 0x80
 8002ae4:	0049      	lsls	r1, r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	621a      	str	r2, [r3, #32]
	///////////////////////////////////////////////////////////////////////
	TIM3->CCER		&= ~( 0x1UL <<  15U ) //		for output mode, this bit must be cleared
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002af0:	4917      	ldr	r1, [pc, #92]	@ (8002b50 <USER_TIM3_PWM_Init+0x2cc>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	621a      	str	r2, [r3, #32]
										&  ~( 0x1UL <<  13U );//		OC1 active high
	TIM3->CCER		|=  ( 0x1UL <<  12U );//		OC1 signal is output on the corresponding pin
 8002af6:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002afc:	2180      	movs	r1, #128	@ 0x80
 8002afe:	0149      	lsls	r1, r1, #5
 8002b00:	430a      	orrs	r2, r1
 8002b02:	621a      	str	r2, [r3, #32]
	///////////////////////////////////////////////////////////////////////

	/* STEP 7. Enable the Timer to start counting */
	TIM3->CR1			|=  ( 0x1UL <<  0U );
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <USER_TIM3_PWM_Init+0x2b4>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	46c0      	nop			@ (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	50000400 	.word	0x50000400
 8002b20:	fff1ffff 	.word	0xfff1ffff
 8002b24:	fffffcff 	.word	0xfffffcff
 8002b28:	fffffeff 	.word	0xfffffeff
 8002b2c:	ff1fffff 	.word	0xff1fffff
 8002b30:	fffff3ff 	.word	0xfffff3ff
 8002b34:	fffffbff 	.word	0xfffffbff
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	fffefff8 	.word	0xfffefff8
 8002b40:	0000bb7f 	.word	0x0000bb7f
 8002b44:	fffeffec 	.word	0xfffeffec
 8002b48:	feffecff 	.word	0xfeffecff
 8002b4c:	fffff5ff 	.word	0xfffff5ff
 8002b50:	ffff5fff 	.word	0xffff5fff

08002b54 <USER_TIM14_Init>:

void USER_TIM14_Init(void) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	RCC->APBENR2 |=  (0x1UL <<  15U);
 8002b58:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <USER_TIM14_Init+0x30>)
 8002b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b5c:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <USER_TIM14_Init+0x30>)
 8002b5e:	2180      	movs	r1, #128	@ 0x80
 8002b60:	0209      	lsls	r1, r1, #8
 8002b62:	430a      	orrs	r2, r1
 8002b64:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM14->SMCR	 &= ~( 0x1UL << 16U)
 8002b66:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <USER_TIM14_Init+0x34>)
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <USER_TIM14_Init+0x34>)
 8002b6c:	4907      	ldr	r1, [pc, #28]	@ (8002b8c <USER_TIM14_Init+0x38>)
 8002b6e:	400a      	ands	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
				 &  ~( 0x7UL << 0U);
	TIM14->CR1	 &= ~( 0x1UL << 7U)
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <USER_TIM14_Init+0x34>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <USER_TIM14_Init+0x34>)
 8002b78:	21f2      	movs	r1, #242	@ 0xf2
 8002b7a:	438a      	bics	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
				 &  ~( 0x3UL << 5U)
				 &  ~( 0x1UL << 4U)
				 &  ~( 0x1UL << 1U);
}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40002000 	.word	0x40002000
 8002b8c:	fffefff8 	.word	0xfffefff8

08002b90 <USER_TIM14_Delay>:

void USER_TIM14_Delay(uint16_t us) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	0002      	movs	r2, r0
 8002b98:	1dbb      	adds	r3, r7, #6
 8002b9a:	801a      	strh	r2, [r3, #0]
    TIM14->CR1 &= ~(1UL << 0);           // Deshabilita el timer
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

    TIM14->PSC = 47;                     // Prescaler: (48 MHz / (47+1)) = 1 MHz → 1 tick = 1 µs
 8002ba8:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002baa:	222f      	movs	r2, #47	@ 0x2f
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM14->ARR = us;                     // Número de microsegundos a esperar
 8002bae:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bb0:	1dba      	adds	r2, r7, #6
 8002bb2:	8812      	ldrh	r2, [r2, #0]
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM14->EGR |= (1UL << 0);            // Generar evento de actualización
 8002bb6:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	615a      	str	r2, [r3, #20]
    TIM14->SR &= ~(1UL << 0);            // Limpia bandera de actualización
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	438a      	bics	r2, r1
 8002bcc:	611a      	str	r2, [r3, #16]
    TIM14->CR1 |= (1UL << 0);            // Habilita el timer
 8002bce:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

    while (!(TIM14->SR & (1UL << 0)));   // Espera a que llegue el overflow
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	d0fa      	beq.n	8002bdc <USER_TIM14_Delay+0x4c>

    TIM14->CR1 &= ~(1UL << 0);           // Deshabilita el timer
 8002be6:	4b08      	ldr	r3, [pc, #32]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	438a      	bics	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
    TIM14->SR &= ~(1UL << 0);            // Limpia bandera nuevamente
 8002bf2:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <USER_TIM14_Delay+0x78>)
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	438a      	bics	r2, r1
 8002bfc:	611a      	str	r2, [r3, #16]
}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b002      	add	sp, #8
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	40002000 	.word	0x40002000

08002c0c <update_cycle>:
    TIM17->SR   &=  ~( 0x1UL <<  0U );//   clear TIM overflow-event flag
    TIM17->CR1  |=   ( 0x1UL <<  0U );//   timer enabled
}


void update_cycle(uint8_t duty, uint8_t pin){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	0002      	movs	r2, r0
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	1dbb      	adds	r3, r7, #6
 8002c1a:	1c0a      	adds	r2, r1, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
	switch(pin){
 8002c1e:	1dbb      	adds	r3, r7, #6
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d026      	beq.n	8002c74 <update_cycle+0x68>
 8002c26:	dc2f      	bgt.n	8002c88 <update_cycle+0x7c>
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d019      	beq.n	8002c60 <update_cycle+0x54>
 8002c2c:	dc2c      	bgt.n	8002c88 <update_cycle+0x7c>
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d002      	beq.n	8002c38 <update_cycle+0x2c>
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d00a      	beq.n	8002c4c <update_cycle+0x40>
		break;
	case 4:
			TIM3->CCR4		 = USER_Duty_Cycle( duty );//	for 25% of duty cycle
			break;
	default:
	            break;
 8002c36:	e027      	b.n	8002c88 <update_cycle+0x7c>
		TIM3->CCR1		 = USER_Duty_Cycle( duty );//	for 25% of duty cycle
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f82b 	bl	8002c98 <USER_Duty_Cycle>
 8002c42:	0003      	movs	r3, r0
 8002c44:	001a      	movs	r2, r3
 8002c46:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <update_cycle+0x88>)
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8002c4a:	e01e      	b.n	8002c8a <update_cycle+0x7e>
		TIM3->CCR2		 = USER_Duty_Cycle( duty );//	for 25% of duty cycle
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 f821 	bl	8002c98 <USER_Duty_Cycle>
 8002c56:	0003      	movs	r3, r0
 8002c58:	001a      	movs	r2, r3
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <update_cycle+0x88>)
 8002c5c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8002c5e:	e014      	b.n	8002c8a <update_cycle+0x7e>
		TIM3->CCR3		 = USER_Duty_Cycle( duty );//	for 25% of duty cycle
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f817 	bl	8002c98 <USER_Duty_Cycle>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <update_cycle+0x88>)
 8002c70:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8002c72:	e00a      	b.n	8002c8a <update_cycle+0x7e>
			TIM3->CCR4		 = USER_Duty_Cycle( duty );//	for 25% of duty cycle
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f80d 	bl	8002c98 <USER_Duty_Cycle>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	001a      	movs	r2, r3
 8002c82:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <update_cycle+0x88>)
 8002c84:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8002c86:	e000      	b.n	8002c8a <update_cycle+0x7e>
	            break;
 8002c88:	46c0      	nop			@ (mov r8, r8)

	}
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	40000400 	.word	0x40000400

08002c98 <USER_Duty_Cycle>:

uint16_t USER_Duty_Cycle( uint8_t duty ){
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	701a      	strb	r2, [r3, #0]
	/* duty can be a value between 0% and 100% */
	if( duty <= 100 )
 8002ca4:	1dfb      	adds	r3, r7, #7
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b64      	cmp	r3, #100	@ 0x64
 8002caa:	d821      	bhi.n	8002cf0 <USER_Duty_Cycle+0x58>
		return (( duty / 100.0 )*( TIM3->ARR + 1));
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fe fd21 	bl	80016f8 <__aeabi_i2d>
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <USER_Duty_Cycle+0x64>)
 8002cba:	f7fd fad9 	bl	8000270 <__aeabi_ddiv>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	000b      	movs	r3, r1
 8002cc2:	0014      	movs	r4, r2
 8002cc4:	001d      	movs	r5, r3
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <USER_Duty_Cycle+0x68>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	3301      	adds	r3, #1
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7fe fd41 	bl	8001754 <__aeabi_ui2d>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	000b      	movs	r3, r1
 8002cd6:	0020      	movs	r0, r4
 8002cd8:	0029      	movs	r1, r5
 8002cda:	f7fd fde1 	bl	80008a0 <__aeabi_dmul>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	000b      	movs	r3, r1
 8002ce2:	0010      	movs	r0, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	f7fd faa5 	bl	8000234 <__aeabi_d2uiz>
 8002cea:	0003      	movs	r3, r0
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	e000      	b.n	8002cf2 <USER_Duty_Cycle+0x5a>
	else
		return 0;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	40590000 	.word	0x40590000
 8002d00:	40000400 	.word	0x40000400

08002d04 <USER_UART1_Init>:
#include "main.h"
#include "user_uart.h"



void USER_UART1_Init(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
    // Activar reloj de GPIOA y USART1
    RCC->IOPENR  |= (0x1UL << 0U);
 8002d08:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <USER_UART1_Init+0xbc>)
 8002d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc0 <USER_UART1_Init+0xbc>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	430a      	orrs	r2, r1
 8002d12:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (0x1UL << 14U);
 8002d14:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc0 <USER_UART1_Init+0xbc>)
 8002d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d18:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <USER_UART1_Init+0xbc>)
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	01c9      	lsls	r1, r1, #7
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* STEP 0. Configure the TX pin (PA9) as Alternate Function Push-Pull */
    GPIOA->AFR[1] &= ~((0xF << 4) | (0xF << 8));
 8002d22:	23a0      	movs	r3, #160	@ 0xa0
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d28:	23a0      	movs	r3, #160	@ 0xa0
 8002d2a:	05db      	lsls	r3, r3, #23
 8002d2c:	4925      	ldr	r1, [pc, #148]	@ (8002dc4 <USER_UART1_Init+0xc0>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->AFR[1] |=  (0x1 << 4) | (0x1 << 8);
 8002d32:	23a0      	movs	r3, #160	@ 0xa0
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d38:	23a0      	movs	r3, #160	@ 0xa0
 8002d3a:	05db      	lsls	r3, r3, #23
 8002d3c:	2188      	movs	r1, #136	@ 0x88
 8002d3e:	0049      	lsls	r1, r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->PUPDR &= ~((0x3 << 18) | (0x3 << 20));
 8002d44:	23a0      	movs	r3, #160	@ 0xa0
 8002d46:	05db      	lsls	r3, r3, #23
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	23a0      	movs	r3, #160	@ 0xa0
 8002d4c:	05db      	lsls	r3, r3, #23
 8002d4e:	491e      	ldr	r1, [pc, #120]	@ (8002dc8 <USER_UART1_Init+0xc4>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]
    GPIOA->OTYPER &= ~((1 << 9) | (1 << 10));
 8002d54:	23a0      	movs	r3, #160	@ 0xa0
 8002d56:	05db      	lsls	r3, r3, #23
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	23a0      	movs	r3, #160	@ 0xa0
 8002d5c:	05db      	lsls	r3, r3, #23
 8002d5e:	491b      	ldr	r1, [pc, #108]	@ (8002dcc <USER_UART1_Init+0xc8>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
    GPIOA->MODER &= ~((0x3 << 18) | (0x3 << 20));
 8002d64:	23a0      	movs	r3, #160	@ 0xa0
 8002d66:	05db      	lsls	r3, r3, #23
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	23a0      	movs	r3, #160	@ 0xa0
 8002d6c:	05db      	lsls	r3, r3, #23
 8002d6e:	4916      	ldr	r1, [pc, #88]	@ (8002dc8 <USER_UART1_Init+0xc4>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  (0x2 << 18) | (0x2 << 20);
 8002d74:	23a0      	movs	r3, #160	@ 0xa0
 8002d76:	05db      	lsls	r3, r3, #23
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	23a0      	movs	r3, #160	@ 0xa0
 8002d7c:	05db      	lsls	r3, r3, #23
 8002d7e:	21a0      	movs	r1, #160	@ 0xa0
 8002d80:	0389      	lsls	r1, r1, #14
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

    // Configuración USART1: 8 bits, 1 stop bit, baudrate
    USART1->CR1 &= ~((1 << 28) | (1 << 12));
 8002d86:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <USER_UART1_Init+0xcc>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <USER_UART1_Init+0xcc>)
 8002d8c:	4911      	ldr	r1, [pc, #68]	@ (8002dd4 <USER_UART1_Init+0xd0>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
    USART1->CR2 &= ~(0x3 << 12);
 8002d92:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <USER_UART1_Init+0xcc>)
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <USER_UART1_Init+0xcc>)
 8002d98:	490f      	ldr	r1, [pc, #60]	@ (8002dd8 <USER_UART1_Init+0xd4>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
    USART1->BRR  = 5000;  // Para 9600 baudios @ 48 MHz
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <USER_UART1_Init+0xcc>)
 8002da0:	4a0e      	ldr	r2, [pc, #56]	@ (8002ddc <USER_UART1_Init+0xd8>)
 8002da2:	60da      	str	r2, [r3, #12]

    // Habilitar USART, transmisión y recepción
    USART1->CR1 |= (1 << 0) | (1 << 2) | (1 << 3) | (1 << 5);
 8002da4:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <USER_UART1_Init+0xcc>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <USER_UART1_Init+0xcc>)
 8002daa:	212d      	movs	r1, #45	@ 0x2d
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

    NVIC->ISER[0] = (1UL << 27); // interrupcion
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <USER_UART1_Init+0xdc>)
 8002db2:	2280      	movs	r2, #128	@ 0x80
 8002db4:	0512      	lsls	r2, r2, #20
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	fffff00f 	.word	0xfffff00f
 8002dc8:	ffc3ffff 	.word	0xffc3ffff
 8002dcc:	fffff9ff 	.word	0xfffff9ff
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	efffefff 	.word	0xefffefff
 8002dd8:	ffffcfff 	.word	0xffffcfff
 8002ddc:	00001388 	.word	0x00001388
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <USER_UART2_Init>:


void USER_UART2_Init( void ){
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  RCC->IOPENR   |=  ( 0x1UL <<  0U ); // GPIOA clock enabled
 8002de8:	4b4c      	ldr	r3, [pc, #304]	@ (8002f1c <USER_UART2_Init+0x138>)
 8002dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dec:	4b4b      	ldr	r3, [pc, #300]	@ (8002f1c <USER_UART2_Init+0x138>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	430a      	orrs	r2, r1
 8002df2:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->APBENR1  |=  ( 0x1UL << 17U ); // USART2 clock enabled
 8002df4:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <USER_UART2_Init+0x138>)
 8002df6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df8:	4b48      	ldr	r3, [pc, #288]	@ (8002f1c <USER_UART2_Init+0x138>)
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	0289      	lsls	r1, r1, #10
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	63da      	str	r2, [r3, #60]	@ 0x3c
  GPIOA->AFR[0]   &= ~( 0xEUL <<  8U );
 8002e02:	23a0      	movs	r3, #160	@ 0xa0
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	23a0      	movs	r3, #160	@ 0xa0
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	4944      	ldr	r1, [pc, #272]	@ (8002f20 <USER_UART2_Init+0x13c>)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	621a      	str	r2, [r3, #32]
  GPIOA->AFR[0]   |=  ( 0x1UL <<  8U ); // Select the AF1 for the PA2
 8002e12:	23a0      	movs	r3, #160	@ 0xa0
 8002e14:	05db      	lsls	r3, r3, #23
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	23a0      	movs	r3, #160	@ 0xa0
 8002e1a:	05db      	lsls	r3, r3, #23
 8002e1c:	2180      	movs	r1, #128	@ 0x80
 8002e1e:	0049      	lsls	r1, r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	621a      	str	r2, [r3, #32]
  GPIOA->PUPDR  &= ~( 0x3UL <<  4U ); // Clear pull-up/pull-down bits for PA2
 8002e24:	23a0      	movs	r3, #160	@ 0xa0
 8002e26:	05db      	lsls	r3, r3, #23
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	23a0      	movs	r3, #160	@ 0xa0
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	2130      	movs	r1, #48	@ 0x30
 8002e30:	438a      	bics	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~( 0x1UL <<  2U ); // Clear output type bit for PA2
 8002e34:	23a0      	movs	r3, #160	@ 0xa0
 8002e36:	05db      	lsls	r3, r3, #23
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	23a0      	movs	r3, #160	@ 0xa0
 8002e3c:	05db      	lsls	r3, r3, #23
 8002e3e:	2104      	movs	r1, #4
 8002e40:	438a      	bics	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  GPIOA->MODER  &= ~( 0x1UL <<  4U );
 8002e44:	23a0      	movs	r3, #160	@ 0xa0
 8002e46:	05db      	lsls	r3, r3, #23
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	23a0      	movs	r3, #160	@ 0xa0
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	2110      	movs	r1, #16
 8002e50:	438a      	bics	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
  GPIOA->MODER  |=  ( 0x2UL <<  4U ); // Set PA2 as AF
 8002e54:	23a0      	movs	r3, #160	@ 0xa0
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	23a0      	movs	r3, #160	@ 0xa0
 8002e5c:	05db      	lsls	r3, r3, #23
 8002e5e:	2120      	movs	r1, #32
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0]   &= ~( 0xEUL << 12U );
 8002e64:	23a0      	movs	r3, #160	@ 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	23a0      	movs	r3, #160	@ 0xa0
 8002e6c:	05db      	lsls	r3, r3, #23
 8002e6e:	492d      	ldr	r1, [pc, #180]	@ (8002f24 <USER_UART2_Init+0x140>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	621a      	str	r2, [r3, #32]
  GPIOA->AFR[0]   |=  ( 0x1UL << 12U ); // Select the AF1 for the PA3
 8002e74:	23a0      	movs	r3, #160	@ 0xa0
 8002e76:	05db      	lsls	r3, r3, #23
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	23a0      	movs	r3, #160	@ 0xa0
 8002e7c:	05db      	lsls	r3, r3, #23
 8002e7e:	2180      	movs	r1, #128	@ 0x80
 8002e80:	0149      	lsls	r1, r1, #5
 8002e82:	430a      	orrs	r2, r1
 8002e84:	621a      	str	r2, [r3, #32]
  GPIOA->PUPDR  &= ~( 0x3UL <<  6U ); // Clear pull-up/pull-down bits for PA3
 8002e86:	23a0      	movs	r3, #160	@ 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	23a0      	movs	r3, #160	@ 0xa0
 8002e8e:	05db      	lsls	r3, r3, #23
 8002e90:	21c0      	movs	r1, #192	@ 0xc0
 8002e92:	438a      	bics	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~( 0x1UL <<  3U ); // Clear output type bit for PA3
 8002e96:	23a0      	movs	r3, #160	@ 0xa0
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	23a0      	movs	r3, #160	@ 0xa0
 8002e9e:	05db      	lsls	r3, r3, #23
 8002ea0:	2108      	movs	r1, #8
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  GPIOA->MODER  &= ~( 0x1UL <<  6U );
 8002ea6:	23a0      	movs	r3, #160	@ 0xa0
 8002ea8:	05db      	lsls	r3, r3, #23
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	23a0      	movs	r3, #160	@ 0xa0
 8002eae:	05db      	lsls	r3, r3, #23
 8002eb0:	2140      	movs	r1, #64	@ 0x40
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]
  GPIOA->MODER  |=  ( 0x2UL <<  6U ); // Set PA3 as AF
 8002eb6:	23a0      	movs	r3, #160	@ 0xa0
 8002eb8:	05db      	lsls	r3, r3, #23
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	23a0      	movs	r3, #160	@ 0xa0
 8002ebe:	05db      	lsls	r3, r3, #23
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
  USART2->CR1   &= ~( 0x1UL << 28U ); // 8-bit word length
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ecc:	4917      	ldr	r1, [pc, #92]	@ (8002f2c <USER_UART2_Init+0x148>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
  USART2->CR1   &= ~( 0x1UL << 12U ); // 8-bit word length
 8002ed2:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ed8:	4915      	ldr	r1, [pc, #84]	@ (8002f30 <USER_UART2_Init+0x14c>)
 8002eda:	400a      	ands	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
  USART2->BRR   =   ( 48000000 / 115200 ); // Desired baud rate
 8002ede:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ee0:	22d0      	movs	r2, #208	@ 0xd0
 8002ee2:	0052      	lsls	r2, r2, #1
 8002ee4:	60da      	str	r2, [r3, #12]
  USART2->CR2   &= ~( 0x3UL << 12U ); // 1 stop bit
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002eec:	4911      	ldr	r1, [pc, #68]	@ (8002f34 <USER_UART2_Init+0x150>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  USART2->CR1   |=  ( 0x1UL <<  0U ); // USART is enabled
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
  USART2->CR1   |=  ( 0x1UL <<  3U ); // Transmitter is enabled
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002f04:	2108      	movs	r1, #8
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
  USART2->CR1   |=  ( 0x1UL <<  2U ); // Receiver is enabled
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <USER_UART2_Init+0x144>)
 8002f10:	2104      	movs	r1, #4
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	fffff1ff 	.word	0xfffff1ff
 8002f24:	ffff1fff 	.word	0xffff1fff
 8002f28:	40004400 	.word	0x40004400
 8002f2c:	efffffff 	.word	0xefffffff
 8002f30:	ffffefff 	.word	0xffffefff
 8002f34:	ffffcfff 	.word	0xffffcfff

08002f38 <_write>:


//PRINTF FUNCTION EDITED
////////////////////////////////////////////////////////////////////////////////////////
int _write(int file, char *ptr, int len){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
	int DataIdx;
	 for(DataIdx=0; DataIdx<len; DataIdx++){
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e00e      	b.n	8002f68 <_write+0x30>
		while(!( USART1->ISR & (0x1UL << 7U)));
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <_write+0x44>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	4013      	ands	r3, r2
 8002f54:	d0fa      	beq.n	8002f4c <_write+0x14>
		 	 USART1->TDR = *ptr++;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	60ba      	str	r2, [r7, #8]
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <_write+0x44>)
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
	 for(DataIdx=0; DataIdx<len; DataIdx++){
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dbec      	blt.n	8002f4a <_write+0x12>
	 }
	return len;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b006      	add	sp, #24
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	40013800 	.word	0x40013800

08002f80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f80:	480d      	ldr	r0, [pc, #52]	@ (8002fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f84:	f7ff fc72 	bl	800286c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f8a:	e003      	b.n	8002f94 <LoopCopyDataInit>

08002f8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002f8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f92:	3104      	adds	r1, #4

08002f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f94:	480a      	ldr	r0, [pc, #40]	@ (8002fc0 <LoopForever+0xa>)
  ldr r3, =_edata
 8002f96:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <LoopForever+0xe>)
  adds r2, r0, r1
 8002f98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f9c:	d3f6      	bcc.n	8002f8c <CopyDataInit>
  ldr r2, =_sbss
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <LoopForever+0x12>)
  b LoopFillZerobss
 8002fa0:	e002      	b.n	8002fa8 <LoopFillZerobss>

08002fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fa2:	2300      	movs	r3, #0
  str  r3, [r2]
 8002fa4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fa6:	3204      	adds	r2, #4

08002fa8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002fa8:	4b08      	ldr	r3, [pc, #32]	@ (8002fcc <LoopForever+0x16>)
  cmp r2, r3
 8002faa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fac:	d3f9      	bcc.n	8002fa2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002fae:	f002 ff2b 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fb2:	f7ff f953 	bl	800225c <main>

08002fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fb6:	e7fe      	b.n	8002fb6 <LoopForever>
  ldr   r0, =_estack
 8002fb8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002fbc:	08006cac 	.word	0x08006cac
  ldr r0, =_sdata
 8002fc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fc4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8002fc8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8002fcc:	20001e34 	.word	0x20001e34

08002fd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fd0:	e7fe      	b.n	8002fd0 <ADC1_IRQHandler>

08002fd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fd8:	1dfb      	adds	r3, r7, #7
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fde:	2003      	movs	r0, #3
 8002fe0:	f7ff fb48 	bl	8002674 <HAL_InitTick>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002fe8:	1dfb      	adds	r3, r7, #7
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e001      	b.n	8002ff4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ff0:	f7ff fb16 	bl	8002620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	781b      	ldrb	r3, [r3, #0]
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	0002      	movs	r2, r0
 8003008:	1dfb      	adds	r3, r7, #7
 800300a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b7f      	cmp	r3, #127	@ 0x7f
 8003012:	d809      	bhi.n	8003028 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	001a      	movs	r2, r3
 800301a:	231f      	movs	r3, #31
 800301c:	401a      	ands	r2, r3
 800301e:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <__NVIC_EnableIRQ+0x30>)
 8003020:	2101      	movs	r1, #1
 8003022:	4091      	lsls	r1, r2
 8003024:	000a      	movs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}
 8003030:	e000e100 	.word	0xe000e100

08003034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	0002      	movs	r2, r0
 800303c:	6039      	str	r1, [r7, #0]
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b7f      	cmp	r3, #127	@ 0x7f
 8003048:	d828      	bhi.n	800309c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800304a:	4a2f      	ldr	r2, [pc, #188]	@ (8003108 <__NVIC_SetPriority+0xd4>)
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b25b      	sxtb	r3, r3
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	33c0      	adds	r3, #192	@ 0xc0
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	589b      	ldr	r3, [r3, r2]
 800305a:	1dfa      	adds	r2, r7, #7
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	0011      	movs	r1, r2
 8003060:	2203      	movs	r2, #3
 8003062:	400a      	ands	r2, r1
 8003064:	00d2      	lsls	r2, r2, #3
 8003066:	21ff      	movs	r1, #255	@ 0xff
 8003068:	4091      	lsls	r1, r2
 800306a:	000a      	movs	r2, r1
 800306c:	43d2      	mvns	r2, r2
 800306e:	401a      	ands	r2, r3
 8003070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	22ff      	movs	r2, #255	@ 0xff
 8003078:	401a      	ands	r2, r3
 800307a:	1dfb      	adds	r3, r7, #7
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	0018      	movs	r0, r3
 8003080:	2303      	movs	r3, #3
 8003082:	4003      	ands	r3, r0
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003088:	481f      	ldr	r0, [pc, #124]	@ (8003108 <__NVIC_SetPriority+0xd4>)
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b25b      	sxtb	r3, r3
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	430a      	orrs	r2, r1
 8003094:	33c0      	adds	r3, #192	@ 0xc0
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800309a:	e031      	b.n	8003100 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800309c:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <__NVIC_SetPriority+0xd8>)
 800309e:	1dfb      	adds	r3, r7, #7
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	0019      	movs	r1, r3
 80030a4:	230f      	movs	r3, #15
 80030a6:	400b      	ands	r3, r1
 80030a8:	3b08      	subs	r3, #8
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3306      	adds	r3, #6
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	18d3      	adds	r3, r2, r3
 80030b2:	3304      	adds	r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1dfa      	adds	r2, r7, #7
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	0011      	movs	r1, r2
 80030bc:	2203      	movs	r2, #3
 80030be:	400a      	ands	r2, r1
 80030c0:	00d2      	lsls	r2, r2, #3
 80030c2:	21ff      	movs	r1, #255	@ 0xff
 80030c4:	4091      	lsls	r1, r2
 80030c6:	000a      	movs	r2, r1
 80030c8:	43d2      	mvns	r2, r2
 80030ca:	401a      	ands	r2, r3
 80030cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	22ff      	movs	r2, #255	@ 0xff
 80030d4:	401a      	ands	r2, r3
 80030d6:	1dfb      	adds	r3, r7, #7
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	0018      	movs	r0, r3
 80030dc:	2303      	movs	r3, #3
 80030de:	4003      	ands	r3, r0
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030e4:	4809      	ldr	r0, [pc, #36]	@ (800310c <__NVIC_SetPriority+0xd8>)
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	001c      	movs	r4, r3
 80030ec:	230f      	movs	r3, #15
 80030ee:	4023      	ands	r3, r4
 80030f0:	3b08      	subs	r3, #8
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	430a      	orrs	r2, r1
 80030f6:	3306      	adds	r3, #6
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	18c3      	adds	r3, r0, r3
 80030fc:	3304      	adds	r3, #4
 80030fe:	601a      	str	r2, [r3, #0]
}
 8003100:	46c0      	nop			@ (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b003      	add	sp, #12
 8003106:	bd90      	pop	{r4, r7, pc}
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	210f      	movs	r1, #15
 800311c:	187b      	adds	r3, r7, r1
 800311e:	1c02      	adds	r2, r0, #0
 8003120:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	187b      	adds	r3, r7, r1
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b25b      	sxtb	r3, r3
 800312a:	0011      	movs	r1, r2
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ff81 	bl	8003034 <__NVIC_SetPriority>
}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	0002      	movs	r2, r0
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003146:	1dfb      	adds	r3, r7, #7
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b25b      	sxtb	r3, r3
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff ff57 	bl	8003000 <__NVIC_EnableIRQ>
}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b002      	add	sp, #8
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003162:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2238      	movs	r2, #56	@ 0x38
 8003168:	4013      	ands	r3, r2
 800316a:	d10f      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800316c:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x78>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	0adb      	lsrs	r3, r3, #11
 8003172:	2207      	movs	r2, #7
 8003174:	4013      	ands	r3, r2
 8003176:	2201      	movs	r2, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	0013      	movs	r3, r2
 800317c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800317e:	6839      	ldr	r1, [r7, #0]
 8003180:	4815      	ldr	r0, [pc, #84]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003182:	f7fc ffcb 	bl	800011c <__udivsi3>
 8003186:	0003      	movs	r3, r0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	e01e      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x78>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2238      	movs	r2, #56	@ 0x38
 8003192:	4013      	ands	r3, r2
 8003194:	2b08      	cmp	r3, #8
 8003196:	d102      	bne.n	800319e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003198:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x7c>)
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	e015      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x78>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2238      	movs	r2, #56	@ 0x38
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d103      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	e00b      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x78>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2238      	movs	r2, #56	@ 0x38
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b18      	cmp	r3, #24
 80031bc:	d103      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031be:	23fa      	movs	r3, #250	@ 0xfa
 80031c0:	01db      	lsls	r3, r3, #7
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	e001      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80031ca:	687b      	ldr	r3, [r7, #4]
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	02dc6c00 	.word	0x02dc6c00

080031dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031e0:	f7ff ffbc 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80031e4:	0001      	movs	r1, r0
 80031e6:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_RCC_GetHCLKFreq+0x30>)
 80031e8:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	220f      	movs	r2, #15
 80031ee:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x34>)
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031f6:	221f      	movs	r2, #31
 80031f8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031fa:	000a      	movs	r2, r1
 80031fc:	40da      	lsrs	r2, r3
 80031fe:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x38>)
 8003200:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x38>)
 8003204:	681b      	ldr	r3, [r3, #0]
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	08006ae4 	.word	0x08006ae4
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800321c:	f7ff ffde 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 8003220:	0001      	movs	r1, r0
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0b1b      	lsrs	r3, r3, #12
 8003228:	2207      	movs	r2, #7
 800322a:	401a      	ands	r2, r3
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	58d3      	ldr	r3, [r2, r3]
 8003232:	221f      	movs	r2, #31
 8003234:	4013      	ands	r3, r2
 8003236:	40d9      	lsrs	r1, r3
 8003238:	000b      	movs	r3, r1
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	08006b24 	.word	0x08006b24

08003248 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2207      	movs	r2, #7
 8003256:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_RCC_GetClockConfig+0x54>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2207      	movs	r2, #7
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	605a      	str	r2, [r3, #4]

#if defined(RCC_CR_SYSDIV)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CR & RCC_CR_SYSDIV);
#else
  RCC_ClkInitStruct->SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
#endif /* RCC_CR_SYSDIV */

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800326a:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <HAL_RCC_GetClockConfig+0x54>)
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	23f0      	movs	r3, #240	@ 0xf0
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003278:	4b08      	ldr	r3, [pc, #32]	@ (800329c <HAL_RCC_GetClockConfig+0x54>)
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	23e0      	movs	r3, #224	@ 0xe0
 800327e:	01db      	lsls	r3, r3, #7
 8003280:	401a      	ands	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	611a      	str	r2, [r3, #16]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_GetClockConfig+0x58>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2207      	movs	r2, #7
 800328c:	401a      	ands	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	601a      	str	r2, [r3, #0]
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	40021000 	.word	0x40021000
 80032a0:	40022000 	.word	0x40022000

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e04a      	b.n	800334c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223d      	movs	r2, #61	@ 0x3d
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	223c      	movs	r2, #60	@ 0x3c
 80032c6:	2100      	movs	r1, #0
 80032c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f841 	bl	8003354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	223d      	movs	r2, #61	@ 0x3d
 80032d6:	2102      	movs	r1, #2
 80032d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	0019      	movs	r1, r3
 80032e4:	0010      	movs	r0, r2
 80032e6:	f000 f9bb 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2248      	movs	r2, #72	@ 0x48
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	223e      	movs	r2, #62	@ 0x3e
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223f      	movs	r2, #63	@ 0x3f
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2240      	movs	r2, #64	@ 0x40
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2241      	movs	r2, #65	@ 0x41
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2242      	movs	r2, #66	@ 0x42
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2243      	movs	r2, #67	@ 0x43
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2244      	movs	r2, #68	@ 0x44
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2245      	movs	r2, #69	@ 0x45
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2246      	movs	r2, #70	@ 0x46
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2247      	movs	r2, #71	@ 0x47
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	223d      	movs	r2, #61	@ 0x3d
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223d      	movs	r2, #61	@ 0x3d
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d001      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e037      	b.n	80033ec <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	223d      	movs	r2, #61	@ 0x3d
 8003380:	2102      	movs	r1, #2
 8003382:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a16      	ldr	r2, [pc, #88]	@ (80033f4 <HAL_TIM_Base_Start_IT+0x90>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x44>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <HAL_TIM_Base_Start_IT+0x94>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d116      	bne.n	80033d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a13      	ldr	r2, [pc, #76]	@ (80033fc <HAL_TIM_Base_Start_IT+0x98>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d016      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x84>
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	025b      	lsls	r3, r3, #9
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d011      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	e008      	b.n	80033e8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e000      	b.n	80033ea <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	00010007 	.word	0x00010007

08003400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	d021      	beq.n	8003464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2202      	movs	r2, #2
 8003424:	4013      	ands	r3, r2
 8003426:	d01d      	beq.n	8003464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2203      	movs	r2, #3
 800342e:	4252      	negs	r2, r2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2203      	movs	r2, #3
 8003440:	4013      	ands	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 f8f2 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 800344c:	e007      	b.n	800345e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f8e5 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 f8f1 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2204      	movs	r2, #4
 8003468:	4013      	ands	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2204      	movs	r2, #4
 8003470:	4013      	ands	r3, r2
 8003472:	d01e      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2205      	movs	r2, #5
 800347a:	4252      	negs	r2, r2
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	23c0      	movs	r3, #192	@ 0xc0
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4013      	ands	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f8cb 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 800349a:	e007      	b.n	80034ac <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f8be 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 f8ca 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2208      	movs	r2, #8
 80034b6:	4013      	ands	r3, r2
 80034b8:	d021      	beq.n	80034fe <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2208      	movs	r2, #8
 80034be:	4013      	ands	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2209      	movs	r2, #9
 80034c8:	4252      	negs	r2, r2
 80034ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2204      	movs	r2, #4
 80034d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2203      	movs	r2, #3
 80034da:	4013      	ands	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f8a5 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 80034e6:	e007      	b.n	80034f8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 f898 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 f8a4 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2210      	movs	r2, #16
 8003502:	4013      	ands	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2210      	movs	r2, #16
 800350a:	4013      	ands	r3, r2
 800350c:	d01e      	beq.n	800354c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2211      	movs	r2, #17
 8003514:	4252      	negs	r2, r2
 8003516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2208      	movs	r2, #8
 800351c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	23c0      	movs	r3, #192	@ 0xc0
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4013      	ands	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f000 f87e 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 8003534:	e007      	b.n	8003546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 f871 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	0018      	movs	r0, r3
 8003542:	f000 f87d 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d00c      	beq.n	800356e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	4013      	ands	r3, r2
 800355a:	d008      	beq.n	800356e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2202      	movs	r2, #2
 8003562:	4252      	negs	r2, r2
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 f851 	bl	8003610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2280      	movs	r2, #128	@ 0x80
 8003572:	4013      	ands	r3, r2
 8003574:	d104      	bne.n	8003580 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	019b      	lsls	r3, r3, #6
 800357c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800357e:	d00b      	beq.n	8003598 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2280      	movs	r2, #128	@ 0x80
 8003584:	4013      	ands	r3, r2
 8003586:	d007      	beq.n	8003598 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1e      	ldr	r2, [pc, #120]	@ (8003608 <HAL_TIM_IRQHandler+0x208>)
 800358e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f8de 	bl	8003754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	2380      	movs	r3, #128	@ 0x80
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4013      	ands	r3, r2
 80035a0:	d00b      	beq.n	80035ba <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	4013      	ands	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a17      	ldr	r2, [pc, #92]	@ (800360c <HAL_TIM_IRQHandler+0x20c>)
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f8d5 	bl	8003764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2240      	movs	r2, #64	@ 0x40
 80035be:	4013      	ands	r3, r2
 80035c0:	d00c      	beq.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2240      	movs	r2, #64	@ 0x40
 80035c6:	4013      	ands	r3, r2
 80035c8:	d008      	beq.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2241      	movs	r2, #65	@ 0x41
 80035d0:	4252      	negs	r2, r2
 80035d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f83a 	bl	8003650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2220      	movs	r2, #32
 80035e0:	4013      	ands	r3, r2
 80035e2:	d00c      	beq.n	80035fe <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	4013      	ands	r3, r2
 80035ea:	d008      	beq.n	80035fe <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2221      	movs	r2, #33	@ 0x21
 80035f2:	4252      	negs	r2, r2
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 f8a3 	bl	8003744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	ffffdf7f 	.word	0xffffdf7f
 800360c:	fffffeff 	.word	0xfffffeff

08003610 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003618:	46c0      	nop			@ (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003628:	46c0      	nop			@ (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003638:	46c0      	nop			@ (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003658:	46c0      	nop			@ (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a2e      	ldr	r2, [pc, #184]	@ (800372c <TIM_Base_SetConfig+0xcc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0x20>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a2d      	ldr	r2, [pc, #180]	@ (8003730 <TIM_Base_SetConfig+0xd0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d108      	bne.n	8003692 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2270      	movs	r2, #112	@ 0x70
 8003684:	4393      	bics	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a25      	ldr	r2, [pc, #148]	@ (800372c <TIM_Base_SetConfig+0xcc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00f      	beq.n	80036ba <TIM_Base_SetConfig+0x5a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a24      	ldr	r2, [pc, #144]	@ (8003730 <TIM_Base_SetConfig+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00b      	beq.n	80036ba <TIM_Base_SetConfig+0x5a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a23      	ldr	r2, [pc, #140]	@ (8003734 <TIM_Base_SetConfig+0xd4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <TIM_Base_SetConfig+0x5a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a22      	ldr	r2, [pc, #136]	@ (8003738 <TIM_Base_SetConfig+0xd8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_Base_SetConfig+0x5a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a21      	ldr	r2, [pc, #132]	@ (800373c <TIM_Base_SetConfig+0xdc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <TIM_Base_SetConfig+0xe0>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2280      	movs	r2, #128	@ 0x80
 80036d0:	4393      	bics	r3, r2
 80036d2:	001a      	movs	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <TIM_Base_SetConfig+0xcc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0xa4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a10      	ldr	r2, [pc, #64]	@ (8003738 <TIM_Base_SetConfig+0xd8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0xa4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	@ (800373c <TIM_Base_SetConfig+0xdc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2204      	movs	r2, #4
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	46c0      	nop			@ (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40002000 	.word	0x40002000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800
 8003740:	fffffcff 	.word	0xfffffcff

08003744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800374c:	46c0      	nop			@ (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800375c:	46c0      	nop			@ (mov r8, r8)
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}

08003774 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <SysTick_Handler+0x1c>)
 800377a:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800377c:	f001 faac 	bl	8004cd8 <xTaskGetSchedulerState>
 8003780:	0003      	movs	r3, r0
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003786:	f001 fecf 	bl	8005528 <xPortSysTickHandler>
  }
}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	e000e010 	.word	0xe000e010

08003794 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a06      	ldr	r2, [pc, #24]	@ (80037bc <vApplicationGetIdleTaskMemory+0x28>)
 80037a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80037aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2280      	movs	r2, #128	@ 0x80
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	20000110 	.word	0x20000110
 80037c0:	200001b8 	.word	0x200001b8

080037c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a06      	ldr	r2, [pc, #24]	@ (80037ec <vApplicationGetTimerTaskMemory+0x28>)
 80037d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4a05      	ldr	r2, [pc, #20]	@ (80037f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80037da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2280      	movs	r2, #128	@ 0x80
 80037e0:	601a      	str	r2, [r3, #0]
}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	200003b8 	.word	0x200003b8
 80037f0:	20000460 	.word	0x20000460

080037f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3308      	adds	r3, #8
 8003800:	001a      	movs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	4252      	negs	r2, r2
 800380c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3308      	adds	r3, #8
 8003812:	001a      	movs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3308      	adds	r3, #8
 800381c:	001a      	movs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}

08003846 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3301      	adds	r3, #1
 800385a:	d103      	bne.n	8003864 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e00c      	b.n	800387e <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3308      	adds	r3, #8
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	e002      	b.n	8003872 <vListInsert+0x2c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d2f6      	bcs.n	800386c <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6892      	ldr	r2, [r2, #8]
 80038c8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6852      	ldr	r2, [r2, #4]
 80038d2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d103      	bne.n	80038e6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}

08003902 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003902:	b5b0      	push	{r4, r5, r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800390c:	2301      	movs	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <xQueueGenericReset+0x1e>
 800391a:	b672      	cpsid	i
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	e7fd      	b.n	800391c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d100      	bne.n	8003928 <xQueueGenericReset+0x26>
 8003926:	e06a      	b.n	80039fe <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800392c:	2b00      	cmp	r3, #0
 800392e:	d066      	beq.n	80039fe <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	2400      	movs	r4, #0
 800393a:	0c15      	lsrs	r5, r2, #16
 800393c:	0c19      	lsrs	r1, r3, #16
 800393e:	b2a8      	uxth	r0, r5
 8003940:	2800      	cmp	r0, #0
 8003942:	d104      	bne.n	800394e <xQueueGenericReset+0x4c>
 8003944:	b288      	uxth	r0, r1
 8003946:	2800      	cmp	r0, #0
 8003948:	d013      	beq.n	8003972 <xQueueGenericReset+0x70>
 800394a:	1c10      	adds	r0, r2, #0
 800394c:	e004      	b.n	8003958 <xQueueGenericReset+0x56>
 800394e:	b289      	uxth	r1, r1
 8003950:	2900      	cmp	r1, #0
 8003952:	d10d      	bne.n	8003970 <xQueueGenericReset+0x6e>
 8003954:	1c29      	adds	r1, r5, #0
 8003956:	1c18      	adds	r0, r3, #0
 8003958:	b292      	uxth	r2, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	435a      	muls	r2, r3
 800395e:	b283      	uxth	r3, r0
 8003960:	b289      	uxth	r1, r1
 8003962:	434b      	muls	r3, r1
 8003964:	0c12      	lsrs	r2, r2, #16
 8003966:	189b      	adds	r3, r3, r2
 8003968:	141b      	asrs	r3, r3, #16
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d000      	beq.n	8003972 <xQueueGenericReset+0x70>
 8003970:	2401      	movs	r4, #1
 8003972:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8003974:	d143      	bne.n	80039fe <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8003976:	f001 fd7b 	bl	8005470 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	434b      	muls	r3, r1
 8003988:	18d2      	adds	r2, r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	1e59      	subs	r1, r3, #1
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	434b      	muls	r3, r1
 80039ac:	18d2      	adds	r2, r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2244      	movs	r2, #68	@ 0x44
 80039b6:	21ff      	movs	r1, #255	@ 0xff
 80039b8:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2245      	movs	r2, #69	@ 0x45
 80039be:	21ff      	movs	r1, #255	@ 0xff
 80039c0:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3310      	adds	r3, #16
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 ff71 	bl	80048bc <xTaskRemoveFromEventList>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d00c      	beq.n	80039f8 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039de:	f001 fd37 	bl	8005450 <vPortYield>
 80039e2:	e009      	b.n	80039f8 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3310      	adds	r3, #16
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff ff03 	bl	80037f4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3324      	adds	r3, #36	@ 0x24
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff fefe 	bl	80037f4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80039f8:	f001 fd4c 	bl	8005494 <vPortExitCritical>
 80039fc:	e001      	b.n	8003a02 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <xQueueGenericReset+0x10c>
 8003a08:	b672      	cpsid	i
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	e7fd      	b.n	8003a0a <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b004      	add	sp, #16
 8003a16:	bdb0      	pop	{r4, r5, r7, pc}

08003a18 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <xQueueGenericCreateStatic+0x1e>
 8003a30:	b672      	cpsid	i
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	e7fd      	b.n	8003a32 <xQueueGenericCreateStatic+0x1a>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d029      	beq.n	8003a90 <xQueueGenericCreateStatic+0x78>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d026      	beq.n	8003a90 <xQueueGenericCreateStatic+0x78>
            ( pxStaticQueue != NULL ) &&
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d020      	beq.n	8003a90 <xQueueGenericCreateStatic+0x78>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11a      	bne.n	8003a90 <xQueueGenericCreateStatic+0x78>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8003a5a:	2350      	movs	r3, #80	@ 0x50
 8003a5c:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b50      	cmp	r3, #80	@ 0x50
 8003a62:	d002      	beq.n	8003a6a <xQueueGenericCreateStatic+0x52>
 8003a64:	b672      	cpsid	i
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	e7fd      	b.n	8003a66 <xQueueGenericCreateStatic+0x4e>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8003a6a:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2246      	movs	r2, #70	@ 0x46
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a78:	2328      	movs	r3, #40	@ 0x28
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	781c      	ldrb	r4, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	0023      	movs	r3, r4
 8003a8a:	f000 f80c 	bl	8003aa6 <prvInitialiseNewQueue>
 8003a8e:	e005      	b.n	8003a9c <xQueueGenericCreateStatic+0x84>
        }
        else
        {
            configASSERT( pxNewQueue );
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <xQueueGenericCreateStatic+0x84>
 8003a96:	b672      	cpsid	i
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	e7fd      	b.n	8003a98 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003a9c:	697b      	ldr	r3, [r7, #20]
    }
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b007      	add	sp, #28
 8003aa4:	bd90      	pop	{r4, r7, pc}

08003aa6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	1cfb      	adds	r3, r7, #3
 8003ab6:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e002      	b.n	8003acc <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2101      	movs	r1, #1
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff ff10 	bl	8003902 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1cfa      	adds	r2, r7, #3
 8003ae6:	214c      	movs	r1, #76	@ 0x4c
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	@ 0x28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <xQueueReceive+0x20>
 8003b0e:	b672      	cpsid	i
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	e7fd      	b.n	8003b10 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <xQueueReceive+0x2e>
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <xQueueReceive+0x32>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <xQueueReceive+0x34>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <xQueueReceive+0x3e>
 8003b2c:	b672      	cpsid	i
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	e7fd      	b.n	8003b2e <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b32:	f001 f8d1 	bl	8004cd8 <xTaskGetSchedulerState>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d102      	bne.n	8003b40 <xQueueReceive+0x4c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <xQueueReceive+0x50>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <xQueueReceive+0x52>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <xQueueReceive+0x5c>
 8003b4a:	b672      	cpsid	i
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	e7fd      	b.n	8003b4c <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b50:	f001 fc8e 	bl	8005470 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01a      	beq.n	8003b96 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	0011      	movs	r1, r2
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 f87c 	bl	8003c64 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	3310      	adds	r3, #16
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 fe9b 	bl	80048bc <xTaskRemoveFromEventList>
 8003b86:	1e03      	subs	r3, r0, #0
 8003b88:	d001      	beq.n	8003b8e <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b8a:	f001 fc61 	bl	8005450 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003b8e:	f001 fc81 	bl	8005494 <vPortExitCritical>
                return pdPASS;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e062      	b.n	8003c5c <xQueueReceive+0x168>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003b9c:	f001 fc7a 	bl	8005494 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e05b      	b.n	8003c5c <xQueueReceive+0x168>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003baa:	2314      	movs	r3, #20
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 ff50 	bl	8004a54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003bb8:	f001 fc6c 	bl	8005494 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003bbc:	f000 fbb4 	bl	8004328 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003bc0:	f001 fc56 	bl	8005470 <vPortEnterCritical>
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2244      	movs	r2, #68	@ 0x44
 8003bc8:	5c9b      	ldrb	r3, [r3, r2]
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	d103      	bne.n	8003bd8 <xQueueReceive+0xe4>
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2244      	movs	r2, #68	@ 0x44
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2245      	movs	r2, #69	@ 0x45
 8003bdc:	5c9b      	ldrb	r3, [r3, r2]
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	d103      	bne.n	8003bec <xQueueReceive+0xf8>
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	2245      	movs	r2, #69	@ 0x45
 8003be8:	2100      	movs	r1, #0
 8003bea:	5499      	strb	r1, [r3, r2]
 8003bec:	f001 fc52 	bl	8005494 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf0:	1d3a      	adds	r2, r7, #4
 8003bf2:	2314      	movs	r3, #20
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 ff3f 	bl	8004a7c <xTaskCheckForTimeOut>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d11e      	bne.n	8003c40 <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 f8b1 	bl	8003d6c <prvIsQueueEmpty>
 8003c0a:	1e03      	subs	r3, r0, #0
 8003c0c:	d011      	beq.n	8003c32 <xQueueReceive+0x13e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	3324      	adds	r3, #36	@ 0x24
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	0011      	movs	r1, r2
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 fdf0 	bl	80047fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f846 	bl	8003cb0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003c24:	f000 fb8c 	bl	8004340 <xTaskResumeAll>
 8003c28:	1e03      	subs	r3, r0, #0
 8003c2a:	d191      	bne.n	8003b50 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8003c2c:	f001 fc10 	bl	8005450 <vPortYield>
 8003c30:	e78e      	b.n	8003b50 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 f83b 	bl	8003cb0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c3a:	f000 fb81 	bl	8004340 <xTaskResumeAll>
 8003c3e:	e787      	b.n	8003b50 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f834 	bl	8003cb0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c48:	f000 fb7a 	bl	8004340 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f88c 	bl	8003d6c <prvIsQueueEmpty>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d100      	bne.n	8003c5a <xQueueReceive+0x166>
 8003c58:	e77a      	b.n	8003b50 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003c5a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b00a      	add	sp, #40	@ 0x28
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	18d2      	adds	r2, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d303      	bcc.n	8003c98 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68d9      	ldr	r1, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f002 f8d7 	bl	8005e56 <memcpy>
    }
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003cb8:	f001 fbda 	bl	8005470 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003cbc:	230f      	movs	r3, #15
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	2145      	movs	r1, #69	@ 0x45
 8003cc4:	5c52      	ldrb	r2, [r2, r1]
 8003cc6:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc8:	e013      	b.n	8003cf2 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3324      	adds	r3, #36	@ 0x24
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f000 fdf0 	bl	80048bc <xTaskRemoveFromEventList>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d001      	beq.n	8003ce4 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003ce0:	f000 ff22 	bl	8004b28 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003ce4:	210f      	movs	r1, #15
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cf2:	230f      	movs	r3, #15
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b25b      	sxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	dce5      	bgt.n	8003cca <prvUnlockQueue+0x1a>
 8003cfe:	e000      	b.n	8003d02 <prvUnlockQueue+0x52>
                    break;
 8003d00:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2245      	movs	r2, #69	@ 0x45
 8003d06:	21ff      	movs	r1, #255	@ 0xff
 8003d08:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003d0a:	f001 fbc3 	bl	8005494 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003d0e:	f001 fbaf 	bl	8005470 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003d12:	230e      	movs	r3, #14
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	2144      	movs	r1, #68	@ 0x44
 8003d1a:	5c52      	ldrb	r2, [r2, r1]
 8003d1c:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d1e:	e013      	b.n	8003d48 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d016      	beq.n	8003d56 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3310      	adds	r3, #16
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 fdc5 	bl	80048bc <xTaskRemoveFromEventList>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d001      	beq.n	8003d3a <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8003d36:	f000 fef7 	bl	8004b28 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003d3a:	210e      	movs	r1, #14
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d48:	230e      	movs	r3, #14
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	dce5      	bgt.n	8003d20 <prvUnlockQueue+0x70>
 8003d54:	e000      	b.n	8003d58 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8003d56:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2244      	movs	r2, #68	@ 0x44
 8003d5c:	21ff      	movs	r1, #255	@ 0xff
 8003d5e:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003d60:	f001 fb98 	bl	8005494 <vPortExitCritical>
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b004      	add	sp, #16
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003d74:	f001 fb7c 	bl	8005470 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e001      	b.n	8003d8a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003d8a:	f001 fb83 	bl	8005494 <vPortExitCritical>

    return xReturn;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b004      	add	sp, #16
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <vQueueAddToRegistry+0x1a>
 8003dac:	b672      	cpsid	i
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	e7fd      	b.n	8003dae <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d025      	beq.n	8003e04 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e01f      	b.n	8003dfe <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003dbe:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <vQueueAddToRegistry+0x88>)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d105      	bne.n	8003ddc <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	00da      	lsls	r2, r3, #3
 8003dd4:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <vQueueAddToRegistry+0x88>)
 8003dd6:	18d3      	adds	r3, r2, r3
 8003dd8:	60bb      	str	r3, [r7, #8]
                    break;
 8003dda:	e013      	b.n	8003e04 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <vQueueAddToRegistry+0x60>
 8003de2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <vQueueAddToRegistry+0x88>)
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	00d2      	lsls	r2, r2, #3
 8003de8:	58d3      	ldr	r3, [r2, r3]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	00da      	lsls	r2, r3, #3
 8003df2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <vQueueAddToRegistry+0x88>)
 8003df4:	18d3      	adds	r3, r2, r3
 8003df6:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	d9dc      	bls.n	8003dbe <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	20000660 	.word	0x20000660

08003e24 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003e34:	f001 fb1c 	bl	8005470 <vPortEnterCritical>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2244      	movs	r2, #68	@ 0x44
 8003e3c:	5c9b      	ldrb	r3, [r3, r2]
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	d103      	bne.n	8003e4c <vQueueWaitForMessageRestricted+0x28>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2244      	movs	r2, #68	@ 0x44
 8003e48:	2100      	movs	r1, #0
 8003e4a:	5499      	strb	r1, [r3, r2]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2245      	movs	r2, #69	@ 0x45
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	d103      	bne.n	8003e60 <vQueueWaitForMessageRestricted+0x3c>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2245      	movs	r2, #69	@ 0x45
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]
 8003e60:	f001 fb18 	bl	8005494 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3324      	adds	r3, #36	@ 0x24
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 fce1 	bl	800483c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff ff17 	bl	8003cb0 <prvUnlockQueue>
    }
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b006      	add	sp, #24
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8003e8a:	b590      	push	{r4, r7, lr}
 8003e8c:	b08d      	sub	sp, #52	@ 0x34
 8003e8e:	af04      	add	r7, sp, #16
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8003e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <xTaskCreateStatic+0x1a>
 8003e9e:	b672      	cpsid	i
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	e7fd      	b.n	8003ea0 <xTaskCreateStatic+0x16>
        configASSERT( pxTaskBuffer != NULL );
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <xTaskCreateStatic+0x26>
 8003eaa:	b672      	cpsid	i
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	e7fd      	b.n	8003eac <xTaskCreateStatic+0x22>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8003eb0:	23a8      	movs	r3, #168	@ 0xa8
 8003eb2:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2ba8      	cmp	r3, #168	@ 0xa8
 8003eb8:	d002      	beq.n	8003ec0 <xTaskCreateStatic+0x36>
 8003eba:	b672      	cpsid	i
 8003ebc:	46c0      	nop			@ (mov r8, r8)
 8003ebe:	e7fd      	b.n	8003ebc <xTaskCreateStatic+0x32>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ec0:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d026      	beq.n	8003f16 <xTaskCreateStatic+0x8c>
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d023      	beq.n	8003f16 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	22a8      	movs	r2, #168	@ 0xa8
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f001 fecf 	bl	8005c7c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	22a5      	movs	r2, #165	@ 0xa5
 8003ee8:	2102      	movs	r1, #2
 8003eea:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eec:	683c      	ldr	r4, [r7, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	9302      	str	r3, [sp, #8]
 8003efc:	2318      	movs	r3, #24
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	0023      	movs	r3, r4
 8003f08:	f000 f85e 	bl	8003fc8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 f8f2 	bl	80040f8 <prvAddNewTaskToReadyList>
 8003f14:	e001      	b.n	8003f1a <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
    }
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b009      	add	sp, #36	@ 0x24
 8003f22:	bd90      	pop	{r4, r7, pc}

08003f24 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b08d      	sub	sp, #52	@ 0x34
 8003f28:	af04      	add	r7, sp, #16
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	1dbb      	adds	r3, r7, #6
 8003f32:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f34:	1dbb      	adds	r3, r7, #6
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f001 fb30 	bl	80055a0 <pvPortMalloc>
 8003f40:	0003      	movs	r3, r0
 8003f42:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d016      	beq.n	8003f78 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f4a:	20a8      	movs	r0, #168	@ 0xa8
 8003f4c:	f001 fb28 	bl	80055a0 <pvPortMalloc>
 8003f50:	0003      	movs	r3, r0
 8003f52:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	22a8      	movs	r2, #168	@ 0xa8
 8003f5e:	2100      	movs	r1, #0
 8003f60:	0018      	movs	r0, r3
 8003f62:	f001 fe8b 	bl	8005c7c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f6c:	e006      	b.n	8003f7c <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f001 fbcd 	bl	8005710 <vPortFree>
 8003f76:	e001      	b.n	8003f7c <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01a      	beq.n	8003fb8 <xTaskCreate+0x94>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	22a5      	movs	r2, #165	@ 0xa5
 8003f86:	2100      	movs	r1, #0
 8003f88:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f8a:	1dbb      	adds	r3, r7, #6
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	683c      	ldr	r4, [r7, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	0023      	movs	r3, r4
 8003fa6:	f000 f80f 	bl	8003fc8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f8a3 	bl	80040f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e002      	b.n	8003fbe <xTaskCreate+0x9a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	425b      	negs	r3, r3
 8003fbc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
    }
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b009      	add	sp, #36	@ 0x24
 8003fc6:	bd90      	pop	{r4, r7, pc}

08003fc8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	001a      	movs	r2, r3
 8003fe0:	21a5      	movs	r1, #165	@ 0xa5
 8003fe2:	f001 fe4b 	bl	8005c7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	493e      	ldr	r1, [pc, #248]	@ (80040e8 <prvInitialiseNewTask+0x120>)
 8003fee:	468c      	mov	ip, r1
 8003ff0:	4463      	add	r3, ip
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	18d3      	adds	r3, r2, r3
 8003ff6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2207      	movs	r2, #7
 8004004:	4013      	ands	r3, r2
 8004006:	d002      	beq.n	800400e <prvInitialiseNewTask+0x46>
 8004008:	b672      	cpsid	i
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	e7fd      	b.n	800400a <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01f      	beq.n	8004054 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e013      	b.n	8004042 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	18d3      	adds	r3, r2, r3
 8004020:	7818      	ldrb	r0, [r3, #0]
 8004022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004024:	2134      	movs	r1, #52	@ 0x34
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	18d3      	adds	r3, r2, r3
 800402a:	185b      	adds	r3, r3, r1
 800402c:	1c02      	adds	r2, r0, #0
 800402e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3301      	adds	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b0f      	cmp	r3, #15
 8004046:	d9e8      	bls.n	800401a <prvInitialiseNewTask+0x52>
 8004048:	e000      	b.n	800404c <prvInitialiseNewTask+0x84>
            {
                break;
 800404a:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	2243      	movs	r2, #67	@ 0x43
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2b37      	cmp	r3, #55	@ 0x37
 8004058:	d902      	bls.n	8004060 <prvInitialiseNewTask+0x98>
 800405a:	b672      	cpsid	i
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	e7fd      	b.n	800405c <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	2b37      	cmp	r3, #55	@ 0x37
 8004064:	d901      	bls.n	800406a <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004066:	2337      	movs	r3, #55	@ 0x37
 8004068:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	6a3a      	ldr	r2, [r7, #32]
 8004074:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004078:	3304      	adds	r3, #4
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff fbd8 	bl	8003830 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	3318      	adds	r3, #24
 8004084:	0018      	movs	r0, r3
 8004086:	f7ff fbd3 	bl	8003830 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800408a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800408e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2238      	movs	r2, #56	@ 0x38
 8004094:	1ad2      	subs	r2, r2, r3
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	3354      	adds	r3, #84	@ 0x54
 80040a4:	224c      	movs	r2, #76	@ 0x4c
 80040a6:	2100      	movs	r1, #0
 80040a8:	0018      	movs	r0, r3
 80040aa:	f001 fde7 	bl	8005c7c <memset>
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	4a0e      	ldr	r2, [pc, #56]	@ (80040ec <prvInitialiseNewTask+0x124>)
 80040b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	4a0e      	ldr	r2, [pc, #56]	@ (80040f0 <prvInitialiseNewTask+0x128>)
 80040b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	4a0d      	ldr	r2, [pc, #52]	@ (80040f4 <prvInitialiseNewTask+0x12c>)
 80040be:	661a      	str	r2, [r3, #96]	@ 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f001 f936 	bl	8005338 <pxPortInitialiseStack>
 80040cc:	0002      	movs	r2, r0
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <prvInitialiseNewTask+0x116>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b006      	add	sp, #24
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	3fffffff 	.word	0x3fffffff
 80040ec:	20001ce8 	.word	0x20001ce8
 80040f0:	20001d50 	.word	0x20001d50
 80040f4:	20001db8 	.word	0x20001db8

080040f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004100:	f001 f9b6 	bl	8005470 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004104:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <prvAddNewTaskToReadyList+0x104>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	4b3c      	ldr	r3, [pc, #240]	@ (80041fc <prvAddNewTaskToReadyList+0x104>)
 800410c:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800410e:	4b3c      	ldr	r3, [pc, #240]	@ (8004200 <prvAddNewTaskToReadyList+0x108>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004116:	4b3a      	ldr	r3, [pc, #232]	@ (8004200 <prvAddNewTaskToReadyList+0x108>)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800411c:	4b37      	ldr	r3, [pc, #220]	@ (80041fc <prvAddNewTaskToReadyList+0x104>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d110      	bne.n	8004146 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004124:	f000 fd1a 	bl	8004b5c <prvInitialiseTaskLists>
 8004128:	e00d      	b.n	8004146 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800412a:	4b36      	ldr	r3, [pc, #216]	@ (8004204 <prvAddNewTaskToReadyList+0x10c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <prvAddNewTaskToReadyList+0x108>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	429a      	cmp	r2, r3
 800413e:	d802      	bhi.n	8004146 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004140:	4b2f      	ldr	r3, [pc, #188]	@ (8004200 <prvAddNewTaskToReadyList+0x108>)
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004146:	4b30      	ldr	r3, [pc, #192]	@ (8004208 <prvAddNewTaskToReadyList+0x110>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <prvAddNewTaskToReadyList+0x110>)
 800414e:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004150:	4b2d      	ldr	r3, [pc, #180]	@ (8004208 <prvAddNewTaskToReadyList+0x110>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415c:	4b2b      	ldr	r3, [pc, #172]	@ (800420c <prvAddNewTaskToReadyList+0x114>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <prvAddNewTaskToReadyList+0x74>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004168:	4b28      	ldr	r3, [pc, #160]	@ (800420c <prvAddNewTaskToReadyList+0x114>)
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004170:	4927      	ldr	r1, [pc, #156]	@ (8004210 <prvAddNewTaskToReadyList+0x118>)
 8004172:	0013      	movs	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	189b      	adds	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	18cb      	adds	r3, r1, r3
 800417c:	3304      	adds	r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	3204      	adds	r2, #4
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a6:	0013      	movs	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4a18      	ldr	r2, [pc, #96]	@ (8004210 <prvAddNewTaskToReadyList+0x118>)
 80041b0:	189a      	adds	r2, r3, r2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	615a      	str	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ba:	4915      	ldr	r1, [pc, #84]	@ (8004210 <prvAddNewTaskToReadyList+0x118>)
 80041bc:	0013      	movs	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	189b      	adds	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	585b      	ldr	r3, [r3, r1]
 80041c6:	1c58      	adds	r0, r3, #1
 80041c8:	4911      	ldr	r1, [pc, #68]	@ (8004210 <prvAddNewTaskToReadyList+0x118>)
 80041ca:	0013      	movs	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80041d4:	f001 f95e 	bl	8005494 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80041d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <prvAddNewTaskToReadyList+0x10c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041e0:	4b07      	ldr	r3, [pc, #28]	@ (8004200 <prvAddNewTaskToReadyList+0x108>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d201      	bcs.n	80041f2 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80041ee:	f001 f92f 	bl	8005450 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	20000b74 	.word	0x20000b74
 8004200:	200006a0 	.word	0x200006a0
 8004204:	20000b80 	.word	0x20000b80
 8004208:	20000b90 	.word	0x20000b90
 800420c:	20000b7c 	.word	0x20000b7c
 8004210:	200006a4 	.word	0x200006a4

08004214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d011      	beq.n	800424a <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <vTaskDelay+0x48>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <vTaskDelay+0x20>
 800422e:	b672      	cpsid	i
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	e7fd      	b.n	8004230 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8004234:	f000 f878 	bl	8004328 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2100      	movs	r1, #0
 800423c:	0018      	movs	r0, r3
 800423e:	f000 fd67 	bl	8004d10 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004242:	f000 f87d 	bl	8004340 <xTaskResumeAll>
 8004246:	0003      	movs	r3, r0
 8004248:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <vTaskDelay+0x40>
        {
            portYIELD_WITHIN_API();
 8004250:	f001 f8fe 	bl	8005450 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004254:	46c0      	nop			@ (mov r8, r8)
 8004256:	46bd      	mov	sp, r7
 8004258:	b004      	add	sp, #16
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000b9c 	.word	0x20000b9c

08004260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800426e:	003a      	movs	r2, r7
 8004270:	1d39      	adds	r1, r7, #4
 8004272:	2308      	movs	r3, #8
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	0018      	movs	r0, r3
 8004278:	f7ff fa8c 	bl	8003794 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800427c:	683c      	ldr	r4, [r7, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	4920      	ldr	r1, [pc, #128]	@ (8004304 <vTaskStartScheduler+0xa4>)
 8004284:	4820      	ldr	r0, [pc, #128]	@ (8004308 <vTaskStartScheduler+0xa8>)
 8004286:	9202      	str	r2, [sp, #8]
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	2300      	movs	r3, #0
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2300      	movs	r3, #0
 8004290:	0022      	movs	r2, r4
 8004292:	f7ff fdfa 	bl	8003e8a <xTaskCreateStatic>
 8004296:	0002      	movs	r2, r0
 8004298:	4b1c      	ldr	r3, [pc, #112]	@ (800430c <vTaskStartScheduler+0xac>)
 800429a:	601a      	str	r2, [r3, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800429c:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <vTaskStartScheduler+0xac>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 80042a4:	2301      	movs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e001      	b.n	80042ae <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d103      	bne.n	80042bc <vTaskStartScheduler+0x5c>
        {
            xReturn = xTimerCreateTimerTask();
 80042b4:	f000 fd9a 	bl	8004dec <xTimerCreateTimerTask>
 80042b8:	0003      	movs	r3, r0
 80042ba:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d113      	bne.n	80042ea <vTaskStartScheduler+0x8a>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80042c2:	b672      	cpsid	i

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80042c4:	4b12      	ldr	r3, [pc, #72]	@ (8004310 <vTaskStartScheduler+0xb0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3354      	adds	r3, #84	@ 0x54
 80042ca:	001a      	movs	r2, r3
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <vTaskStartScheduler+0xb4>)
 80042ce:	601a      	str	r2, [r3, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80042d0:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <vTaskStartScheduler+0xb8>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	4252      	negs	r2, r2
 80042d6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80042d8:	4b10      	ldr	r3, [pc, #64]	@ (800431c <vTaskStartScheduler+0xbc>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042de:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <vTaskStartScheduler+0xc0>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80042e4:	f001 f890 	bl	8005408 <xPortStartScheduler>
 80042e8:	e005      	b.n	80042f6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	d102      	bne.n	80042f6 <vTaskStartScheduler+0x96>
 80042f0:	b672      	cpsid	i
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	e7fd      	b.n	80042f2 <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <vTaskStartScheduler+0xc4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b005      	add	sp, #20
 8004300:	bd90      	pop	{r4, r7, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	08006a4c 	.word	0x08006a4c
 8004308:	08004b3d 	.word	0x08004b3d
 800430c:	20000b98 	.word	0x20000b98
 8004310:	200006a0 	.word	0x200006a0
 8004314:	20000018 	.word	0x20000018
 8004318:	20000b94 	.word	0x20000b94
 800431c:	20000b80 	.word	0x20000b80
 8004320:	20000b78 	.word	0x20000b78
 8004324:	08006b44 	.word	0x08006b44

08004328 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800432c:	4b03      	ldr	r3, [pc, #12]	@ (800433c <vTaskSuspendAll+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	4b02      	ldr	r3, [pc, #8]	@ (800433c <vTaskSuspendAll+0x14>)
 8004334:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000b9c 	.word	0x20000b9c

08004340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800434e:	4b69      	ldr	r3, [pc, #420]	@ (80044f4 <xTaskResumeAll+0x1b4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <xTaskResumeAll+0x1c>
 8004356:	b672      	cpsid	i
 8004358:	46c0      	nop			@ (mov r8, r8)
 800435a:	e7fd      	b.n	8004358 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800435c:	f001 f888 	bl	8005470 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004360:	4b64      	ldr	r3, [pc, #400]	@ (80044f4 <xTaskResumeAll+0x1b4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	4b63      	ldr	r3, [pc, #396]	@ (80044f4 <xTaskResumeAll+0x1b4>)
 8004368:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800436a:	4b62      	ldr	r3, [pc, #392]	@ (80044f4 <xTaskResumeAll+0x1b4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d000      	beq.n	8004374 <xTaskResumeAll+0x34>
 8004372:	e0b7      	b.n	80044e4 <xTaskResumeAll+0x1a4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004374:	4b60      	ldr	r3, [pc, #384]	@ (80044f8 <xTaskResumeAll+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d100      	bne.n	800437e <xTaskResumeAll+0x3e>
 800437c:	e0b2      	b.n	80044e4 <xTaskResumeAll+0x1a4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800437e:	e089      	b.n	8004494 <xTaskResumeAll+0x154>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004380:	4b5e      	ldr	r3, [pc, #376]	@ (80044fc <xTaskResumeAll+0x1bc>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6a12      	ldr	r2, [r2, #32]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	69d2      	ldr	r2, [r2, #28]
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3318      	adds	r3, #24
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d103      	bne.n	80043b6 <xTaskResumeAll+0x76>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	68d2      	ldr	r2, [r2, #12]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3304      	adds	r3, #4
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d103      	bne.n	80043f4 <xTaskResumeAll+0xb4>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	615a      	str	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004408:	4b3d      	ldr	r3, [pc, #244]	@ (8004500 <xTaskResumeAll+0x1c0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d903      	bls.n	8004418 <xTaskResumeAll+0xd8>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004414:	4b3a      	ldr	r3, [pc, #232]	@ (8004500 <xTaskResumeAll+0x1c0>)
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441c:	4939      	ldr	r1, [pc, #228]	@ (8004504 <xTaskResumeAll+0x1c4>)
 800441e:	0013      	movs	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	189b      	adds	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	18cb      	adds	r3, r1, r3
 8004428:	3304      	adds	r3, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	3204      	adds	r2, #4
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1d1a      	adds	r2, r3, #4
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004452:	0013      	movs	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	189b      	adds	r3, r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4a2a      	ldr	r2, [pc, #168]	@ (8004504 <xTaskResumeAll+0x1c4>)
 800445c:	189a      	adds	r2, r3, r2
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	615a      	str	r2, [r3, #20]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004466:	4927      	ldr	r1, [pc, #156]	@ (8004504 <xTaskResumeAll+0x1c4>)
 8004468:	0013      	movs	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	189b      	adds	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	585b      	ldr	r3, [r3, r1]
 8004472:	1c58      	adds	r0, r3, #1
 8004474:	4923      	ldr	r1, [pc, #140]	@ (8004504 <xTaskResumeAll+0x1c4>)
 8004476:	0013      	movs	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	189b      	adds	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004484:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <xTaskResumeAll+0x1c8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	429a      	cmp	r2, r3
 800448c:	d902      	bls.n	8004494 <xTaskResumeAll+0x154>
                    {
                        xYieldPending = pdTRUE;
 800448e:	4b1f      	ldr	r3, [pc, #124]	@ (800450c <xTaskResumeAll+0x1cc>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <xTaskResumeAll+0x1bc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d000      	beq.n	800449e <xTaskResumeAll+0x15e>
 800449c:	e770      	b.n	8004380 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <xTaskResumeAll+0x168>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80044a4:	f000 fbfe 	bl	8004ca4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044a8:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <xTaskResumeAll+0x1d0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00f      	beq.n	80044d4 <xTaskResumeAll+0x194>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80044b4:	f000 f83c 	bl	8004530 <xTaskIncrementTick>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d002      	beq.n	80044c2 <xTaskResumeAll+0x182>
                            {
                                xYieldPending = pdTRUE;
 80044bc:	4b13      	ldr	r3, [pc, #76]	@ (800450c <xTaskResumeAll+0x1cc>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f2      	bne.n	80044b4 <xTaskResumeAll+0x174>

                        xPendedTicks = 0;
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <xTaskResumeAll+0x1d0>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80044d4:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <xTaskResumeAll+0x1cc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <xTaskResumeAll+0x1a4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80044dc:	2301      	movs	r3, #1
 80044de:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80044e0:	f000 ffb6 	bl	8005450 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80044e4:	f000 ffd6 	bl	8005494 <vPortExitCritical>

    return xAlreadyYielded;
 80044e8:	693b      	ldr	r3, [r7, #16]
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b006      	add	sp, #24
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	20000b9c 	.word	0x20000b9c
 80044f8:	20000b74 	.word	0x20000b74
 80044fc:	20000b34 	.word	0x20000b34
 8004500:	20000b7c 	.word	0x20000b7c
 8004504:	200006a4 	.word	0x200006a4
 8004508:	200006a0 	.word	0x200006a0
 800450c:	20000b88 	.word	0x20000b88
 8004510:	20000b84 	.word	0x20000b84

08004514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800451a:	4b04      	ldr	r3, [pc, #16]	@ (800452c <xTaskGetTickCount+0x18>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004520:	687b      	ldr	r3, [r7, #4]
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	20000b78 	.word	0x20000b78

08004530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800453a:	4b78      	ldr	r3, [pc, #480]	@ (800471c <xTaskIncrementTick+0x1ec>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d000      	beq.n	8004544 <xTaskIncrementTick+0x14>
 8004542:	e0e1      	b.n	8004708 <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004544:	4b76      	ldr	r3, [pc, #472]	@ (8004720 <xTaskIncrementTick+0x1f0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800454c:	4b74      	ldr	r3, [pc, #464]	@ (8004720 <xTaskIncrementTick+0x1f0>)
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d118      	bne.n	800458a <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004558:	4b72      	ldr	r3, [pc, #456]	@ (8004724 <xTaskIncrementTick+0x1f4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <xTaskIncrementTick+0x38>
 8004562:	b672      	cpsid	i
 8004564:	46c0      	nop			@ (mov r8, r8)
 8004566:	e7fd      	b.n	8004564 <xTaskIncrementTick+0x34>
 8004568:	4b6e      	ldr	r3, [pc, #440]	@ (8004724 <xTaskIncrementTick+0x1f4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	4b6e      	ldr	r3, [pc, #440]	@ (8004728 <xTaskIncrementTick+0x1f8>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b6c      	ldr	r3, [pc, #432]	@ (8004724 <xTaskIncrementTick+0x1f4>)
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	4b6c      	ldr	r3, [pc, #432]	@ (8004728 <xTaskIncrementTick+0x1f8>)
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	4b6b      	ldr	r3, [pc, #428]	@ (800472c <xTaskIncrementTick+0x1fc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	4b6a      	ldr	r3, [pc, #424]	@ (800472c <xTaskIncrementTick+0x1fc>)
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	f000 fb8d 	bl	8004ca4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800458a:	4b69      	ldr	r3, [pc, #420]	@ (8004730 <xTaskIncrementTick+0x200>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d200      	bcs.n	8004596 <xTaskIncrementTick+0x66>
 8004594:	e0a4      	b.n	80046e0 <xTaskIncrementTick+0x1b0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004596:	4b63      	ldr	r3, [pc, #396]	@ (8004724 <xTaskIncrementTick+0x1f4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a0:	4b63      	ldr	r3, [pc, #396]	@ (8004730 <xTaskIncrementTick+0x200>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	4252      	negs	r2, r2
 80045a6:	601a      	str	r2, [r3, #0]
                    break;
 80045a8:	e09a      	b.n	80046e0 <xTaskIncrementTick+0x1b0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004724 <xTaskIncrementTick+0x1f4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d203      	bcs.n	80045ca <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80045c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004730 <xTaskIncrementTick+0x200>)
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80045c8:	e08a      	b.n	80046e0 <xTaskIncrementTick+0x1b0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	68d2      	ldr	r2, [r2, #12]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	6892      	ldr	r2, [r2, #8]
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3304      	adds	r3, #4
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d103      	bne.n	80045f8 <xTaskIncrementTick+0xc8>
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2200      	movs	r2, #0
 80045fc:	615a      	str	r2, [r3, #20]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1e5a      	subs	r2, r3, #1
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01e      	beq.n	800464e <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	6a12      	ldr	r2, [r2, #32]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	69d2      	ldr	r2, [r2, #28]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3318      	adds	r3, #24
 8004632:	429a      	cmp	r2, r3
 8004634:	d103      	bne.n	800463e <xTaskIncrementTick+0x10e>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6a1a      	ldr	r2, [r3, #32]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2200      	movs	r2, #0
 8004642:	629a      	str	r2, [r3, #40]	@ 0x28
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004652:	4b38      	ldr	r3, [pc, #224]	@ (8004734 <xTaskIncrementTick+0x204>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d903      	bls.n	8004662 <xTaskIncrementTick+0x132>
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465e:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <xTaskIncrementTick+0x204>)
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004666:	4934      	ldr	r1, [pc, #208]	@ (8004738 <xTaskIncrementTick+0x208>)
 8004668:	0013      	movs	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	189b      	adds	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	18cb      	adds	r3, r1, r3
 8004672:	3304      	adds	r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	3204      	adds	r2, #4
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1d1a      	adds	r2, r3, #4
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469c:	0013      	movs	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a24      	ldr	r2, [pc, #144]	@ (8004738 <xTaskIncrementTick+0x208>)
 80046a6:	189a      	adds	r2, r3, r2
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	615a      	str	r2, [r3, #20]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b0:	4921      	ldr	r1, [pc, #132]	@ (8004738 <xTaskIncrementTick+0x208>)
 80046b2:	0013      	movs	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	585b      	ldr	r3, [r3, r1]
 80046bc:	1c58      	adds	r0, r3, #1
 80046be:	491e      	ldr	r1, [pc, #120]	@ (8004738 <xTaskIncrementTick+0x208>)
 80046c0:	0013      	movs	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	189b      	adds	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <xTaskIncrementTick+0x20c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d800      	bhi.n	80046da <xTaskIncrementTick+0x1aa>
 80046d8:	e75d      	b.n	8004596 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 80046da:	2301      	movs	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046de:	e75a      	b.n	8004596 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046e0:	4b16      	ldr	r3, [pc, #88]	@ (800473c <xTaskIncrementTick+0x20c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e6:	4914      	ldr	r1, [pc, #80]	@ (8004738 <xTaskIncrementTick+0x208>)
 80046e8:	0013      	movs	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	189b      	adds	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	585b      	ldr	r3, [r3, r1]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d901      	bls.n	80046fa <xTaskIncrementTick+0x1ca>
            {
                xSwitchRequired = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80046fa:	4b11      	ldr	r3, [pc, #68]	@ (8004740 <xTaskIncrementTick+0x210>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e004      	b.n	8004712 <xTaskIncrementTick+0x1e2>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004708:	4b0e      	ldr	r3, [pc, #56]	@ (8004744 <xTaskIncrementTick+0x214>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <xTaskIncrementTick+0x214>)
 8004710:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004712:	69fb      	ldr	r3, [r7, #28]
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b008      	add	sp, #32
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000b9c 	.word	0x20000b9c
 8004720:	20000b78 	.word	0x20000b78
 8004724:	20000b2c 	.word	0x20000b2c
 8004728:	20000b30 	.word	0x20000b30
 800472c:	20000b8c 	.word	0x20000b8c
 8004730:	20000b94 	.word	0x20000b94
 8004734:	20000b7c 	.word	0x20000b7c
 8004738:	200006a4 	.word	0x200006a4
 800473c:	200006a0 	.word	0x200006a0
 8004740:	20000b88 	.word	0x20000b88
 8004744:	20000b84 	.word	0x20000b84

08004748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800474e:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <vTaskSwitchContext+0x9c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004756:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <vTaskSwitchContext+0xa0>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800475c:	e03d      	b.n	80047da <vTaskSwitchContext+0x92>
        xYieldPending = pdFALSE;
 800475e:	4b22      	ldr	r3, [pc, #136]	@ (80047e8 <vTaskSwitchContext+0xa0>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004764:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <vTaskSwitchContext+0xa4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	e008      	b.n	800477e <vTaskSwitchContext+0x36>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <vTaskSwitchContext+0x30>
 8004772:	b672      	cpsid	i
 8004774:	46c0      	nop			@ (mov r8, r8)
 8004776:	e7fd      	b.n	8004774 <vTaskSwitchContext+0x2c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	491c      	ldr	r1, [pc, #112]	@ (80047f0 <vTaskSwitchContext+0xa8>)
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	0013      	movs	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	189b      	adds	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	585b      	ldr	r3, [r3, r1]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ed      	beq.n	800476c <vTaskSwitchContext+0x24>
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	0013      	movs	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	189b      	adds	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <vTaskSwitchContext+0xa8>)
 800479c:	189b      	adds	r3, r3, r2
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3308      	adds	r3, #8
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d103      	bne.n	80047be <vTaskSwitchContext+0x76>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <vTaskSwitchContext+0xac>)
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	4b08      	ldr	r3, [pc, #32]	@ (80047ec <vTaskSwitchContext+0xa4>)
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <vTaskSwitchContext+0xac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3354      	adds	r3, #84	@ 0x54
 80047d4:	001a      	movs	r2, r3
 80047d6:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <vTaskSwitchContext+0xb0>)
 80047d8:	601a      	str	r2, [r3, #0]
}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	20000b9c 	.word	0x20000b9c
 80047e8:	20000b88 	.word	0x20000b88
 80047ec:	20000b7c 	.word	0x20000b7c
 80047f0:	200006a4 	.word	0x200006a4
 80047f4:	200006a0 	.word	0x200006a0
 80047f8:	20000018 	.word	0x20000018

080047fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <vTaskPlaceOnEventList+0x16>
 800480c:	b672      	cpsid	i
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	e7fd      	b.n	800480e <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004812:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <vTaskPlaceOnEventList+0x3c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3318      	adds	r3, #24
 8004818:	001a      	movs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0011      	movs	r1, r2
 800481e:	0018      	movs	r0, r3
 8004820:	f7ff f811 	bl	8003846 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	0018      	movs	r0, r3
 800482a:	f000 fa71 	bl	8004d10 <prvAddCurrentTaskToDelayedList>
}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	200006a0 	.word	0x200006a0

0800483c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <vTaskPlaceOnEventListRestricted+0x18>
 800484e:	b672      	cpsid	i
 8004850:	46c0      	nop			@ (mov r8, r8)
 8004852:	e7fd      	b.n	8004850 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	4b17      	ldr	r3, [pc, #92]	@ (80048b8 <vTaskPlaceOnEventListRestricted+0x7c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	61da      	str	r2, [r3, #28]
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <vTaskPlaceOnEventListRestricted+0x7c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	621a      	str	r2, [r3, #32]
 800486c:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <vTaskPlaceOnEventListRestricted+0x7c>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	3218      	adds	r2, #24
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	4b0f      	ldr	r3, [pc, #60]	@ (80048b8 <vTaskPlaceOnEventListRestricted+0x7c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3318      	adds	r3, #24
 800487e:	001a      	movs	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <vTaskPlaceOnEventListRestricted+0x7c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	629a      	str	r2, [r3, #40]	@ 0x28
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800489c:	2301      	movs	r3, #1
 800489e:	425b      	negs	r3, r3
 80048a0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	0011      	movs	r1, r2
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 fa31 	bl	8004d10 <prvAddCurrentTaskToDelayedList>
    }
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b006      	add	sp, #24
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	200006a0 	.word	0x200006a0

080048bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <xTaskRemoveFromEventList+0x1c>
 80048d2:	b672      	cpsid	i
 80048d4:	46c0      	nop			@ (mov r8, r8)
 80048d6:	e7fd      	b.n	80048d4 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	6a12      	ldr	r2, [r2, #32]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	69d2      	ldr	r2, [r2, #28]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	3318      	adds	r3, #24
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d103      	bne.n	8004906 <xTaskRemoveFromEventList+0x4a>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	6a1a      	ldr	r2, [r3, #32]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2200      	movs	r2, #0
 800490a:	629a      	str	r2, [r3, #40]	@ 0x28
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	1e5a      	subs	r2, r3, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004916:	4b49      	ldr	r3, [pc, #292]	@ (8004a3c <xTaskRemoveFromEventList+0x180>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d15d      	bne.n	80049da <xTaskRemoveFromEventList+0x11e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	68d2      	ldr	r2, [r2, #12]
 800492c:	609a      	str	r2, [r3, #8]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	6892      	ldr	r2, [r2, #8]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	3304      	adds	r3, #4
 8004940:	429a      	cmp	r2, r3
 8004942:	d103      	bne.n	800494c <xTaskRemoveFromEventList+0x90>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2200      	movs	r2, #0
 8004950:	615a      	str	r2, [r3, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1e5a      	subs	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004960:	4b37      	ldr	r3, [pc, #220]	@ (8004a40 <xTaskRemoveFromEventList+0x184>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d903      	bls.n	8004970 <xTaskRemoveFromEventList+0xb4>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	4b34      	ldr	r3, [pc, #208]	@ (8004a40 <xTaskRemoveFromEventList+0x184>)
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004974:	4933      	ldr	r1, [pc, #204]	@ (8004a44 <xTaskRemoveFromEventList+0x188>)
 8004976:	0013      	movs	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	189b      	adds	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	18cb      	adds	r3, r1, r3
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	3204      	adds	r2, #4
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049aa:	0013      	movs	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4a24      	ldr	r2, [pc, #144]	@ (8004a44 <xTaskRemoveFromEventList+0x188>)
 80049b4:	189a      	adds	r2, r3, r2
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	615a      	str	r2, [r3, #20]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049be:	4921      	ldr	r1, [pc, #132]	@ (8004a44 <xTaskRemoveFromEventList+0x188>)
 80049c0:	0013      	movs	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	189b      	adds	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	585b      	ldr	r3, [r3, r1]
 80049ca:	1c58      	adds	r0, r3, #1
 80049cc:	491d      	ldr	r1, [pc, #116]	@ (8004a44 <xTaskRemoveFromEventList+0x188>)
 80049ce:	0013      	movs	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	5058      	str	r0, [r3, r1]
 80049d8:	e01b      	b.n	8004a12 <xTaskRemoveFromEventList+0x156>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049da:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <xTaskRemoveFromEventList+0x18c>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	621a      	str	r2, [r3, #32]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	3218      	adds	r2, #24
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3318      	adds	r3, #24
 80049fc:	001a      	movs	r2, r3
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4a10      	ldr	r2, [pc, #64]	@ (8004a48 <xTaskRemoveFromEventList+0x18c>)
 8004a06:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a08:	4b0f      	ldr	r3, [pc, #60]	@ (8004a48 <xTaskRemoveFromEventList+0x18c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a48 <xTaskRemoveFromEventList+0x18c>)
 8004a10:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a16:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <xTaskRemoveFromEventList+0x190>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d905      	bls.n	8004a2c <xTaskRemoveFromEventList+0x170>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004a24:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <xTaskRemoveFromEventList+0x194>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e001      	b.n	8004a30 <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        xReturn = pdFALSE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8004a30:	69fb      	ldr	r3, [r7, #28]
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b008      	add	sp, #32
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	20000b9c 	.word	0x20000b9c
 8004a40:	20000b7c 	.word	0x20000b7c
 8004a44:	200006a4 	.word	0x200006a4
 8004a48:	20000b34 	.word	0x20000b34
 8004a4c:	200006a0 	.word	0x200006a0
 8004a50:	20000b88 	.word	0x20000b88

08004a54 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <vTaskInternalSetTimeOutState+0x20>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <vTaskInternalSetTimeOutState+0x24>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b002      	add	sp, #8
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000b8c 	.word	0x20000b8c
 8004a78:	20000b78 	.word	0x20000b78

08004a7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <xTaskCheckForTimeOut+0x16>
 8004a8c:	b672      	cpsid	i
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	e7fd      	b.n	8004a8e <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <xTaskCheckForTimeOut+0x22>
 8004a98:	b672      	cpsid	i
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	e7fd      	b.n	8004a9a <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8004a9e:	f000 fce7 	bl	8005470 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b20 <xTaskCheckForTimeOut+0xa4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	d102      	bne.n	8004ac0 <xTaskCheckForTimeOut+0x44>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e027      	b.n	8004b10 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <xTaskCheckForTimeOut+0xa8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d00a      	beq.n	8004ae2 <xTaskCheckForTimeOut+0x66>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d305      	bcc.n	8004ae2 <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e016      	b.n	8004b10 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d20c      	bcs.n	8004b06 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1ad2      	subs	r2, r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7ff ffaa 	bl	8004a54 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e004      	b.n	8004b10 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004b10:	f000 fcc0 	bl	8005494 <vPortExitCritical>

    return xReturn;
 8004b14:	697b      	ldr	r3, [r7, #20]
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b006      	add	sp, #24
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	20000b78 	.word	0x20000b78
 8004b24:	20000b8c 	.word	0x20000b8c

08004b28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004b2c:	4b02      	ldr	r3, [pc, #8]	@ (8004b38 <vTaskMissedYield+0x10>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	46c0      	nop			@ (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000b88 	.word	0x20000b88

08004b3c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004b44:	f000 f84e 	bl	8004be4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <prvIdleTask+0x1c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d9f9      	bls.n	8004b44 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004b50:	f000 fc7e 	bl	8005450 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004b54:	e7f6      	b.n	8004b44 <prvIdleTask+0x8>
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	200006a4 	.word	0x200006a4

08004b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	e00c      	b.n	8004b82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	0013      	movs	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4a14      	ldr	r2, [pc, #80]	@ (8004bc4 <prvInitialiseTaskLists+0x68>)
 8004b74:	189b      	adds	r3, r3, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7fe fe3c 	bl	80037f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b37      	cmp	r3, #55	@ 0x37
 8004b86:	d9ef      	bls.n	8004b68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004b88:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <prvInitialiseTaskLists+0x6c>)
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fe fe32 	bl	80037f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004b90:	4b0e      	ldr	r3, [pc, #56]	@ (8004bcc <prvInitialiseTaskLists+0x70>)
 8004b92:	0018      	movs	r0, r3
 8004b94:	f7fe fe2e 	bl	80037f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004b98:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <prvInitialiseTaskLists+0x74>)
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fe fe2a 	bl	80037f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <prvInitialiseTaskLists+0x78>)
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7fe fe26 	bl	80037f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <prvInitialiseTaskLists+0x7c>)
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fe fe22 	bl	80037f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <prvInitialiseTaskLists+0x80>)
 8004bb2:	4a05      	ldr	r2, [pc, #20]	@ (8004bc8 <prvInitialiseTaskLists+0x6c>)
 8004bb4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <prvInitialiseTaskLists+0x84>)
 8004bb8:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <prvInitialiseTaskLists+0x70>)
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	200006a4 	.word	0x200006a4
 8004bc8:	20000b04 	.word	0x20000b04
 8004bcc:	20000b18 	.word	0x20000b18
 8004bd0:	20000b34 	.word	0x20000b34
 8004bd4:	20000b48 	.word	0x20000b48
 8004bd8:	20000b60 	.word	0x20000b60
 8004bdc:	20000b2c 	.word	0x20000b2c
 8004be0:	20000b30 	.word	0x20000b30

08004be4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bea:	e01a      	b.n	8004c22 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8004bec:	f000 fc40 	bl	8005470 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <prvCheckTasksWaitingTermination+0x50>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7fe fe58 	bl	80038b2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004c02:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <prvCheckTasksWaitingTermination+0x54>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1e5a      	subs	r2, r3, #1
 8004c08:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <prvCheckTasksWaitingTermination+0x54>)
 8004c0a:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <prvCheckTasksWaitingTermination+0x58>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	1e5a      	subs	r2, r3, #1
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <prvCheckTasksWaitingTermination+0x58>)
 8004c14:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8004c16:	f000 fc3d 	bl	8005494 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f000 f80f 	bl	8004c40 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <prvCheckTasksWaitingTermination+0x58>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e0      	bne.n	8004bec <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000b48 	.word	0x20000b48
 8004c38:	20000b74 	.word	0x20000b74
 8004c3c:	20000b5c 	.word	0x20000b5c

08004c40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8004c48:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <prvDeleteTCB+0x60>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3354      	adds	r3, #84	@ 0x54
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f001 f82e 	bl	8005cb0 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	22a5      	movs	r2, #165	@ 0xa5
 8004c58:	5c9b      	ldrb	r3, [r3, r2]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <prvDeleteTCB+0x32>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fd54 	bl	8005710 <vPortFree>
                vPortFree( pxTCB );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 fd50 	bl	8005710 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004c70:	e011      	b.n	8004c96 <prvDeleteTCB+0x56>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	22a5      	movs	r2, #165	@ 0xa5
 8004c76:	5c9b      	ldrb	r3, [r3, r2]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d104      	bne.n	8004c86 <prvDeleteTCB+0x46>
                vPortFree( pxTCB );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 fd46 	bl	8005710 <vPortFree>
    }
 8004c84:	e007      	b.n	8004c96 <prvDeleteTCB+0x56>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	22a5      	movs	r2, #165	@ 0xa5
 8004c8a:	5c9b      	ldrb	r3, [r3, r2]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d002      	beq.n	8004c96 <prvDeleteTCB+0x56>
 8004c90:	b672      	cpsid	i
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	e7fd      	b.n	8004c92 <prvDeleteTCB+0x52>
    }
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	200006a0 	.word	0x200006a0

08004ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca8:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <prvResetNextTaskUnblockTime+0x2c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004cb2:	4b08      	ldr	r3, [pc, #32]	@ (8004cd4 <prvResetNextTaskUnblockTime+0x30>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4252      	negs	r2, r2
 8004cb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004cba:	e005      	b.n	8004cc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <prvResetNextTaskUnblockTime+0x2c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b03      	ldr	r3, [pc, #12]	@ (8004cd4 <prvResetNextTaskUnblockTime+0x30>)
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	46c0      	nop			@ (mov r8, r8)
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			@ (mov r8, r8)
 8004cd0:	20000b2c 	.word	0x20000b2c
 8004cd4:	20000b94 	.word	0x20000b94

08004cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004cde:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <xTaskGetSchedulerState+0x30>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	e008      	b.n	8004cfe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004cec:	4b07      	ldr	r3, [pc, #28]	@ (8004d0c <xTaskGetSchedulerState+0x34>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	e001      	b.n	8004cfe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004cfe:	687b      	ldr	r3, [r7, #4]
    }
 8004d00:	0018      	movs	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b002      	add	sp, #8
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000b80 	.word	0x20000b80
 8004d0c:	20000b9c 	.word	0x20000b9c

08004d10 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d20:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3304      	adds	r3, #4
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7fe fdc3 	bl	80038b2 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	d124      	bne.n	8004d7c <prvAddCurrentTaskToDelayedList+0x6c>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d021      	beq.n	8004d7c <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d38:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	4b26      	ldr	r3, [pc, #152]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	6892      	ldr	r2, [r2, #8]
 8004d4e:	60da      	str	r2, [r3, #12]
 8004d50:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	3204      	adds	r2, #4
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	609a      	str	r2, [r3, #8]
 8004d66:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ddc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004d6c:	615a      	str	r2, [r3, #20]
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	46c0      	nop			@ (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d7a:	e026      	b.n	8004dca <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	18d3      	adds	r3, r2, r3
 8004d82:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d84:	4b14      	ldr	r3, [pc, #80]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d209      	bcs.n	8004da8 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d94:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	0019      	movs	r1, r3
 8004da0:	0010      	movs	r0, r2
 8004da2:	f7fe fd50 	bl	8003846 <vListInsert>
}
 8004da6:	e010      	b.n	8004dca <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da8:	4b0e      	ldr	r3, [pc, #56]	@ (8004de4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3304      	adds	r3, #4
 8004db2:	0019      	movs	r1, r3
 8004db4:	0010      	movs	r0, r2
 8004db6:	f7fe fd46 	bl	8003846 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004dba:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d202      	bcs.n	8004dca <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004dc4:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b006      	add	sp, #24
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	20000b78 	.word	0x20000b78
 8004dd8:	200006a0 	.word	0x200006a0
 8004ddc:	20000b60 	.word	0x20000b60
 8004de0:	20000b30 	.word	0x20000b30
 8004de4:	20000b2c 	.word	0x20000b2c
 8004de8:	20000b94 	.word	0x20000b94

08004dec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b089      	sub	sp, #36	@ 0x24
 8004df0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004df6:	f000 fa5d 	bl	80052b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004dfa:	4b18      	ldr	r3, [pc, #96]	@ (8004e5c <xTimerCreateTimerTask+0x70>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d020      	beq.n	8004e44 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e0a:	003a      	movs	r2, r7
 8004e0c:	1d39      	adds	r1, r7, #4
 8004e0e:	2308      	movs	r3, #8
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7fe fcd6 	bl	80037c4 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8004e18:	683c      	ldr	r4, [r7, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	4910      	ldr	r1, [pc, #64]	@ (8004e60 <xTimerCreateTimerTask+0x74>)
 8004e20:	4810      	ldr	r0, [pc, #64]	@ (8004e64 <xTimerCreateTimerTask+0x78>)
 8004e22:	9202      	str	r2, [sp, #8]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	2302      	movs	r3, #2
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	0022      	movs	r2, r4
 8004e2e:	f7ff f82c 	bl	8003e8a <xTaskCreateStatic>
 8004e32:	0002      	movs	r2, r0
 8004e34:	4b0c      	ldr	r3, [pc, #48]	@ (8004e68 <xTimerCreateTimerTask+0x7c>)
 8004e36:	601a      	str	r2, [r3, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <xTimerCreateTimerTask+0x7c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8004e40:	2301      	movs	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <xTimerCreateTimerTask+0x64>
 8004e4a:	b672      	cpsid	i
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	e7fd      	b.n	8004e4c <xTimerCreateTimerTask+0x60>
        return xReturn;
 8004e50:	68fb      	ldr	r3, [r7, #12]
    }
 8004e52:	0018      	movs	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b005      	add	sp, #20
 8004e58:	bd90      	pop	{r4, r7, pc}
 8004e5a:	46c0      	nop			@ (mov r8, r8)
 8004e5c:	20000bd0 	.word	0x20000bd0
 8004e60:	08006a54 	.word	0x08006a54
 8004e64:	08004f15 	.word	0x08004f15
 8004e68:	20000bd4 	.word	0x20000bd4

08004e6c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e78:	e009      	b.n	8004e8e <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	18d3      	adds	r3, r2, r3
 8004e82:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	0010      	movs	r0, r2
 8004e8c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	18d1      	adds	r1, r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f8da 	bl	8005054 <prvInsertTimerInActiveList>
 8004ea0:	1e03      	subs	r3, r0, #0
 8004ea2:	d1ea      	bne.n	8004e7a <prvReloadTimer+0xe>
        }
    }
 8004ea4:	46c0      	nop			@ (mov r8, r8)
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b004      	add	sp, #16
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eba:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <prvProcessExpiredTimer+0x60>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7fe fcf2 	bl	80038b2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2228      	movs	r2, #40	@ 0x28
 8004ed2:	5c9b      	ldrb	r3, [r3, r2]
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d006      	beq.n	8004eea <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7ff ffc2 	bl	8004e6c <prvReloadTimer>
 8004ee8:	e008      	b.n	8004efc <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2228      	movs	r2, #40	@ 0x28
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	4393      	bics	r3, r2
 8004ef4:	b2d9      	uxtb	r1, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2228      	movs	r2, #40	@ 0x28
 8004efa:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	0010      	movs	r0, r2
 8004f04:	4798      	blx	r3
    }
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b004      	add	sp, #16
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	20000bc8 	.word	0x20000bc8

08004f14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	0018      	movs	r0, r3
 8004f22:	f000 f855 	bl	8004fd0 <prvGetNextExpireTime>
 8004f26:	0003      	movs	r3, r0
 8004f28:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0011      	movs	r1, r2
 8004f30:	0018      	movs	r0, r3
 8004f32:	f000 f805 	bl	8004f40 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004f36:	f000 f8cf 	bl	80050d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	e7ee      	b.n	8004f1c <prvTimerTask+0x8>
	...

08004f40 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004f4a:	f7ff f9ed 	bl	8004328 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f4e:	2308      	movs	r3, #8
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 f85e 	bl	8005014 <prvSampleTimeNow>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d12b      	bne.n	8004fba <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10c      	bne.n	8004f82 <prvProcessTimerOrBlockTask+0x42>
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d808      	bhi.n	8004f82 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8004f70:	f7ff f9e6 	bl	8004340 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0011      	movs	r1, r2
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f7ff ff98 	bl	8004eb0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004f80:	e01d      	b.n	8004fbe <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f88:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc8 <prvProcessTimerOrBlockTask+0x88>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <prvProcessTimerOrBlockTask+0x56>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <prvProcessTimerOrBlockTask+0x58>
 8004f96:	2300      	movs	r3, #0
 8004f98:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <prvProcessTimerOrBlockTask+0x8c>)
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	f7fe ff3c 	bl	8003e24 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004fac:	f7ff f9c8 	bl	8004340 <xTaskResumeAll>
 8004fb0:	1e03      	subs	r3, r0, #0
 8004fb2:	d104      	bne.n	8004fbe <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004fb4:	f000 fa4c 	bl	8005450 <vPortYield>
    }
 8004fb8:	e001      	b.n	8004fbe <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8004fba:	f7ff f9c1 	bl	8004340 <xTaskResumeAll>
    }
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b004      	add	sp, #16
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	20000bcc 	.word	0x20000bcc
 8004fcc:	20000bd0 	.word	0x20000bd0

08004fd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <prvGetNextExpireTime+0x40>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <prvGetNextExpireTime+0x16>
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	e000      	b.n	8004fe8 <prvGetNextExpireTime+0x18>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ff4:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <prvGetNextExpireTime+0x40>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e001      	b.n	8005004 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005004:	68fb      	ldr	r3, [r7, #12]
    }
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b004      	add	sp, #16
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	20000bc8 	.word	0x20000bc8

08005014 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800501c:	f7ff fa7a 	bl	8004514 <xTaskGetTickCount>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8005024:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <prvSampleTimeNow+0x3c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	429a      	cmp	r2, r3
 800502c:	d205      	bcs.n	800503a <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 800502e:	f000 f919 	bl	8005264 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e002      	b.n	8005040 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005040:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <prvSampleTimeNow+0x3c>)
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8005046:	68fb      	ldr	r3, [r7, #12]
    }
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b004      	add	sp, #16
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000bd8 	.word	0x20000bd8

08005054 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d812      	bhi.n	80050a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	429a      	cmp	r2, r3
 8005086:	d302      	bcc.n	800508e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e01b      	b.n	80050c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800508e:	4b10      	ldr	r3, [pc, #64]	@ (80050d0 <prvInsertTimerInActiveList+0x7c>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3304      	adds	r3, #4
 8005096:	0019      	movs	r1, r3
 8005098:	0010      	movs	r0, r2
 800509a:	f7fe fbd4 	bl	8003846 <vListInsert>
 800509e:	e012      	b.n	80050c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d206      	bcs.n	80050b6 <prvInsertTimerInActiveList+0x62>
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d302      	bcc.n	80050b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80050b0:	2301      	movs	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e007      	b.n	80050c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050b6:	4b07      	ldr	r3, [pc, #28]	@ (80050d4 <prvInsertTimerInActiveList+0x80>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3304      	adds	r3, #4
 80050be:	0019      	movs	r1, r3
 80050c0:	0010      	movs	r0, r2
 80050c2:	f7fe fbc0 	bl	8003846 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80050c6:	697b      	ldr	r3, [r7, #20]
    }
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b006      	add	sp, #24
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000bcc 	.word	0x20000bcc
 80050d4:	20000bc8 	.word	0x20000bc8

080050d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050de:	e0ad      	b.n	800523c <prvProcessReceivedCommands+0x164>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da10      	bge.n	800510a <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	3304      	adds	r3, #4
 80050ec:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <prvProcessReceivedCommands+0x22>
 80050f4:	b672      	cpsid	i
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	e7fd      	b.n	80050f6 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	6858      	ldr	r0, [r3, #4]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	0019      	movs	r1, r3
 8005108:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800510a:	1d3b      	adds	r3, r7, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	da00      	bge.n	8005114 <prvProcessReceivedCommands+0x3c>
 8005112:	e093      	b.n	800523c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d004      	beq.n	800512c <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	3304      	adds	r3, #4
 8005126:	0018      	movs	r0, r3
 8005128:	f7fe fbc3 	bl	80038b2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800512c:	003b      	movs	r3, r7
 800512e:	0018      	movs	r0, r3
 8005130:	f7ff ff70 	bl	8005014 <prvSampleTimeNow>
 8005134:	0003      	movs	r3, r0
 8005136:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8005138:	1d3b      	adds	r3, r7, #4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b09      	cmp	r3, #9
 800513e:	d900      	bls.n	8005142 <prvProcessReceivedCommands+0x6a>
 8005140:	e079      	b.n	8005236 <prvProcessReceivedCommands+0x15e>
 8005142:	009a      	lsls	r2, r3, #2
 8005144:	4b45      	ldr	r3, [pc, #276]	@ (800525c <prvProcessReceivedCommands+0x184>)
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2228      	movs	r2, #40	@ 0x28
 8005150:	5c9b      	ldrb	r3, [r3, r2]
 8005152:	2201      	movs	r2, #1
 8005154:	4313      	orrs	r3, r2
 8005156:	b2d9      	uxtb	r1, r3
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2228      	movs	r2, #40	@ 0x28
 800515c:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	18d1      	adds	r1, r2, r3
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	69b8      	ldr	r0, [r7, #24]
 8005170:	f7ff ff70 	bl	8005054 <prvInsertTimerInActiveList>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	d060      	beq.n	800523a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2228      	movs	r2, #40	@ 0x28
 800517c:	5c9b      	ldrb	r3, [r3, r2]
 800517e:	001a      	movs	r2, r3
 8005180:	2304      	movs	r3, #4
 8005182:	4013      	ands	r3, r2
 8005184:	d00a      	beq.n	800519c <prvProcessReceivedCommands+0xc4>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	18d1      	adds	r1, r2, r3
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	0018      	movs	r0, r3
 8005196:	f7ff fe69 	bl	8004e6c <prvReloadTimer>
 800519a:	e008      	b.n	80051ae <prvProcessReceivedCommands+0xd6>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2228      	movs	r2, #40	@ 0x28
 80051a0:	5c9b      	ldrb	r3, [r3, r2]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4393      	bics	r3, r2
 80051a6:	b2d9      	uxtb	r1, r3
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2228      	movs	r2, #40	@ 0x28
 80051ac:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	0010      	movs	r0, r2
 80051b6:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80051b8:	e03f      	b.n	800523a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2228      	movs	r2, #40	@ 0x28
 80051be:	5c9b      	ldrb	r3, [r3, r2]
 80051c0:	2201      	movs	r2, #1
 80051c2:	4393      	bics	r3, r2
 80051c4:	b2d9      	uxtb	r1, r3
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2228      	movs	r2, #40	@ 0x28
 80051ca:	5499      	strb	r1, [r3, r2]
                        break;
 80051cc:	e036      	b.n	800523c <prvProcessReceivedCommands+0x164>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2228      	movs	r2, #40	@ 0x28
 80051d2:	5c9b      	ldrb	r3, [r3, r2]
 80051d4:	2201      	movs	r2, #1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	b2d9      	uxtb	r1, r3
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2228      	movs	r2, #40	@ 0x28
 80051de:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <prvProcessReceivedCommands+0x11e>
 80051f0:	b672      	cpsid	i
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	e7fd      	b.n	80051f2 <prvProcessReceivedCommands+0x11a>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	18d1      	adds	r1, r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	69b8      	ldr	r0, [r7, #24]
 8005204:	f7ff ff26 	bl	8005054 <prvInsertTimerInActiveList>
                        break;
 8005208:	e018      	b.n	800523c <prvProcessReceivedCommands+0x164>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2228      	movs	r2, #40	@ 0x28
 800520e:	5c9b      	ldrb	r3, [r3, r2]
 8005210:	001a      	movs	r2, r3
 8005212:	2302      	movs	r3, #2
 8005214:	4013      	ands	r3, r2
 8005216:	d104      	bne.n	8005222 <prvProcessReceivedCommands+0x14a>
                            {
                                vPortFree( pxTimer );
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	0018      	movs	r0, r3
 800521c:	f000 fa78 	bl	8005710 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005220:	e00c      	b.n	800523c <prvProcessReceivedCommands+0x164>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2228      	movs	r2, #40	@ 0x28
 8005226:	5c9b      	ldrb	r3, [r3, r2]
 8005228:	2201      	movs	r2, #1
 800522a:	4393      	bics	r3, r2
 800522c:	b2d9      	uxtb	r1, r3
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2228      	movs	r2, #40	@ 0x28
 8005232:	5499      	strb	r1, [r3, r2]
                        break;
 8005234:	e002      	b.n	800523c <prvProcessReceivedCommands+0x164>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	e000      	b.n	800523c <prvProcessReceivedCommands+0x164>
                        break;
 800523a:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800523c:	4b08      	ldr	r3, [pc, #32]	@ (8005260 <prvProcessReceivedCommands+0x188>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	1d39      	adds	r1, r7, #4
 8005242:	2200      	movs	r2, #0
 8005244:	0018      	movs	r0, r3
 8005246:	f7fe fc55 	bl	8003af4 <xQueueReceive>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d000      	beq.n	8005250 <prvProcessReceivedCommands+0x178>
 800524e:	e747      	b.n	80050e0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005250:	46c0      	nop			@ (mov r8, r8)
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	46bd      	mov	sp, r7
 8005256:	b008      	add	sp, #32
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	08006b48 	.word	0x08006b48
 8005260:	20000bd0 	.word	0x20000bd0

08005264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800526a:	e00b      	b.n	8005284 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800526c:	4b0f      	ldr	r3, [pc, #60]	@ (80052ac <prvSwitchTimerLists+0x48>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005276:	2301      	movs	r3, #1
 8005278:	425a      	negs	r2, r3
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	0011      	movs	r1, r2
 800527e:	0018      	movs	r0, r3
 8005280:	f7ff fe16 	bl	8004eb0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005284:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <prvSwitchTimerLists+0x48>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ee      	bne.n	800526c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800528e:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <prvSwitchTimerLists+0x48>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <prvSwitchTimerLists+0x4c>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <prvSwitchTimerLists+0x48>)
 800529a:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 800529c:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <prvSwitchTimerLists+0x4c>)
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
    }
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b002      	add	sp, #8
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	20000bc8 	.word	0x20000bc8
 80052b0:	20000bcc 	.word	0x20000bcc

080052b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80052ba:	f000 f8d9 	bl	8005470 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80052be:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <prvCheckForValidListAndQueue+0x64>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d123      	bne.n	800530e <prvCheckForValidListAndQueue+0x5a>
            {
                vListInitialise( &xActiveTimerList1 );
 80052c6:	4b15      	ldr	r3, [pc, #84]	@ (800531c <prvCheckForValidListAndQueue+0x68>)
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7fe fa93 	bl	80037f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80052ce:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <prvCheckForValidListAndQueue+0x6c>)
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7fe fa8f 	bl	80037f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80052d6:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <prvCheckForValidListAndQueue+0x70>)
 80052d8:	4a10      	ldr	r2, [pc, #64]	@ (800531c <prvCheckForValidListAndQueue+0x68>)
 80052da:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80052dc:	4b12      	ldr	r3, [pc, #72]	@ (8005328 <prvCheckForValidListAndQueue+0x74>)
 80052de:	4a10      	ldr	r2, [pc, #64]	@ (8005320 <prvCheckForValidListAndQueue+0x6c>)
 80052e0:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052e2:	4b12      	ldr	r3, [pc, #72]	@ (800532c <prvCheckForValidListAndQueue+0x78>)
 80052e4:	4a12      	ldr	r2, [pc, #72]	@ (8005330 <prvCheckForValidListAndQueue+0x7c>)
 80052e6:	2100      	movs	r1, #0
 80052e8:	9100      	str	r1, [sp, #0]
 80052ea:	2110      	movs	r1, #16
 80052ec:	200a      	movs	r0, #10
 80052ee:	f7fe fb93 	bl	8003a18 <xQueueGenericCreateStatic>
 80052f2:	0002      	movs	r2, r0
 80052f4:	4b08      	ldr	r3, [pc, #32]	@ (8005318 <prvCheckForValidListAndQueue+0x64>)
 80052f6:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80052f8:	4b07      	ldr	r3, [pc, #28]	@ (8005318 <prvCheckForValidListAndQueue+0x64>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <prvCheckForValidListAndQueue+0x5a>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <prvCheckForValidListAndQueue+0x64>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0b      	ldr	r2, [pc, #44]	@ (8005334 <prvCheckForValidListAndQueue+0x80>)
 8005306:	0011      	movs	r1, r2
 8005308:	0018      	movs	r0, r3
 800530a:	f7fe fd45 	bl	8003d98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800530e:	f000 f8c1 	bl	8005494 <vPortExitCritical>
    }
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000bd0 	.word	0x20000bd0
 800531c:	20000ba0 	.word	0x20000ba0
 8005320:	20000bb4 	.word	0x20000bb4
 8005324:	20000bc8 	.word	0x20000bc8
 8005328:	20000bcc 	.word	0x20000bcc
 800532c:	20000c7c 	.word	0x20000c7c
 8005330:	20000bdc 	.word	0x20000bdc
 8005334:	08006a5c 	.word	0x08006a5c

08005338 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3b04      	subs	r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2280      	movs	r2, #128	@ 0x80
 800534e:	0452      	lsls	r2, r2, #17
 8005350:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b04      	subs	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b04      	subs	r3, #4
 8005362:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8005364:	4a08      	ldr	r2, [pc, #32]	@ (8005388 <pxPortInitialiseStack+0x50>)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b14      	subs	r3, #20
 800536e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3b20      	subs	r3, #32
 800537a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800537c:	68fb      	ldr	r3, [r7, #12]
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b004      	add	sp, #16
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	0800538d 	.word	0x0800538d

0800538c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8005392:	2300      	movs	r3, #0
 8005394:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005396:	4b08      	ldr	r3, [pc, #32]	@ (80053b8 <prvTaskExitError+0x2c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	d002      	beq.n	80053a4 <prvTaskExitError+0x18>
 800539e:	b672      	cpsid	i
 80053a0:	46c0      	nop			@ (mov r8, r8)
 80053a2:	e7fd      	b.n	80053a0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80053a4:	b672      	cpsid	i

    while( ulDummy == 0 )
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0fc      	beq.n	80053a8 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	46c0      	nop			@ (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000008 	.word	0x20000008

080053bc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80053c0:	46c0      	nop			@ (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80053d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005400 <pxCurrentTCBConst2>)
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	3020      	adds	r0, #32
 80053d8:	f380 8809 	msr	PSP, r0
 80053dc:	2002      	movs	r0, #2
 80053de:	f380 8814 	msr	CONTROL, r0
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80053e8:	46ae      	mov	lr, r5
 80053ea:	bc08      	pop	{r3}
 80053ec:	bc04      	pop	{r2}
 80053ee:	b662      	cpsie	i
 80053f0:	4718      	bx	r3
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	46c0      	nop			@ (mov r8, r8)
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	46c0      	nop			@ (mov r8, r8)
 80053fa:	46c0      	nop			@ (mov r8, r8)
 80053fc:	46c0      	nop			@ (mov r8, r8)
 80053fe:	46c0      	nop			@ (mov r8, r8)

08005400 <pxCurrentTCBConst2>:
 8005400:	200006a0 	.word	0x200006a0
        "   bx   r3                     \n"/* Finally, jump to the user defined task code. */
        "                               \n"
        "   .align 4                    \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB   "
        );
}
 8005404:	46c0      	nop			@ (mov r8, r8)
 8005406:	46c0      	nop			@ (mov r8, r8)

08005408 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800540c:	4b0e      	ldr	r3, [pc, #56]	@ (8005448 <xPortStartScheduler+0x40>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b0d      	ldr	r3, [pc, #52]	@ (8005448 <xPortStartScheduler+0x40>)
 8005412:	21ff      	movs	r1, #255	@ 0xff
 8005414:	0409      	lsls	r1, r1, #16
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <xPortStartScheduler+0x40>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <xPortStartScheduler+0x40>)
 8005420:	21ff      	movs	r1, #255	@ 0xff
 8005422:	0609      	lsls	r1, r1, #24
 8005424:	430a      	orrs	r2, r1
 8005426:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005428:	f000 f898 	bl	800555c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800542c:	4b07      	ldr	r3, [pc, #28]	@ (800544c <xPortStartScheduler+0x44>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8005432:	f7ff ffcd 	bl	80053d0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005436:	f7ff f987 	bl	8004748 <vTaskSwitchContext>
    prvTaskExitError();
 800543a:	f7ff ffa7 	bl	800538c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800543e:	2300      	movs	r3, #0
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	e000ed20 	.word	0xe000ed20
 800544c:	20000008 	.word	0x20000008

08005450 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005454:	4b05      	ldr	r3, [pc, #20]	@ (800546c <vPortYield+0x1c>)
 8005456:	2280      	movs	r2, #128	@ 0x80
 8005458:	0552      	lsls	r2, r2, #21
 800545a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800545c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005460:	f3bf 8f6f 	isb	sy
}
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005474:	b672      	cpsid	i
    uxCriticalNesting++;
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <vPortEnterCritical+0x20>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	4b04      	ldr	r3, [pc, #16]	@ (8005490 <vPortEnterCritical+0x20>)
 800547e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8005480:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005484:	f3bf 8f6f 	isb	sy
}
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	20000008 	.word	0x20000008

08005494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005498:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <vPortExitCritical+0x2c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <vPortExitCritical+0x12>
 80054a0:	b672      	cpsid	i
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	e7fd      	b.n	80054a2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <vPortExitCritical+0x2c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	4b04      	ldr	r3, [pc, #16]	@ (80054c0 <vPortExitCritical+0x2c>)
 80054ae:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 80054b0:	4b03      	ldr	r3, [pc, #12]	@ (80054c0 <vPortExitCritical+0x2c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d100      	bne.n	80054ba <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 80054b8:	b662      	cpsie	i
    }
}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000008 	.word	0x20000008

080054c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80054c4:	f3ef 8010 	mrs	r0, PRIMASK
 80054c8:	b672      	cpsid	i
 80054ca:	4770      	bx	lr
        " mrs r0, PRIMASK   \n"
        " cpsid i           \n"
        " bx lr               "
        ::: "memory"
        );
}
 80054cc:	46c0      	nop			@ (mov r8, r8)
 80054ce:	0018      	movs	r0, r3

080054d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80054d0:	f380 8810 	msr	PRIMASK, r0
 80054d4:	4770      	bx	lr
        " msr PRIMASK, r0   \n"
        " bx lr               "
        ::: "memory"
        );
}
 80054d6:	46c0      	nop			@ (mov r8, r8)
	...

080054e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80054e0:	f3ef 8009 	mrs	r0, PSP
 80054e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005520 <pxCurrentTCBConst>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	3820      	subs	r0, #32
 80054ea:	6010      	str	r0, [r2, #0]
 80054ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80054ee:	4644      	mov	r4, r8
 80054f0:	464d      	mov	r5, r9
 80054f2:	4656      	mov	r6, sl
 80054f4:	465f      	mov	r7, fp
 80054f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80054f8:	b508      	push	{r3, lr}
 80054fa:	b672      	cpsid	i
 80054fc:	f7ff f924 	bl	8004748 <vTaskSwitchContext>
 8005500:	b662      	cpsie	i
 8005502:	bc0c      	pop	{r2, r3}
 8005504:	6811      	ldr	r1, [r2, #0]
 8005506:	6808      	ldr	r0, [r1, #0]
 8005508:	3010      	adds	r0, #16
 800550a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800550c:	46a0      	mov	r8, r4
 800550e:	46a9      	mov	r9, r5
 8005510:	46b2      	mov	sl, r6
 8005512:	46bb      	mov	fp, r7
 8005514:	f380 8809 	msr	PSP, r0
 8005518:	3820      	subs	r0, #32
 800551a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800551c:	4718      	bx	r3
 800551e:	46c0      	nop			@ (mov r8, r8)

08005520 <pxCurrentTCBConst>:
 8005520:	200006a0 	.word	0x200006a0
        "   bx r3                               \n"
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB    "
    );
}
 8005524:	46c0      	nop			@ (mov r8, r8)
 8005526:	46c0      	nop			@ (mov r8, r8)

08005528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800552e:	f7ff ffc9 	bl	80054c4 <ulSetInterruptMaskFromISR>
 8005532:	0003      	movs	r3, r0
 8005534:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005536:	f7fe fffb 	bl	8004530 <xTaskIncrementTick>
 800553a:	1e03      	subs	r3, r0, #0
 800553c:	d003      	beq.n	8005546 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800553e:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <xPortSysTickHandler+0x30>)
 8005540:	2280      	movs	r2, #128	@ 0x80
 8005542:	0552      	lsls	r2, r2, #21
 8005544:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff ffc1 	bl	80054d0 <vClearInterruptMaskFromISR>
}
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b002      	add	sp, #8
 8005554:	bd80      	pop	{r7, pc}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005560:	4b0b      	ldr	r3, [pc, #44]	@ (8005590 <vPortSetupTimerInterrupt+0x34>)
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005566:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <vPortSetupTimerInterrupt+0x38>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800556c:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <vPortSetupTimerInterrupt+0x3c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	22fa      	movs	r2, #250	@ 0xfa
 8005572:	0091      	lsls	r1, r2, #2
 8005574:	0018      	movs	r0, r3
 8005576:	f7fa fdd1 	bl	800011c <__udivsi3>
 800557a:	0003      	movs	r3, r0
 800557c:	001a      	movs	r2, r3
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <vPortSetupTimerInterrupt+0x40>)
 8005580:	3a01      	subs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005584:	4b02      	ldr	r3, [pc, #8]	@ (8005590 <vPortSetupTimerInterrupt+0x34>)
 8005586:	2207      	movs	r2, #7
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	e000e010 	.word	0xe000e010
 8005594:	e000e018 	.word	0xe000e018
 8005598:	20000000 	.word	0x20000000
 800559c:	e000e014 	.word	0xe000e014

080055a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80055ac:	f7fe febc 	bl	8004328 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80055b0:	4b52      	ldr	r3, [pc, #328]	@ (80056fc <pvPortMalloc+0x15c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80055b8:	f000 f8f2 	bl	80057a0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d021      	beq.n	8005606 <pvPortMalloc+0x66>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80055c2:	2308      	movs	r3, #8
 80055c4:	43db      	mvns	r3, r3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d81a      	bhi.n	8005602 <pvPortMalloc+0x62>
            {
                xWantedSize += xHeapStructSize;
 80055cc:	2208      	movs	r2, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2207      	movs	r2, #7
 80055d8:	4013      	ands	r3, r2
 80055da:	d014      	beq.n	8005606 <pvPortMalloc+0x66>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2207      	movs	r2, #7
 80055e0:	4013      	ands	r3, r2
 80055e2:	2208      	movs	r2, #8
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	43db      	mvns	r3, r3
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d804      	bhi.n	80055fc <pvPortMalloc+0x5c>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	18d3      	adds	r3, r2, r3
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	e004      	b.n	8005606 <pvPortMalloc+0x66>
                    }
                    else
                    {
                        xWantedSize = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	e001      	b.n	8005606 <pvPortMalloc+0x66>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	db69      	blt.n	80056e0 <pvPortMalloc+0x140>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d066      	beq.n	80056e0 <pvPortMalloc+0x140>
 8005612:	4b3b      	ldr	r3, [pc, #236]	@ (8005700 <pvPortMalloc+0x160>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d861      	bhi.n	80056e0 <pvPortMalloc+0x140>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800561c:	4b39      	ldr	r3, [pc, #228]	@ (8005704 <pvPortMalloc+0x164>)
 800561e:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8005620:	4b38      	ldr	r3, [pc, #224]	@ (8005704 <pvPortMalloc+0x164>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005626:	e004      	b.n	8005632 <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d903      	bls.n	8005644 <pvPortMalloc+0xa4>
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f1      	bne.n	8005628 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005644:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <pvPortMalloc+0x15c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	429a      	cmp	r2, r3
 800564c:	d048      	beq.n	80056e0 <pvPortMalloc+0x140>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2208      	movs	r2, #8
 8005654:	189b      	adds	r3, r3, r2
 8005656:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	2308      	movs	r3, #8
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	429a      	cmp	r2, r3
 800566e:	d917      	bls.n	80056a0 <pvPortMalloc+0x100>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	18d3      	adds	r3, r2, r3
 8005676:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2207      	movs	r2, #7
 800567c:	4013      	ands	r3, r2
 800567e:	d002      	beq.n	8005686 <pvPortMalloc+0xe6>
 8005680:	b672      	cpsid	i
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	e7fd      	b.n	8005682 <pvPortMalloc+0xe2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	1ad2      	subs	r2, r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	0018      	movs	r0, r3
 800569c:	f000 f8da 	bl	8005854 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056a0:	4b17      	ldr	r3, [pc, #92]	@ (8005700 <pvPortMalloc+0x160>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	1ad2      	subs	r2, r2, r3
 80056aa:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <pvPortMalloc+0x160>)
 80056ac:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ae:	4b14      	ldr	r3, [pc, #80]	@ (8005700 <pvPortMalloc+0x160>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b15      	ldr	r3, [pc, #84]	@ (8005708 <pvPortMalloc+0x168>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d203      	bcs.n	80056c2 <pvPortMalloc+0x122>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ba:	4b11      	ldr	r3, [pc, #68]	@ (8005700 <pvPortMalloc+0x160>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b12      	ldr	r3, [pc, #72]	@ (8005708 <pvPortMalloc+0x168>)
 80056c0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2280      	movs	r2, #128	@ 0x80
 80056c8:	0612      	lsls	r2, r2, #24
 80056ca:	431a      	orrs	r2, r3
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80056d6:	4b0d      	ldr	r3, [pc, #52]	@ (800570c <pvPortMalloc+0x16c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <pvPortMalloc+0x16c>)
 80056de:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80056e0:	f7fe fe2e 	bl	8004340 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2207      	movs	r2, #7
 80056e8:	4013      	ands	r3, r2
 80056ea:	d002      	beq.n	80056f2 <pvPortMalloc+0x152>
 80056ec:	b672      	cpsid	i
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	e7fd      	b.n	80056ee <pvPortMalloc+0x14e>
    return pvReturn;
 80056f2:	697b      	ldr	r3, [r7, #20]
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b008      	add	sp, #32
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20001cd4 	.word	0x20001cd4
 8005700:	20001cd8 	.word	0x20001cd8
 8005704:	20001ccc 	.word	0x20001ccc
 8005708:	20001cdc 	.word	0x20001cdc
 800570c:	20001ce0 	.word	0x20001ce0

08005710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d036      	beq.n	8005790 <vPortFree+0x80>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005722:	2308      	movs	r3, #8
 8005724:	425b      	negs	r3, r3
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	18d3      	adds	r3, r2, r3
 800572a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	db02      	blt.n	800573e <vPortFree+0x2e>
 8005738:	b672      	cpsid	i
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	e7fd      	b.n	800573a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <vPortFree+0x3c>
 8005746:	b672      	cpsid	i
 8005748:	46c0      	nop			@ (mov r8, r8)
 800574a:	e7fd      	b.n	8005748 <vPortFree+0x38>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da1d      	bge.n	8005790 <vPortFree+0x80>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d119      	bne.n	8005790 <vPortFree+0x80>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	085a      	lsrs	r2, r3, #1
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005768:	f7fe fdde 	bl	8004328 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <vPortFree+0x88>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	18d2      	adds	r2, r2, r3
 8005776:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <vPortFree+0x88>)
 8005778:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0018      	movs	r0, r3
 800577e:	f000 f869 	bl	8005854 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005782:	4b06      	ldr	r3, [pc, #24]	@ (800579c <vPortFree+0x8c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <vPortFree+0x8c>)
 800578a:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 800578c:	f7fe fdd8 	bl	8004340 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005790:	46c0      	nop			@ (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b004      	add	sp, #16
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20001cd8 	.word	0x20001cd8
 800579c:	20001ce4 	.word	0x20001ce4

080057a0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	015b      	lsls	r3, r3, #5
 80057aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80057ac:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <prvHeapInit+0xa0>)
 80057ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2207      	movs	r2, #7
 80057b4:	4013      	ands	r3, r2
 80057b6:	d00c      	beq.n	80057d2 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3307      	adds	r3, #7
 80057bc:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2207      	movs	r2, #7
 80057c2:	4393      	bics	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005840 <prvHeapInit+0xa0>)
 80057ce:	18d3      	adds	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <prvHeapInit+0xa4>)
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80057dc:	4b19      	ldr	r3, [pc, #100]	@ (8005844 <prvHeapInit+0xa4>)
 80057de:	2200      	movs	r2, #0
 80057e0:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	18d3      	adds	r3, r2, r3
 80057e8:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80057ea:	2208      	movs	r2, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2207      	movs	r2, #7
 80057f6:	4393      	bics	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <prvHeapInit+0xa8>)
 80057fe:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8005800:	4b11      	ldr	r3, [pc, #68]	@ (8005848 <prvHeapInit+0xa8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005808:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <prvHeapInit+0xa8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800581e:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <prvHeapInit+0xa8>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4b08      	ldr	r3, [pc, #32]	@ (800584c <prvHeapInit+0xac>)
 800582c:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <prvHeapInit+0xb0>)
 8005834:	601a      	str	r2, [r3, #0]
}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	46bd      	mov	sp, r7
 800583a:	b004      	add	sp, #16
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	20000ccc 	.word	0x20000ccc
 8005844:	20001ccc 	.word	0x20001ccc
 8005848:	20001cd4 	.word	0x20001cd4
 800584c:	20001cdc 	.word	0x20001cdc
 8005850:	20001cd8 	.word	0x20001cd8

08005854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800585c:	4b27      	ldr	r3, [pc, #156]	@ (80058fc <prvInsertBlockIntoFreeList+0xa8>)
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e002      	b.n	8005868 <prvInsertBlockIntoFreeList+0x14>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	429a      	cmp	r2, r3
 8005870:	d8f7      	bhi.n	8005862 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	18d3      	adds	r3, r2, r3
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	d108      	bne.n	8005896 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	18d2      	adds	r2, r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	18d2      	adds	r2, r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d118      	bne.n	80058dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b14      	ldr	r3, [pc, #80]	@ (8005900 <prvInsertBlockIntoFreeList+0xac>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d00d      	beq.n	80058d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	18d2      	adds	r2, r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	e008      	b.n	80058e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005900 <prvInsertBlockIntoFreeList+0xac>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e003      	b.n	80058e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d002      	beq.n	80058f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	20001ccc 	.word	0x20001ccc
 8005900:	20001cd4 	.word	0x20001cd4

08005904 <atoi>:
 8005904:	b510      	push	{r4, lr}
 8005906:	220a      	movs	r2, #10
 8005908:	2100      	movs	r1, #0
 800590a:	f000 f88b 	bl	8005a24 <strtol>
 800590e:	bd10      	pop	{r4, pc}

08005910 <_strtol_l.isra.0>:
 8005910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005912:	b085      	sub	sp, #20
 8005914:	0017      	movs	r7, r2
 8005916:	001e      	movs	r6, r3
 8005918:	9003      	str	r0, [sp, #12]
 800591a:	9101      	str	r1, [sp, #4]
 800591c:	2b24      	cmp	r3, #36	@ 0x24
 800591e:	d823      	bhi.n	8005968 <_strtol_l.isra.0+0x58>
 8005920:	000c      	movs	r4, r1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d020      	beq.n	8005968 <_strtol_l.isra.0+0x58>
 8005926:	4b3d      	ldr	r3, [pc, #244]	@ (8005a1c <_strtol_l.isra.0+0x10c>)
 8005928:	2208      	movs	r2, #8
 800592a:	469c      	mov	ip, r3
 800592c:	0023      	movs	r3, r4
 800592e:	4661      	mov	r1, ip
 8005930:	781d      	ldrb	r5, [r3, #0]
 8005932:	3401      	adds	r4, #1
 8005934:	5d48      	ldrb	r0, [r1, r5]
 8005936:	0001      	movs	r1, r0
 8005938:	4011      	ands	r1, r2
 800593a:	4210      	tst	r0, r2
 800593c:	d1f6      	bne.n	800592c <_strtol_l.isra.0+0x1c>
 800593e:	2d2d      	cmp	r5, #45	@ 0x2d
 8005940:	d119      	bne.n	8005976 <_strtol_l.isra.0+0x66>
 8005942:	7825      	ldrb	r5, [r4, #0]
 8005944:	1c9c      	adds	r4, r3, #2
 8005946:	2301      	movs	r3, #1
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	2210      	movs	r2, #16
 800594c:	0033      	movs	r3, r6
 800594e:	4393      	bics	r3, r2
 8005950:	d11d      	bne.n	800598e <_strtol_l.isra.0+0x7e>
 8005952:	2d30      	cmp	r5, #48	@ 0x30
 8005954:	d115      	bne.n	8005982 <_strtol_l.isra.0+0x72>
 8005956:	2120      	movs	r1, #32
 8005958:	7823      	ldrb	r3, [r4, #0]
 800595a:	438b      	bics	r3, r1
 800595c:	2b58      	cmp	r3, #88	@ 0x58
 800595e:	d110      	bne.n	8005982 <_strtol_l.isra.0+0x72>
 8005960:	7865      	ldrb	r5, [r4, #1]
 8005962:	3402      	adds	r4, #2
 8005964:	2610      	movs	r6, #16
 8005966:	e012      	b.n	800598e <_strtol_l.isra.0+0x7e>
 8005968:	f000 fa48 	bl	8005dfc <__errno>
 800596c:	2316      	movs	r3, #22
 800596e:	6003      	str	r3, [r0, #0]
 8005970:	2000      	movs	r0, #0
 8005972:	b005      	add	sp, #20
 8005974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005976:	9100      	str	r1, [sp, #0]
 8005978:	2d2b      	cmp	r5, #43	@ 0x2b
 800597a:	d1e6      	bne.n	800594a <_strtol_l.isra.0+0x3a>
 800597c:	7825      	ldrb	r5, [r4, #0]
 800597e:	1c9c      	adds	r4, r3, #2
 8005980:	e7e3      	b.n	800594a <_strtol_l.isra.0+0x3a>
 8005982:	2e00      	cmp	r6, #0
 8005984:	d1ee      	bne.n	8005964 <_strtol_l.isra.0+0x54>
 8005986:	360a      	adds	r6, #10
 8005988:	2d30      	cmp	r5, #48	@ 0x30
 800598a:	d100      	bne.n	800598e <_strtol_l.isra.0+0x7e>
 800598c:	3e02      	subs	r6, #2
 800598e:	4a24      	ldr	r2, [pc, #144]	@ (8005a20 <_strtol_l.isra.0+0x110>)
 8005990:	9b00      	ldr	r3, [sp, #0]
 8005992:	4694      	mov	ip, r2
 8005994:	4463      	add	r3, ip
 8005996:	0031      	movs	r1, r6
 8005998:	0018      	movs	r0, r3
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	f7fa fc44 	bl	8000228 <__aeabi_uidivmod>
 80059a0:	2200      	movs	r2, #0
 80059a2:	4684      	mov	ip, r0
 80059a4:	0010      	movs	r0, r2
 80059a6:	002b      	movs	r3, r5
 80059a8:	3b30      	subs	r3, #48	@ 0x30
 80059aa:	2b09      	cmp	r3, #9
 80059ac:	d811      	bhi.n	80059d2 <_strtol_l.isra.0+0xc2>
 80059ae:	001d      	movs	r5, r3
 80059b0:	42ae      	cmp	r6, r5
 80059b2:	dd1d      	ble.n	80059f0 <_strtol_l.isra.0+0xe0>
 80059b4:	1c53      	adds	r3, r2, #1
 80059b6:	d009      	beq.n	80059cc <_strtol_l.isra.0+0xbc>
 80059b8:	2201      	movs	r2, #1
 80059ba:	4252      	negs	r2, r2
 80059bc:	4584      	cmp	ip, r0
 80059be:	d305      	bcc.n	80059cc <_strtol_l.isra.0+0xbc>
 80059c0:	d101      	bne.n	80059c6 <_strtol_l.isra.0+0xb6>
 80059c2:	42a9      	cmp	r1, r5
 80059c4:	db11      	blt.n	80059ea <_strtol_l.isra.0+0xda>
 80059c6:	2201      	movs	r2, #1
 80059c8:	4370      	muls	r0, r6
 80059ca:	1828      	adds	r0, r5, r0
 80059cc:	7825      	ldrb	r5, [r4, #0]
 80059ce:	3401      	adds	r4, #1
 80059d0:	e7e9      	b.n	80059a6 <_strtol_l.isra.0+0x96>
 80059d2:	002b      	movs	r3, r5
 80059d4:	3b41      	subs	r3, #65	@ 0x41
 80059d6:	2b19      	cmp	r3, #25
 80059d8:	d801      	bhi.n	80059de <_strtol_l.isra.0+0xce>
 80059da:	3d37      	subs	r5, #55	@ 0x37
 80059dc:	e7e8      	b.n	80059b0 <_strtol_l.isra.0+0xa0>
 80059de:	002b      	movs	r3, r5
 80059e0:	3b61      	subs	r3, #97	@ 0x61
 80059e2:	2b19      	cmp	r3, #25
 80059e4:	d804      	bhi.n	80059f0 <_strtol_l.isra.0+0xe0>
 80059e6:	3d57      	subs	r5, #87	@ 0x57
 80059e8:	e7e2      	b.n	80059b0 <_strtol_l.isra.0+0xa0>
 80059ea:	2201      	movs	r2, #1
 80059ec:	4252      	negs	r2, r2
 80059ee:	e7ed      	b.n	80059cc <_strtol_l.isra.0+0xbc>
 80059f0:	1c53      	adds	r3, r2, #1
 80059f2:	d108      	bne.n	8005a06 <_strtol_l.isra.0+0xf6>
 80059f4:	2322      	movs	r3, #34	@ 0x22
 80059f6:	9a03      	ldr	r2, [sp, #12]
 80059f8:	9802      	ldr	r0, [sp, #8]
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	d0b8      	beq.n	8005972 <_strtol_l.isra.0+0x62>
 8005a00:	1e63      	subs	r3, r4, #1
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	e007      	b.n	8005a16 <_strtol_l.isra.0+0x106>
 8005a06:	9b00      	ldr	r3, [sp, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d000      	beq.n	8005a0e <_strtol_l.isra.0+0xfe>
 8005a0c:	4240      	negs	r0, r0
 8005a0e:	2f00      	cmp	r7, #0
 8005a10:	d0af      	beq.n	8005972 <_strtol_l.isra.0+0x62>
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d1f4      	bne.n	8005a00 <_strtol_l.isra.0+0xf0>
 8005a16:	9b01      	ldr	r3, [sp, #4]
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	e7aa      	b.n	8005972 <_strtol_l.isra.0+0x62>
 8005a1c:	08006b71 	.word	0x08006b71
 8005a20:	7fffffff 	.word	0x7fffffff

08005a24 <strtol>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4c04      	ldr	r4, [pc, #16]	@ (8005a38 <strtol+0x14>)
 8005a28:	0013      	movs	r3, r2
 8005a2a:	000a      	movs	r2, r1
 8005a2c:	0001      	movs	r1, r0
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	f7ff ff6e 	bl	8005910 <_strtol_l.isra.0>
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	20000018 	.word	0x20000018

08005a3c <std>:
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	0004      	movs	r4, r0
 8005a42:	6003      	str	r3, [r0, #0]
 8005a44:	6043      	str	r3, [r0, #4]
 8005a46:	6083      	str	r3, [r0, #8]
 8005a48:	8181      	strh	r1, [r0, #12]
 8005a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a4c:	81c2      	strh	r2, [r0, #14]
 8005a4e:	6103      	str	r3, [r0, #16]
 8005a50:	6143      	str	r3, [r0, #20]
 8005a52:	6183      	str	r3, [r0, #24]
 8005a54:	0019      	movs	r1, r3
 8005a56:	2208      	movs	r2, #8
 8005a58:	305c      	adds	r0, #92	@ 0x5c
 8005a5a:	f000 f90f 	bl	8005c7c <memset>
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <std+0x50>)
 8005a60:	6224      	str	r4, [r4, #32]
 8005a62:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <std+0x54>)
 8005a66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a68:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <std+0x58>)
 8005a6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <std+0x5c>)
 8005a6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <std+0x60>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d005      	beq.n	8005a82 <std+0x46>
 8005a76:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <std+0x64>)
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	d002      	beq.n	8005a82 <std+0x46>
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <std+0x68>)
 8005a7e:	429c      	cmp	r4, r3
 8005a80:	d103      	bne.n	8005a8a <std+0x4e>
 8005a82:	0020      	movs	r0, r4
 8005a84:	3058      	adds	r0, #88	@ 0x58
 8005a86:	f000 f9e3 	bl	8005e50 <__retarget_lock_init_recursive>
 8005a8a:	bd10      	pop	{r4, pc}
 8005a8c:	08005be5 	.word	0x08005be5
 8005a90:	08005c0d 	.word	0x08005c0d
 8005a94:	08005c45 	.word	0x08005c45
 8005a98:	08005c71 	.word	0x08005c71
 8005a9c:	20001ce8 	.word	0x20001ce8
 8005aa0:	20001d50 	.word	0x20001d50
 8005aa4:	20001db8 	.word	0x20001db8

08005aa8 <stdio_exit_handler>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	4a03      	ldr	r2, [pc, #12]	@ (8005ab8 <stdio_exit_handler+0x10>)
 8005aac:	4903      	ldr	r1, [pc, #12]	@ (8005abc <stdio_exit_handler+0x14>)
 8005aae:	4804      	ldr	r0, [pc, #16]	@ (8005ac0 <stdio_exit_handler+0x18>)
 8005ab0:	f000 f86c 	bl	8005b8c <_fwalk_sglue>
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	2000000c 	.word	0x2000000c
 8005abc:	080066ed 	.word	0x080066ed
 8005ac0:	2000001c 	.word	0x2000001c

08005ac4 <cleanup_stdio>:
 8005ac4:	6841      	ldr	r1, [r0, #4]
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <cleanup_stdio+0x30>)
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	0004      	movs	r4, r0
 8005acc:	4299      	cmp	r1, r3
 8005ace:	d001      	beq.n	8005ad4 <cleanup_stdio+0x10>
 8005ad0:	f000 fe0c 	bl	80066ec <_fflush_r>
 8005ad4:	68a1      	ldr	r1, [r4, #8]
 8005ad6:	4b08      	ldr	r3, [pc, #32]	@ (8005af8 <cleanup_stdio+0x34>)
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d002      	beq.n	8005ae2 <cleanup_stdio+0x1e>
 8005adc:	0020      	movs	r0, r4
 8005ade:	f000 fe05 	bl	80066ec <_fflush_r>
 8005ae2:	68e1      	ldr	r1, [r4, #12]
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <cleanup_stdio+0x38>)
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d002      	beq.n	8005af0 <cleanup_stdio+0x2c>
 8005aea:	0020      	movs	r0, r4
 8005aec:	f000 fdfe 	bl	80066ec <_fflush_r>
 8005af0:	bd10      	pop	{r4, pc}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	20001ce8 	.word	0x20001ce8
 8005af8:	20001d50 	.word	0x20001d50
 8005afc:	20001db8 	.word	0x20001db8

08005b00 <global_stdio_init.part.0>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <global_stdio_init.part.0+0x28>)
 8005b04:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <global_stdio_init.part.0+0x2c>)
 8005b06:	2104      	movs	r1, #4
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	4809      	ldr	r0, [pc, #36]	@ (8005b30 <global_stdio_init.part.0+0x30>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f7ff ff95 	bl	8005a3c <std>
 8005b12:	2201      	movs	r2, #1
 8005b14:	2109      	movs	r1, #9
 8005b16:	4807      	ldr	r0, [pc, #28]	@ (8005b34 <global_stdio_init.part.0+0x34>)
 8005b18:	f7ff ff90 	bl	8005a3c <std>
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	2112      	movs	r1, #18
 8005b20:	4805      	ldr	r0, [pc, #20]	@ (8005b38 <global_stdio_init.part.0+0x38>)
 8005b22:	f7ff ff8b 	bl	8005a3c <std>
 8005b26:	bd10      	pop	{r4, pc}
 8005b28:	20001e20 	.word	0x20001e20
 8005b2c:	08005aa9 	.word	0x08005aa9
 8005b30:	20001ce8 	.word	0x20001ce8
 8005b34:	20001d50 	.word	0x20001d50
 8005b38:	20001db8 	.word	0x20001db8

08005b3c <__sfp_lock_acquire>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4802      	ldr	r0, [pc, #8]	@ (8005b48 <__sfp_lock_acquire+0xc>)
 8005b40:	f000 f987 	bl	8005e52 <__retarget_lock_acquire_recursive>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	20001e29 	.word	0x20001e29

08005b4c <__sfp_lock_release>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4802      	ldr	r0, [pc, #8]	@ (8005b58 <__sfp_lock_release+0xc>)
 8005b50:	f000 f980 	bl	8005e54 <__retarget_lock_release_recursive>
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	46c0      	nop			@ (mov r8, r8)
 8005b58:	20001e29 	.word	0x20001e29

08005b5c <__sinit>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	0004      	movs	r4, r0
 8005b60:	f7ff ffec 	bl	8005b3c <__sfp_lock_acquire>
 8005b64:	6a23      	ldr	r3, [r4, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <__sinit+0x14>
 8005b6a:	f7ff ffef 	bl	8005b4c <__sfp_lock_release>
 8005b6e:	bd10      	pop	{r4, pc}
 8005b70:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <__sinit+0x28>)
 8005b72:	6223      	str	r3, [r4, #32]
 8005b74:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <__sinit+0x2c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f6      	bne.n	8005b6a <__sinit+0xe>
 8005b7c:	f7ff ffc0 	bl	8005b00 <global_stdio_init.part.0>
 8005b80:	e7f3      	b.n	8005b6a <__sinit+0xe>
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	08005ac5 	.word	0x08005ac5
 8005b88:	20001e20 	.word	0x20001e20

08005b8c <_fwalk_sglue>:
 8005b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b8e:	0014      	movs	r4, r2
 8005b90:	2600      	movs	r6, #0
 8005b92:	9000      	str	r0, [sp, #0]
 8005b94:	9101      	str	r1, [sp, #4]
 8005b96:	68a5      	ldr	r5, [r4, #8]
 8005b98:	6867      	ldr	r7, [r4, #4]
 8005b9a:	3f01      	subs	r7, #1
 8005b9c:	d504      	bpl.n	8005ba8 <_fwalk_sglue+0x1c>
 8005b9e:	6824      	ldr	r4, [r4, #0]
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d1f8      	bne.n	8005b96 <_fwalk_sglue+0xa>
 8005ba4:	0030      	movs	r0, r6
 8005ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ba8:	89ab      	ldrh	r3, [r5, #12]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d908      	bls.n	8005bc0 <_fwalk_sglue+0x34>
 8005bae:	220e      	movs	r2, #14
 8005bb0:	5eab      	ldrsh	r3, [r5, r2]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	d004      	beq.n	8005bc0 <_fwalk_sglue+0x34>
 8005bb6:	0029      	movs	r1, r5
 8005bb8:	9800      	ldr	r0, [sp, #0]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	4798      	blx	r3
 8005bbe:	4306      	orrs	r6, r0
 8005bc0:	3568      	adds	r5, #104	@ 0x68
 8005bc2:	e7ea      	b.n	8005b9a <_fwalk_sglue+0xe>

08005bc4 <iprintf>:
 8005bc4:	b40f      	push	{r0, r1, r2, r3}
 8005bc6:	b507      	push	{r0, r1, r2, lr}
 8005bc8:	4905      	ldr	r1, [pc, #20]	@ (8005be0 <iprintf+0x1c>)
 8005bca:	ab04      	add	r3, sp, #16
 8005bcc:	6808      	ldr	r0, [r1, #0]
 8005bce:	cb04      	ldmia	r3!, {r2}
 8005bd0:	6881      	ldr	r1, [r0, #8]
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	f000 fa6c 	bl	80060b0 <_vfiprintf_r>
 8005bd8:	b003      	add	sp, #12
 8005bda:	bc08      	pop	{r3}
 8005bdc:	b004      	add	sp, #16
 8005bde:	4718      	bx	r3
 8005be0:	20000018 	.word	0x20000018

08005be4 <__sread>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	000c      	movs	r4, r1
 8005be8:	250e      	movs	r5, #14
 8005bea:	5f49      	ldrsh	r1, [r1, r5]
 8005bec:	f000 f8de 	bl	8005dac <_read_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	db03      	blt.n	8005bfc <__sread+0x18>
 8005bf4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005bf6:	181b      	adds	r3, r3, r0
 8005bf8:	6563      	str	r3, [r4, #84]	@ 0x54
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	4a02      	ldr	r2, [pc, #8]	@ (8005c08 <__sread+0x24>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	e7f9      	b.n	8005bfa <__sread+0x16>
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	ffffefff 	.word	0xffffefff

08005c0c <__swrite>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	001f      	movs	r7, r3
 8005c10:	898b      	ldrh	r3, [r1, #12]
 8005c12:	0005      	movs	r5, r0
 8005c14:	000c      	movs	r4, r1
 8005c16:	0016      	movs	r6, r2
 8005c18:	05db      	lsls	r3, r3, #23
 8005c1a:	d505      	bpl.n	8005c28 <__swrite+0x1c>
 8005c1c:	230e      	movs	r3, #14
 8005c1e:	5ec9      	ldrsh	r1, [r1, r3]
 8005c20:	2200      	movs	r2, #0
 8005c22:	2302      	movs	r3, #2
 8005c24:	f000 f8ae 	bl	8005d84 <_lseek_r>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	4a05      	ldr	r2, [pc, #20]	@ (8005c40 <__swrite+0x34>)
 8005c2c:	0028      	movs	r0, r5
 8005c2e:	4013      	ands	r3, r2
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	0032      	movs	r2, r6
 8005c34:	230e      	movs	r3, #14
 8005c36:	5ee1      	ldrsh	r1, [r4, r3]
 8005c38:	003b      	movs	r3, r7
 8005c3a:	f000 f8cb 	bl	8005dd4 <_write_r>
 8005c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c40:	ffffefff 	.word	0xffffefff

08005c44 <__sseek>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	000c      	movs	r4, r1
 8005c48:	250e      	movs	r5, #14
 8005c4a:	5f49      	ldrsh	r1, [r1, r5]
 8005c4c:	f000 f89a 	bl	8005d84 <_lseek_r>
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	1c42      	adds	r2, r0, #1
 8005c54:	d103      	bne.n	8005c5e <__sseek+0x1a>
 8005c56:	4a05      	ldr	r2, [pc, #20]	@ (8005c6c <__sseek+0x28>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	2280      	movs	r2, #128	@ 0x80
 8005c60:	0152      	lsls	r2, r2, #5
 8005c62:	4313      	orrs	r3, r2
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c68:	e7f8      	b.n	8005c5c <__sseek+0x18>
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	ffffefff 	.word	0xffffefff

08005c70 <__sclose>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	230e      	movs	r3, #14
 8005c74:	5ec9      	ldrsh	r1, [r1, r3]
 8005c76:	f000 f809 	bl	8005c8c <_close_r>
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <memset>:
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	1882      	adds	r2, r0, r2
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d100      	bne.n	8005c86 <memset+0xa>
 8005c84:	4770      	bx	lr
 8005c86:	7019      	strb	r1, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	e7f9      	b.n	8005c80 <memset+0x4>

08005c8c <_close_r>:
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	b570      	push	{r4, r5, r6, lr}
 8005c90:	4d06      	ldr	r5, [pc, #24]	@ (8005cac <_close_r+0x20>)
 8005c92:	0004      	movs	r4, r0
 8005c94:	0008      	movs	r0, r1
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	f7fc fd85 	bl	80027a6 <_close>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_close_r+0x1c>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d000      	beq.n	8005ca8 <_close_r+0x1c>
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	20001e24 	.word	0x20001e24

08005cb0 <_reclaim_reent>:
 8005cb0:	4b33      	ldr	r3, [pc, #204]	@ (8005d80 <_reclaim_reent+0xd0>)
 8005cb2:	b570      	push	{r4, r5, r6, lr}
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	0004      	movs	r4, r0
 8005cb8:	4283      	cmp	r3, r0
 8005cba:	d05f      	beq.n	8005d7c <_reclaim_reent+0xcc>
 8005cbc:	69c3      	ldr	r3, [r0, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d027      	beq.n	8005d12 <_reclaim_reent+0x62>
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00d      	beq.n	8005ce4 <_reclaim_reent+0x34>
 8005cc8:	2500      	movs	r5, #0
 8005cca:	69e3      	ldr	r3, [r4, #28]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	5959      	ldr	r1, [r3, r5]
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	d118      	bne.n	8005d06 <_reclaim_reent+0x56>
 8005cd4:	3504      	adds	r5, #4
 8005cd6:	2d80      	cmp	r5, #128	@ 0x80
 8005cd8:	d1f7      	bne.n	8005cca <_reclaim_reent+0x1a>
 8005cda:	69e3      	ldr	r3, [r4, #28]
 8005cdc:	0020      	movs	r0, r4
 8005cde:	68d9      	ldr	r1, [r3, #12]
 8005ce0:	f000 f8c2 	bl	8005e68 <_free_r>
 8005ce4:	69e3      	ldr	r3, [r4, #28]
 8005ce6:	6819      	ldr	r1, [r3, #0]
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d002      	beq.n	8005cf2 <_reclaim_reent+0x42>
 8005cec:	0020      	movs	r0, r4
 8005cee:	f000 f8bb 	bl	8005e68 <_free_r>
 8005cf2:	69e3      	ldr	r3, [r4, #28]
 8005cf4:	689d      	ldr	r5, [r3, #8]
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	d00b      	beq.n	8005d12 <_reclaim_reent+0x62>
 8005cfa:	0029      	movs	r1, r5
 8005cfc:	0020      	movs	r0, r4
 8005cfe:	682d      	ldr	r5, [r5, #0]
 8005d00:	f000 f8b2 	bl	8005e68 <_free_r>
 8005d04:	e7f7      	b.n	8005cf6 <_reclaim_reent+0x46>
 8005d06:	680e      	ldr	r6, [r1, #0]
 8005d08:	0020      	movs	r0, r4
 8005d0a:	f000 f8ad 	bl	8005e68 <_free_r>
 8005d0e:	0031      	movs	r1, r6
 8005d10:	e7de      	b.n	8005cd0 <_reclaim_reent+0x20>
 8005d12:	6961      	ldr	r1, [r4, #20]
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d002      	beq.n	8005d1e <_reclaim_reent+0x6e>
 8005d18:	0020      	movs	r0, r4
 8005d1a:	f000 f8a5 	bl	8005e68 <_free_r>
 8005d1e:	69e1      	ldr	r1, [r4, #28]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d002      	beq.n	8005d2a <_reclaim_reent+0x7a>
 8005d24:	0020      	movs	r0, r4
 8005d26:	f000 f89f 	bl	8005e68 <_free_r>
 8005d2a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d2c:	2900      	cmp	r1, #0
 8005d2e:	d002      	beq.n	8005d36 <_reclaim_reent+0x86>
 8005d30:	0020      	movs	r0, r4
 8005d32:	f000 f899 	bl	8005e68 <_free_r>
 8005d36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	d002      	beq.n	8005d42 <_reclaim_reent+0x92>
 8005d3c:	0020      	movs	r0, r4
 8005d3e:	f000 f893 	bl	8005e68 <_free_r>
 8005d42:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d002      	beq.n	8005d4e <_reclaim_reent+0x9e>
 8005d48:	0020      	movs	r0, r4
 8005d4a:	f000 f88d 	bl	8005e68 <_free_r>
 8005d4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005d50:	2900      	cmp	r1, #0
 8005d52:	d002      	beq.n	8005d5a <_reclaim_reent+0xaa>
 8005d54:	0020      	movs	r0, r4
 8005d56:	f000 f887 	bl	8005e68 <_free_r>
 8005d5a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	d002      	beq.n	8005d66 <_reclaim_reent+0xb6>
 8005d60:	0020      	movs	r0, r4
 8005d62:	f000 f881 	bl	8005e68 <_free_r>
 8005d66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	d002      	beq.n	8005d72 <_reclaim_reent+0xc2>
 8005d6c:	0020      	movs	r0, r4
 8005d6e:	f000 f87b 	bl	8005e68 <_free_r>
 8005d72:	6a23      	ldr	r3, [r4, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <_reclaim_reent+0xcc>
 8005d78:	0020      	movs	r0, r4
 8005d7a:	4798      	blx	r3
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	20000018 	.word	0x20000018

08005d84 <_lseek_r>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	0004      	movs	r4, r0
 8005d88:	0008      	movs	r0, r1
 8005d8a:	0011      	movs	r1, r2
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4d05      	ldr	r5, [pc, #20]	@ (8005da8 <_lseek_r+0x24>)
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	f7fc fd28 	bl	80027e8 <_lseek>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d103      	bne.n	8005da4 <_lseek_r+0x20>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d000      	beq.n	8005da4 <_lseek_r+0x20>
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	20001e24 	.word	0x20001e24

08005dac <_read_r>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	0004      	movs	r4, r0
 8005db0:	0008      	movs	r0, r1
 8005db2:	0011      	movs	r1, r2
 8005db4:	001a      	movs	r2, r3
 8005db6:	2300      	movs	r3, #0
 8005db8:	4d05      	ldr	r5, [pc, #20]	@ (8005dd0 <_read_r+0x24>)
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	f7fc fcd6 	bl	800276c <_read>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d103      	bne.n	8005dcc <_read_r+0x20>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d000      	beq.n	8005dcc <_read_r+0x20>
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	20001e24 	.word	0x20001e24

08005dd4 <_write_r>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	0004      	movs	r4, r0
 8005dd8:	0008      	movs	r0, r1
 8005dda:	0011      	movs	r1, r2
 8005ddc:	001a      	movs	r2, r3
 8005dde:	2300      	movs	r3, #0
 8005de0:	4d05      	ldr	r5, [pc, #20]	@ (8005df8 <_write_r+0x24>)
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fd f8a8 	bl	8002f38 <_write>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d103      	bne.n	8005df4 <_write_r+0x20>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d000      	beq.n	8005df4 <_write_r+0x20>
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	46c0      	nop			@ (mov r8, r8)
 8005df8:	20001e24 	.word	0x20001e24

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	@ (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	20000018 	.word	0x20000018

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	4c0c      	ldr	r4, [pc, #48]	@ (8005e40 <__libc_init_array+0x38>)
 8005e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e44 <__libc_init_array+0x3c>)
 8005e10:	1b64      	subs	r4, r4, r5
 8005e12:	10a4      	asrs	r4, r4, #2
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	2600      	movs	r6, #0
 8005e1a:	f000 fde1 	bl	80069e0 <_init>
 8005e1e:	4c0a      	ldr	r4, [pc, #40]	@ (8005e48 <__libc_init_array+0x40>)
 8005e20:	4d0a      	ldr	r5, [pc, #40]	@ (8005e4c <__libc_init_array+0x44>)
 8005e22:	1b64      	subs	r4, r4, r5
 8005e24:	10a4      	asrs	r4, r4, #2
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	00b3      	lsls	r3, r6, #2
 8005e2e:	58eb      	ldr	r3, [r5, r3]
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	00b3      	lsls	r3, r6, #2
 8005e38:	58eb      	ldr	r3, [r5, r3]
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	08006ca4 	.word	0x08006ca4
 8005e44:	08006ca4 	.word	0x08006ca4
 8005e48:	08006ca8 	.word	0x08006ca8
 8005e4c:	08006ca4 	.word	0x08006ca4

08005e50 <__retarget_lock_init_recursive>:
 8005e50:	4770      	bx	lr

08005e52 <__retarget_lock_acquire_recursive>:
 8005e52:	4770      	bx	lr

08005e54 <__retarget_lock_release_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <memcpy>:
 8005e56:	2300      	movs	r3, #0
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d100      	bne.n	8005e60 <memcpy+0xa>
 8005e5e:	bd10      	pop	{r4, pc}
 8005e60:	5ccc      	ldrb	r4, [r1, r3]
 8005e62:	54c4      	strb	r4, [r0, r3]
 8005e64:	3301      	adds	r3, #1
 8005e66:	e7f8      	b.n	8005e5a <memcpy+0x4>

08005e68 <_free_r>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	0005      	movs	r5, r0
 8005e6c:	1e0c      	subs	r4, r1, #0
 8005e6e:	d010      	beq.n	8005e92 <_free_r+0x2a>
 8005e70:	3c04      	subs	r4, #4
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da00      	bge.n	8005e7a <_free_r+0x12>
 8005e78:	18e4      	adds	r4, r4, r3
 8005e7a:	0028      	movs	r0, r5
 8005e7c:	f000 f8e0 	bl	8006040 <__malloc_lock>
 8005e80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef8 <_free_r+0x90>)
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <_free_r+0x2c>
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	6014      	str	r4, [r2, #0]
 8005e8c:	0028      	movs	r0, r5
 8005e8e:	f000 f8df 	bl	8006050 <__malloc_unlock>
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d908      	bls.n	8005eaa <_free_r+0x42>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	1821      	adds	r1, r4, r0
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	d1f3      	bne.n	8005e88 <_free_r+0x20>
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	1809      	adds	r1, r1, r0
 8005ea6:	6021      	str	r1, [r4, #0]
 8005ea8:	e7ee      	b.n	8005e88 <_free_r+0x20>
 8005eaa:	001a      	movs	r2, r3
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <_free_r+0x4e>
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	d9f9      	bls.n	8005eaa <_free_r+0x42>
 8005eb6:	6811      	ldr	r1, [r2, #0]
 8005eb8:	1850      	adds	r0, r2, r1
 8005eba:	42a0      	cmp	r0, r4
 8005ebc:	d10b      	bne.n	8005ed6 <_free_r+0x6e>
 8005ebe:	6820      	ldr	r0, [r4, #0]
 8005ec0:	1809      	adds	r1, r1, r0
 8005ec2:	1850      	adds	r0, r2, r1
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	4283      	cmp	r3, r0
 8005ec8:	d1e0      	bne.n	8005e8c <_free_r+0x24>
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	1841      	adds	r1, r0, r1
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	6053      	str	r3, [r2, #4]
 8005ed4:	e7da      	b.n	8005e8c <_free_r+0x24>
 8005ed6:	42a0      	cmp	r0, r4
 8005ed8:	d902      	bls.n	8005ee0 <_free_r+0x78>
 8005eda:	230c      	movs	r3, #12
 8005edc:	602b      	str	r3, [r5, #0]
 8005ede:	e7d5      	b.n	8005e8c <_free_r+0x24>
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	1821      	adds	r1, r4, r0
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	d103      	bne.n	8005ef0 <_free_r+0x88>
 8005ee8:	6819      	ldr	r1, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	1809      	adds	r1, r1, r0
 8005eee:	6021      	str	r1, [r4, #0]
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	6054      	str	r4, [r2, #4]
 8005ef4:	e7ca      	b.n	8005e8c <_free_r+0x24>
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	20001e30 	.word	0x20001e30

08005efc <sbrk_aligned>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4e0f      	ldr	r6, [pc, #60]	@ (8005f3c <sbrk_aligned+0x40>)
 8005f00:	000d      	movs	r5, r1
 8005f02:	6831      	ldr	r1, [r6, #0]
 8005f04:	0004      	movs	r4, r0
 8005f06:	2900      	cmp	r1, #0
 8005f08:	d102      	bne.n	8005f10 <sbrk_aligned+0x14>
 8005f0a:	f000 fcbb 	bl	8006884 <_sbrk_r>
 8005f0e:	6030      	str	r0, [r6, #0]
 8005f10:	0029      	movs	r1, r5
 8005f12:	0020      	movs	r0, r4
 8005f14:	f000 fcb6 	bl	8006884 <_sbrk_r>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d103      	bne.n	8005f24 <sbrk_aligned+0x28>
 8005f1c:	2501      	movs	r5, #1
 8005f1e:	426d      	negs	r5, r5
 8005f20:	0028      	movs	r0, r5
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	2303      	movs	r3, #3
 8005f26:	1cc5      	adds	r5, r0, #3
 8005f28:	439d      	bics	r5, r3
 8005f2a:	42a8      	cmp	r0, r5
 8005f2c:	d0f8      	beq.n	8005f20 <sbrk_aligned+0x24>
 8005f2e:	1a29      	subs	r1, r5, r0
 8005f30:	0020      	movs	r0, r4
 8005f32:	f000 fca7 	bl	8006884 <_sbrk_r>
 8005f36:	3001      	adds	r0, #1
 8005f38:	d1f2      	bne.n	8005f20 <sbrk_aligned+0x24>
 8005f3a:	e7ef      	b.n	8005f1c <sbrk_aligned+0x20>
 8005f3c:	20001e2c 	.word	0x20001e2c

08005f40 <_malloc_r>:
 8005f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f42:	2203      	movs	r2, #3
 8005f44:	1ccb      	adds	r3, r1, #3
 8005f46:	4393      	bics	r3, r2
 8005f48:	3308      	adds	r3, #8
 8005f4a:	0005      	movs	r5, r0
 8005f4c:	001f      	movs	r7, r3
 8005f4e:	2b0c      	cmp	r3, #12
 8005f50:	d234      	bcs.n	8005fbc <_malloc_r+0x7c>
 8005f52:	270c      	movs	r7, #12
 8005f54:	42b9      	cmp	r1, r7
 8005f56:	d833      	bhi.n	8005fc0 <_malloc_r+0x80>
 8005f58:	0028      	movs	r0, r5
 8005f5a:	f000 f871 	bl	8006040 <__malloc_lock>
 8005f5e:	4e37      	ldr	r6, [pc, #220]	@ (800603c <_malloc_r+0xfc>)
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	001c      	movs	r4, r3
 8005f64:	2c00      	cmp	r4, #0
 8005f66:	d12f      	bne.n	8005fc8 <_malloc_r+0x88>
 8005f68:	0039      	movs	r1, r7
 8005f6a:	0028      	movs	r0, r5
 8005f6c:	f7ff ffc6 	bl	8005efc <sbrk_aligned>
 8005f70:	0004      	movs	r4, r0
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	d15f      	bne.n	8006036 <_malloc_r+0xf6>
 8005f76:	6834      	ldr	r4, [r6, #0]
 8005f78:	9400      	str	r4, [sp, #0]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d14a      	bne.n	8006016 <_malloc_r+0xd6>
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	d052      	beq.n	800602a <_malloc_r+0xea>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	0028      	movs	r0, r5
 8005f88:	18e3      	adds	r3, r4, r3
 8005f8a:	9900      	ldr	r1, [sp, #0]
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	f000 fc79 	bl	8006884 <_sbrk_r>
 8005f92:	9b01      	ldr	r3, [sp, #4]
 8005f94:	4283      	cmp	r3, r0
 8005f96:	d148      	bne.n	800602a <_malloc_r+0xea>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	0028      	movs	r0, r5
 8005f9c:	1aff      	subs	r7, r7, r3
 8005f9e:	0039      	movs	r1, r7
 8005fa0:	f7ff ffac 	bl	8005efc <sbrk_aligned>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d040      	beq.n	800602a <_malloc_r+0xea>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	19db      	adds	r3, r3, r7
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	6833      	ldr	r3, [r6, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	d133      	bne.n	800601e <_malloc_r+0xde>
 8005fb6:	9b00      	ldr	r3, [sp, #0]
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	e019      	b.n	8005ff0 <_malloc_r+0xb0>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dac9      	bge.n	8005f54 <_malloc_r+0x14>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	1bc9      	subs	r1, r1, r7
 8005fcc:	d420      	bmi.n	8006010 <_malloc_r+0xd0>
 8005fce:	290b      	cmp	r1, #11
 8005fd0:	d90a      	bls.n	8005fe8 <_malloc_r+0xa8>
 8005fd2:	19e2      	adds	r2, r4, r7
 8005fd4:	6027      	str	r7, [r4, #0]
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	d104      	bne.n	8005fe4 <_malloc_r+0xa4>
 8005fda:	6032      	str	r2, [r6, #0]
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	6011      	str	r1, [r2, #0]
 8005fe0:	6053      	str	r3, [r2, #4]
 8005fe2:	e005      	b.n	8005ff0 <_malloc_r+0xb0>
 8005fe4:	605a      	str	r2, [r3, #4]
 8005fe6:	e7f9      	b.n	8005fdc <_malloc_r+0x9c>
 8005fe8:	6862      	ldr	r2, [r4, #4]
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	d10e      	bne.n	800600c <_malloc_r+0xcc>
 8005fee:	6032      	str	r2, [r6, #0]
 8005ff0:	0028      	movs	r0, r5
 8005ff2:	f000 f82d 	bl	8006050 <__malloc_unlock>
 8005ff6:	0020      	movs	r0, r4
 8005ff8:	2207      	movs	r2, #7
 8005ffa:	300b      	adds	r0, #11
 8005ffc:	1d23      	adds	r3, r4, #4
 8005ffe:	4390      	bics	r0, r2
 8006000:	1ac2      	subs	r2, r0, r3
 8006002:	4298      	cmp	r0, r3
 8006004:	d0df      	beq.n	8005fc6 <_malloc_r+0x86>
 8006006:	1a1b      	subs	r3, r3, r0
 8006008:	50a3      	str	r3, [r4, r2]
 800600a:	e7dc      	b.n	8005fc6 <_malloc_r+0x86>
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e7ef      	b.n	8005ff0 <_malloc_r+0xb0>
 8006010:	0023      	movs	r3, r4
 8006012:	6864      	ldr	r4, [r4, #4]
 8006014:	e7a6      	b.n	8005f64 <_malloc_r+0x24>
 8006016:	9c00      	ldr	r4, [sp, #0]
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	e7ad      	b.n	8005f7a <_malloc_r+0x3a>
 800601e:	001a      	movs	r2, r3
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	42a3      	cmp	r3, r4
 8006024:	d1fb      	bne.n	800601e <_malloc_r+0xde>
 8006026:	2300      	movs	r3, #0
 8006028:	e7da      	b.n	8005fe0 <_malloc_r+0xa0>
 800602a:	230c      	movs	r3, #12
 800602c:	0028      	movs	r0, r5
 800602e:	602b      	str	r3, [r5, #0]
 8006030:	f000 f80e 	bl	8006050 <__malloc_unlock>
 8006034:	e7c6      	b.n	8005fc4 <_malloc_r+0x84>
 8006036:	6007      	str	r7, [r0, #0]
 8006038:	e7da      	b.n	8005ff0 <_malloc_r+0xb0>
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	20001e30 	.word	0x20001e30

08006040 <__malloc_lock>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4802      	ldr	r0, [pc, #8]	@ (800604c <__malloc_lock+0xc>)
 8006044:	f7ff ff05 	bl	8005e52 <__retarget_lock_acquire_recursive>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	20001e28 	.word	0x20001e28

08006050 <__malloc_unlock>:
 8006050:	b510      	push	{r4, lr}
 8006052:	4802      	ldr	r0, [pc, #8]	@ (800605c <__malloc_unlock+0xc>)
 8006054:	f7ff fefe 	bl	8005e54 <__retarget_lock_release_recursive>
 8006058:	bd10      	pop	{r4, pc}
 800605a:	46c0      	nop			@ (mov r8, r8)
 800605c:	20001e28 	.word	0x20001e28

08006060 <__sfputc_r>:
 8006060:	6893      	ldr	r3, [r2, #8]
 8006062:	b510      	push	{r4, lr}
 8006064:	3b01      	subs	r3, #1
 8006066:	6093      	str	r3, [r2, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	da04      	bge.n	8006076 <__sfputc_r+0x16>
 800606c:	6994      	ldr	r4, [r2, #24]
 800606e:	42a3      	cmp	r3, r4
 8006070:	db07      	blt.n	8006082 <__sfputc_r+0x22>
 8006072:	290a      	cmp	r1, #10
 8006074:	d005      	beq.n	8006082 <__sfputc_r+0x22>
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	1c58      	adds	r0, r3, #1
 800607a:	6010      	str	r0, [r2, #0]
 800607c:	7019      	strb	r1, [r3, #0]
 800607e:	0008      	movs	r0, r1
 8006080:	bd10      	pop	{r4, pc}
 8006082:	f000 fb5e 	bl	8006742 <__swbuf_r>
 8006086:	0001      	movs	r1, r0
 8006088:	e7f9      	b.n	800607e <__sfputc_r+0x1e>

0800608a <__sfputs_r>:
 800608a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608c:	0006      	movs	r6, r0
 800608e:	000f      	movs	r7, r1
 8006090:	0014      	movs	r4, r2
 8006092:	18d5      	adds	r5, r2, r3
 8006094:	42ac      	cmp	r4, r5
 8006096:	d101      	bne.n	800609c <__sfputs_r+0x12>
 8006098:	2000      	movs	r0, #0
 800609a:	e007      	b.n	80060ac <__sfputs_r+0x22>
 800609c:	7821      	ldrb	r1, [r4, #0]
 800609e:	003a      	movs	r2, r7
 80060a0:	0030      	movs	r0, r6
 80060a2:	f7ff ffdd 	bl	8006060 <__sfputc_r>
 80060a6:	3401      	adds	r4, #1
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d1f3      	bne.n	8006094 <__sfputs_r+0xa>
 80060ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060b0 <_vfiprintf_r>:
 80060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b2:	b0a1      	sub	sp, #132	@ 0x84
 80060b4:	000f      	movs	r7, r1
 80060b6:	0015      	movs	r5, r2
 80060b8:	001e      	movs	r6, r3
 80060ba:	9003      	str	r0, [sp, #12]
 80060bc:	2800      	cmp	r0, #0
 80060be:	d004      	beq.n	80060ca <_vfiprintf_r+0x1a>
 80060c0:	6a03      	ldr	r3, [r0, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <_vfiprintf_r+0x1a>
 80060c6:	f7ff fd49 	bl	8005b5c <__sinit>
 80060ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060cc:	07db      	lsls	r3, r3, #31
 80060ce:	d405      	bmi.n	80060dc <_vfiprintf_r+0x2c>
 80060d0:	89bb      	ldrh	r3, [r7, #12]
 80060d2:	059b      	lsls	r3, r3, #22
 80060d4:	d402      	bmi.n	80060dc <_vfiprintf_r+0x2c>
 80060d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80060d8:	f7ff febb 	bl	8005e52 <__retarget_lock_acquire_recursive>
 80060dc:	89bb      	ldrh	r3, [r7, #12]
 80060de:	071b      	lsls	r3, r3, #28
 80060e0:	d502      	bpl.n	80060e8 <_vfiprintf_r+0x38>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d113      	bne.n	8006110 <_vfiprintf_r+0x60>
 80060e8:	0039      	movs	r1, r7
 80060ea:	9803      	ldr	r0, [sp, #12]
 80060ec:	f000 fb6c 	bl	80067c8 <__swsetup_r>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d00d      	beq.n	8006110 <_vfiprintf_r+0x60>
 80060f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060f6:	07db      	lsls	r3, r3, #31
 80060f8:	d503      	bpl.n	8006102 <_vfiprintf_r+0x52>
 80060fa:	2001      	movs	r0, #1
 80060fc:	4240      	negs	r0, r0
 80060fe:	b021      	add	sp, #132	@ 0x84
 8006100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006102:	89bb      	ldrh	r3, [r7, #12]
 8006104:	059b      	lsls	r3, r3, #22
 8006106:	d4f8      	bmi.n	80060fa <_vfiprintf_r+0x4a>
 8006108:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800610a:	f7ff fea3 	bl	8005e54 <__retarget_lock_release_recursive>
 800610e:	e7f4      	b.n	80060fa <_vfiprintf_r+0x4a>
 8006110:	2300      	movs	r3, #0
 8006112:	ac08      	add	r4, sp, #32
 8006114:	6163      	str	r3, [r4, #20]
 8006116:	3320      	adds	r3, #32
 8006118:	7663      	strb	r3, [r4, #25]
 800611a:	3310      	adds	r3, #16
 800611c:	76a3      	strb	r3, [r4, #26]
 800611e:	9607      	str	r6, [sp, #28]
 8006120:	002e      	movs	r6, r5
 8006122:	7833      	ldrb	r3, [r6, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <_vfiprintf_r+0x7c>
 8006128:	2b25      	cmp	r3, #37	@ 0x25
 800612a:	d148      	bne.n	80061be <_vfiprintf_r+0x10e>
 800612c:	1b73      	subs	r3, r6, r5
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	42ae      	cmp	r6, r5
 8006132:	d00b      	beq.n	800614c <_vfiprintf_r+0x9c>
 8006134:	002a      	movs	r2, r5
 8006136:	0039      	movs	r1, r7
 8006138:	9803      	ldr	r0, [sp, #12]
 800613a:	f7ff ffa6 	bl	800608a <__sfputs_r>
 800613e:	3001      	adds	r0, #1
 8006140:	d100      	bne.n	8006144 <_vfiprintf_r+0x94>
 8006142:	e0ae      	b.n	80062a2 <_vfiprintf_r+0x1f2>
 8006144:	6963      	ldr	r3, [r4, #20]
 8006146:	9a05      	ldr	r2, [sp, #20]
 8006148:	189b      	adds	r3, r3, r2
 800614a:	6163      	str	r3, [r4, #20]
 800614c:	7833      	ldrb	r3, [r6, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d100      	bne.n	8006154 <_vfiprintf_r+0xa4>
 8006152:	e0a6      	b.n	80062a2 <_vfiprintf_r+0x1f2>
 8006154:	2201      	movs	r2, #1
 8006156:	2300      	movs	r3, #0
 8006158:	4252      	negs	r2, r2
 800615a:	6062      	str	r2, [r4, #4]
 800615c:	a904      	add	r1, sp, #16
 800615e:	3254      	adds	r2, #84	@ 0x54
 8006160:	1852      	adds	r2, r2, r1
 8006162:	1c75      	adds	r5, r6, #1
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	60e3      	str	r3, [r4, #12]
 8006168:	60a3      	str	r3, [r4, #8]
 800616a:	7013      	strb	r3, [r2, #0]
 800616c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800616e:	4b59      	ldr	r3, [pc, #356]	@ (80062d4 <_vfiprintf_r+0x224>)
 8006170:	2205      	movs	r2, #5
 8006172:	0018      	movs	r0, r3
 8006174:	7829      	ldrb	r1, [r5, #0]
 8006176:	9305      	str	r3, [sp, #20]
 8006178:	f000 fb96 	bl	80068a8 <memchr>
 800617c:	1c6e      	adds	r6, r5, #1
 800617e:	2800      	cmp	r0, #0
 8006180:	d11f      	bne.n	80061c2 <_vfiprintf_r+0x112>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	06d3      	lsls	r3, r2, #27
 8006186:	d504      	bpl.n	8006192 <_vfiprintf_r+0xe2>
 8006188:	2353      	movs	r3, #83	@ 0x53
 800618a:	a904      	add	r1, sp, #16
 800618c:	185b      	adds	r3, r3, r1
 800618e:	2120      	movs	r1, #32
 8006190:	7019      	strb	r1, [r3, #0]
 8006192:	0713      	lsls	r3, r2, #28
 8006194:	d504      	bpl.n	80061a0 <_vfiprintf_r+0xf0>
 8006196:	2353      	movs	r3, #83	@ 0x53
 8006198:	a904      	add	r1, sp, #16
 800619a:	185b      	adds	r3, r3, r1
 800619c:	212b      	movs	r1, #43	@ 0x2b
 800619e:	7019      	strb	r1, [r3, #0]
 80061a0:	782b      	ldrb	r3, [r5, #0]
 80061a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a4:	d016      	beq.n	80061d4 <_vfiprintf_r+0x124>
 80061a6:	002e      	movs	r6, r5
 80061a8:	2100      	movs	r1, #0
 80061aa:	200a      	movs	r0, #10
 80061ac:	68e3      	ldr	r3, [r4, #12]
 80061ae:	7832      	ldrb	r2, [r6, #0]
 80061b0:	1c75      	adds	r5, r6, #1
 80061b2:	3a30      	subs	r2, #48	@ 0x30
 80061b4:	2a09      	cmp	r2, #9
 80061b6:	d950      	bls.n	800625a <_vfiprintf_r+0x1aa>
 80061b8:	2900      	cmp	r1, #0
 80061ba:	d111      	bne.n	80061e0 <_vfiprintf_r+0x130>
 80061bc:	e017      	b.n	80061ee <_vfiprintf_r+0x13e>
 80061be:	3601      	adds	r6, #1
 80061c0:	e7af      	b.n	8006122 <_vfiprintf_r+0x72>
 80061c2:	9b05      	ldr	r3, [sp, #20]
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	1ac0      	subs	r0, r0, r3
 80061c8:	2301      	movs	r3, #1
 80061ca:	4083      	lsls	r3, r0
 80061cc:	4313      	orrs	r3, r2
 80061ce:	0035      	movs	r5, r6
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	e7cc      	b.n	800616e <_vfiprintf_r+0xbe>
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	1d19      	adds	r1, r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	9107      	str	r1, [sp, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	db01      	blt.n	80061e4 <_vfiprintf_r+0x134>
 80061e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061e2:	e004      	b.n	80061ee <_vfiprintf_r+0x13e>
 80061e4:	425b      	negs	r3, r3
 80061e6:	60e3      	str	r3, [r4, #12]
 80061e8:	2302      	movs	r3, #2
 80061ea:	4313      	orrs	r3, r2
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	7833      	ldrb	r3, [r6, #0]
 80061f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80061f2:	d10c      	bne.n	800620e <_vfiprintf_r+0x15e>
 80061f4:	7873      	ldrb	r3, [r6, #1]
 80061f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80061f8:	d134      	bne.n	8006264 <_vfiprintf_r+0x1b4>
 80061fa:	9b07      	ldr	r3, [sp, #28]
 80061fc:	3602      	adds	r6, #2
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	9207      	str	r2, [sp, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	da01      	bge.n	800620c <_vfiprintf_r+0x15c>
 8006208:	2301      	movs	r3, #1
 800620a:	425b      	negs	r3, r3
 800620c:	9309      	str	r3, [sp, #36]	@ 0x24
 800620e:	4d32      	ldr	r5, [pc, #200]	@ (80062d8 <_vfiprintf_r+0x228>)
 8006210:	2203      	movs	r2, #3
 8006212:	0028      	movs	r0, r5
 8006214:	7831      	ldrb	r1, [r6, #0]
 8006216:	f000 fb47 	bl	80068a8 <memchr>
 800621a:	2800      	cmp	r0, #0
 800621c:	d006      	beq.n	800622c <_vfiprintf_r+0x17c>
 800621e:	2340      	movs	r3, #64	@ 0x40
 8006220:	1b40      	subs	r0, r0, r5
 8006222:	4083      	lsls	r3, r0
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	3601      	adds	r6, #1
 8006228:	4313      	orrs	r3, r2
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	7831      	ldrb	r1, [r6, #0]
 800622e:	2206      	movs	r2, #6
 8006230:	482a      	ldr	r0, [pc, #168]	@ (80062dc <_vfiprintf_r+0x22c>)
 8006232:	1c75      	adds	r5, r6, #1
 8006234:	7621      	strb	r1, [r4, #24]
 8006236:	f000 fb37 	bl	80068a8 <memchr>
 800623a:	2800      	cmp	r0, #0
 800623c:	d040      	beq.n	80062c0 <_vfiprintf_r+0x210>
 800623e:	4b28      	ldr	r3, [pc, #160]	@ (80062e0 <_vfiprintf_r+0x230>)
 8006240:	2b00      	cmp	r3, #0
 8006242:	d122      	bne.n	800628a <_vfiprintf_r+0x1da>
 8006244:	2207      	movs	r2, #7
 8006246:	9b07      	ldr	r3, [sp, #28]
 8006248:	3307      	adds	r3, #7
 800624a:	4393      	bics	r3, r2
 800624c:	3308      	adds	r3, #8
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	6963      	ldr	r3, [r4, #20]
 8006252:	9a04      	ldr	r2, [sp, #16]
 8006254:	189b      	adds	r3, r3, r2
 8006256:	6163      	str	r3, [r4, #20]
 8006258:	e762      	b.n	8006120 <_vfiprintf_r+0x70>
 800625a:	4343      	muls	r3, r0
 800625c:	002e      	movs	r6, r5
 800625e:	2101      	movs	r1, #1
 8006260:	189b      	adds	r3, r3, r2
 8006262:	e7a4      	b.n	80061ae <_vfiprintf_r+0xfe>
 8006264:	2300      	movs	r3, #0
 8006266:	200a      	movs	r0, #10
 8006268:	0019      	movs	r1, r3
 800626a:	3601      	adds	r6, #1
 800626c:	6063      	str	r3, [r4, #4]
 800626e:	7832      	ldrb	r2, [r6, #0]
 8006270:	1c75      	adds	r5, r6, #1
 8006272:	3a30      	subs	r2, #48	@ 0x30
 8006274:	2a09      	cmp	r2, #9
 8006276:	d903      	bls.n	8006280 <_vfiprintf_r+0x1d0>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0c8      	beq.n	800620e <_vfiprintf_r+0x15e>
 800627c:	9109      	str	r1, [sp, #36]	@ 0x24
 800627e:	e7c6      	b.n	800620e <_vfiprintf_r+0x15e>
 8006280:	4341      	muls	r1, r0
 8006282:	002e      	movs	r6, r5
 8006284:	2301      	movs	r3, #1
 8006286:	1889      	adds	r1, r1, r2
 8006288:	e7f1      	b.n	800626e <_vfiprintf_r+0x1be>
 800628a:	aa07      	add	r2, sp, #28
 800628c:	9200      	str	r2, [sp, #0]
 800628e:	0021      	movs	r1, r4
 8006290:	003a      	movs	r2, r7
 8006292:	4b14      	ldr	r3, [pc, #80]	@ (80062e4 <_vfiprintf_r+0x234>)
 8006294:	9803      	ldr	r0, [sp, #12]
 8006296:	e000      	b.n	800629a <_vfiprintf_r+0x1ea>
 8006298:	bf00      	nop
 800629a:	9004      	str	r0, [sp, #16]
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	3301      	adds	r3, #1
 80062a0:	d1d6      	bne.n	8006250 <_vfiprintf_r+0x1a0>
 80062a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062a4:	07db      	lsls	r3, r3, #31
 80062a6:	d405      	bmi.n	80062b4 <_vfiprintf_r+0x204>
 80062a8:	89bb      	ldrh	r3, [r7, #12]
 80062aa:	059b      	lsls	r3, r3, #22
 80062ac:	d402      	bmi.n	80062b4 <_vfiprintf_r+0x204>
 80062ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80062b0:	f7ff fdd0 	bl	8005e54 <__retarget_lock_release_recursive>
 80062b4:	89bb      	ldrh	r3, [r7, #12]
 80062b6:	065b      	lsls	r3, r3, #25
 80062b8:	d500      	bpl.n	80062bc <_vfiprintf_r+0x20c>
 80062ba:	e71e      	b.n	80060fa <_vfiprintf_r+0x4a>
 80062bc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80062be:	e71e      	b.n	80060fe <_vfiprintf_r+0x4e>
 80062c0:	aa07      	add	r2, sp, #28
 80062c2:	9200      	str	r2, [sp, #0]
 80062c4:	0021      	movs	r1, r4
 80062c6:	003a      	movs	r2, r7
 80062c8:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <_vfiprintf_r+0x234>)
 80062ca:	9803      	ldr	r0, [sp, #12]
 80062cc:	f000 f87c 	bl	80063c8 <_printf_i>
 80062d0:	e7e3      	b.n	800629a <_vfiprintf_r+0x1ea>
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	08006c71 	.word	0x08006c71
 80062d8:	08006c77 	.word	0x08006c77
 80062dc:	08006c7b 	.word	0x08006c7b
 80062e0:	00000000 	.word	0x00000000
 80062e4:	0800608b 	.word	0x0800608b

080062e8 <_printf_common>:
 80062e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ea:	0016      	movs	r6, r2
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	688a      	ldr	r2, [r1, #8]
 80062f0:	690b      	ldr	r3, [r1, #16]
 80062f2:	000c      	movs	r4, r1
 80062f4:	9000      	str	r0, [sp, #0]
 80062f6:	4293      	cmp	r3, r2
 80062f8:	da00      	bge.n	80062fc <_printf_common+0x14>
 80062fa:	0013      	movs	r3, r2
 80062fc:	0022      	movs	r2, r4
 80062fe:	6033      	str	r3, [r6, #0]
 8006300:	3243      	adds	r2, #67	@ 0x43
 8006302:	7812      	ldrb	r2, [r2, #0]
 8006304:	2a00      	cmp	r2, #0
 8006306:	d001      	beq.n	800630c <_printf_common+0x24>
 8006308:	3301      	adds	r3, #1
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	069b      	lsls	r3, r3, #26
 8006310:	d502      	bpl.n	8006318 <_printf_common+0x30>
 8006312:	6833      	ldr	r3, [r6, #0]
 8006314:	3302      	adds	r3, #2
 8006316:	6033      	str	r3, [r6, #0]
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	2306      	movs	r3, #6
 800631c:	0015      	movs	r5, r2
 800631e:	401d      	ands	r5, r3
 8006320:	421a      	tst	r2, r3
 8006322:	d027      	beq.n	8006374 <_printf_common+0x8c>
 8006324:	0023      	movs	r3, r4
 8006326:	3343      	adds	r3, #67	@ 0x43
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	1e5a      	subs	r2, r3, #1
 800632c:	4193      	sbcs	r3, r2
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	0692      	lsls	r2, r2, #26
 8006332:	d430      	bmi.n	8006396 <_printf_common+0xae>
 8006334:	0022      	movs	r2, r4
 8006336:	9901      	ldr	r1, [sp, #4]
 8006338:	9800      	ldr	r0, [sp, #0]
 800633a:	9d08      	ldr	r5, [sp, #32]
 800633c:	3243      	adds	r2, #67	@ 0x43
 800633e:	47a8      	blx	r5
 8006340:	3001      	adds	r0, #1
 8006342:	d025      	beq.n	8006390 <_printf_common+0xa8>
 8006344:	2206      	movs	r2, #6
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	2500      	movs	r5, #0
 800634a:	4013      	ands	r3, r2
 800634c:	2b04      	cmp	r3, #4
 800634e:	d105      	bne.n	800635c <_printf_common+0x74>
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	68e5      	ldr	r5, [r4, #12]
 8006354:	1aed      	subs	r5, r5, r3
 8006356:	43eb      	mvns	r3, r5
 8006358:	17db      	asrs	r3, r3, #31
 800635a:	401d      	ands	r5, r3
 800635c:	68a3      	ldr	r3, [r4, #8]
 800635e:	6922      	ldr	r2, [r4, #16]
 8006360:	4293      	cmp	r3, r2
 8006362:	dd01      	ble.n	8006368 <_printf_common+0x80>
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	18ed      	adds	r5, r5, r3
 8006368:	2600      	movs	r6, #0
 800636a:	42b5      	cmp	r5, r6
 800636c:	d120      	bne.n	80063b0 <_printf_common+0xc8>
 800636e:	2000      	movs	r0, #0
 8006370:	e010      	b.n	8006394 <_printf_common+0xac>
 8006372:	3501      	adds	r5, #1
 8006374:	68e3      	ldr	r3, [r4, #12]
 8006376:	6832      	ldr	r2, [r6, #0]
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	42ab      	cmp	r3, r5
 800637c:	ddd2      	ble.n	8006324 <_printf_common+0x3c>
 800637e:	0022      	movs	r2, r4
 8006380:	2301      	movs	r3, #1
 8006382:	9901      	ldr	r1, [sp, #4]
 8006384:	9800      	ldr	r0, [sp, #0]
 8006386:	9f08      	ldr	r7, [sp, #32]
 8006388:	3219      	adds	r2, #25
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	d1f0      	bne.n	8006372 <_printf_common+0x8a>
 8006390:	2001      	movs	r0, #1
 8006392:	4240      	negs	r0, r0
 8006394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006396:	2030      	movs	r0, #48	@ 0x30
 8006398:	18e1      	adds	r1, r4, r3
 800639a:	3143      	adds	r1, #67	@ 0x43
 800639c:	7008      	strb	r0, [r1, #0]
 800639e:	0021      	movs	r1, r4
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	3145      	adds	r1, #69	@ 0x45
 80063a4:	7809      	ldrb	r1, [r1, #0]
 80063a6:	18a2      	adds	r2, r4, r2
 80063a8:	3243      	adds	r2, #67	@ 0x43
 80063aa:	3302      	adds	r3, #2
 80063ac:	7011      	strb	r1, [r2, #0]
 80063ae:	e7c1      	b.n	8006334 <_printf_common+0x4c>
 80063b0:	0022      	movs	r2, r4
 80063b2:	2301      	movs	r3, #1
 80063b4:	9901      	ldr	r1, [sp, #4]
 80063b6:	9800      	ldr	r0, [sp, #0]
 80063b8:	9f08      	ldr	r7, [sp, #32]
 80063ba:	321a      	adds	r2, #26
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	d0e6      	beq.n	8006390 <_printf_common+0xa8>
 80063c2:	3601      	adds	r6, #1
 80063c4:	e7d1      	b.n	800636a <_printf_common+0x82>
	...

080063c8 <_printf_i>:
 80063c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ca:	b08b      	sub	sp, #44	@ 0x2c
 80063cc:	9206      	str	r2, [sp, #24]
 80063ce:	000a      	movs	r2, r1
 80063d0:	3243      	adds	r2, #67	@ 0x43
 80063d2:	9307      	str	r3, [sp, #28]
 80063d4:	9005      	str	r0, [sp, #20]
 80063d6:	9203      	str	r2, [sp, #12]
 80063d8:	7e0a      	ldrb	r2, [r1, #24]
 80063da:	000c      	movs	r4, r1
 80063dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063de:	2a78      	cmp	r2, #120	@ 0x78
 80063e0:	d809      	bhi.n	80063f6 <_printf_i+0x2e>
 80063e2:	2a62      	cmp	r2, #98	@ 0x62
 80063e4:	d80b      	bhi.n	80063fe <_printf_i+0x36>
 80063e6:	2a00      	cmp	r2, #0
 80063e8:	d100      	bne.n	80063ec <_printf_i+0x24>
 80063ea:	e0ba      	b.n	8006562 <_printf_i+0x19a>
 80063ec:	497a      	ldr	r1, [pc, #488]	@ (80065d8 <_printf_i+0x210>)
 80063ee:	9104      	str	r1, [sp, #16]
 80063f0:	2a58      	cmp	r2, #88	@ 0x58
 80063f2:	d100      	bne.n	80063f6 <_printf_i+0x2e>
 80063f4:	e08e      	b.n	8006514 <_printf_i+0x14c>
 80063f6:	0025      	movs	r5, r4
 80063f8:	3542      	adds	r5, #66	@ 0x42
 80063fa:	702a      	strb	r2, [r5, #0]
 80063fc:	e022      	b.n	8006444 <_printf_i+0x7c>
 80063fe:	0010      	movs	r0, r2
 8006400:	3863      	subs	r0, #99	@ 0x63
 8006402:	2815      	cmp	r0, #21
 8006404:	d8f7      	bhi.n	80063f6 <_printf_i+0x2e>
 8006406:	f7f9 fe7f 	bl	8000108 <__gnu_thumb1_case_shi>
 800640a:	0016      	.short	0x0016
 800640c:	fff6001f 	.word	0xfff6001f
 8006410:	fff6fff6 	.word	0xfff6fff6
 8006414:	001ffff6 	.word	0x001ffff6
 8006418:	fff6fff6 	.word	0xfff6fff6
 800641c:	fff6fff6 	.word	0xfff6fff6
 8006420:	0036009f 	.word	0x0036009f
 8006424:	fff6007e 	.word	0xfff6007e
 8006428:	00b0fff6 	.word	0x00b0fff6
 800642c:	0036fff6 	.word	0x0036fff6
 8006430:	fff6fff6 	.word	0xfff6fff6
 8006434:	0082      	.short	0x0082
 8006436:	0025      	movs	r5, r4
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	3542      	adds	r5, #66	@ 0x42
 800643c:	1d11      	adds	r1, r2, #4
 800643e:	6019      	str	r1, [r3, #0]
 8006440:	6813      	ldr	r3, [r2, #0]
 8006442:	702b      	strb	r3, [r5, #0]
 8006444:	2301      	movs	r3, #1
 8006446:	e09e      	b.n	8006586 <_printf_i+0x1be>
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	6809      	ldr	r1, [r1, #0]
 800644c:	1d02      	adds	r2, r0, #4
 800644e:	060d      	lsls	r5, r1, #24
 8006450:	d50b      	bpl.n	800646a <_printf_i+0xa2>
 8006452:	6806      	ldr	r6, [r0, #0]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	2e00      	cmp	r6, #0
 8006458:	da03      	bge.n	8006462 <_printf_i+0x9a>
 800645a:	232d      	movs	r3, #45	@ 0x2d
 800645c:	9a03      	ldr	r2, [sp, #12]
 800645e:	4276      	negs	r6, r6
 8006460:	7013      	strb	r3, [r2, #0]
 8006462:	4b5d      	ldr	r3, [pc, #372]	@ (80065d8 <_printf_i+0x210>)
 8006464:	270a      	movs	r7, #10
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	e018      	b.n	800649c <_printf_i+0xd4>
 800646a:	6806      	ldr	r6, [r0, #0]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	0649      	lsls	r1, r1, #25
 8006470:	d5f1      	bpl.n	8006456 <_printf_i+0x8e>
 8006472:	b236      	sxth	r6, r6
 8006474:	e7ef      	b.n	8006456 <_printf_i+0x8e>
 8006476:	6808      	ldr	r0, [r1, #0]
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	c940      	ldmia	r1!, {r6}
 800647c:	0605      	lsls	r5, r0, #24
 800647e:	d402      	bmi.n	8006486 <_printf_i+0xbe>
 8006480:	0640      	lsls	r0, r0, #25
 8006482:	d500      	bpl.n	8006486 <_printf_i+0xbe>
 8006484:	b2b6      	uxth	r6, r6
 8006486:	6019      	str	r1, [r3, #0]
 8006488:	4b53      	ldr	r3, [pc, #332]	@ (80065d8 <_printf_i+0x210>)
 800648a:	270a      	movs	r7, #10
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006490:	d100      	bne.n	8006494 <_printf_i+0xcc>
 8006492:	3f02      	subs	r7, #2
 8006494:	0023      	movs	r3, r4
 8006496:	2200      	movs	r2, #0
 8006498:	3343      	adds	r3, #67	@ 0x43
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	60a3      	str	r3, [r4, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	db06      	blt.n	80064b2 <_printf_i+0xea>
 80064a4:	2104      	movs	r1, #4
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	9d03      	ldr	r5, [sp, #12]
 80064aa:	438a      	bics	r2, r1
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	4333      	orrs	r3, r6
 80064b0:	d00c      	beq.n	80064cc <_printf_i+0x104>
 80064b2:	9d03      	ldr	r5, [sp, #12]
 80064b4:	0030      	movs	r0, r6
 80064b6:	0039      	movs	r1, r7
 80064b8:	f7f9 feb6 	bl	8000228 <__aeabi_uidivmod>
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	3d01      	subs	r5, #1
 80064c0:	5c5b      	ldrb	r3, [r3, r1]
 80064c2:	702b      	strb	r3, [r5, #0]
 80064c4:	0033      	movs	r3, r6
 80064c6:	0006      	movs	r6, r0
 80064c8:	429f      	cmp	r7, r3
 80064ca:	d9f3      	bls.n	80064b4 <_printf_i+0xec>
 80064cc:	2f08      	cmp	r7, #8
 80064ce:	d109      	bne.n	80064e4 <_printf_i+0x11c>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	07db      	lsls	r3, r3, #31
 80064d4:	d506      	bpl.n	80064e4 <_printf_i+0x11c>
 80064d6:	6862      	ldr	r2, [r4, #4]
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	dc02      	bgt.n	80064e4 <_printf_i+0x11c>
 80064de:	2330      	movs	r3, #48	@ 0x30
 80064e0:	3d01      	subs	r5, #1
 80064e2:	702b      	strb	r3, [r5, #0]
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	1b5b      	subs	r3, r3, r5
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	9b07      	ldr	r3, [sp, #28]
 80064ec:	0021      	movs	r1, r4
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	9805      	ldr	r0, [sp, #20]
 80064f2:	9b06      	ldr	r3, [sp, #24]
 80064f4:	aa09      	add	r2, sp, #36	@ 0x24
 80064f6:	f7ff fef7 	bl	80062e8 <_printf_common>
 80064fa:	3001      	adds	r0, #1
 80064fc:	d148      	bne.n	8006590 <_printf_i+0x1c8>
 80064fe:	2001      	movs	r0, #1
 8006500:	4240      	negs	r0, r0
 8006502:	b00b      	add	sp, #44	@ 0x2c
 8006504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006506:	2220      	movs	r2, #32
 8006508:	6809      	ldr	r1, [r1, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	6022      	str	r2, [r4, #0]
 800650e:	2278      	movs	r2, #120	@ 0x78
 8006510:	4932      	ldr	r1, [pc, #200]	@ (80065dc <_printf_i+0x214>)
 8006512:	9104      	str	r1, [sp, #16]
 8006514:	0021      	movs	r1, r4
 8006516:	3145      	adds	r1, #69	@ 0x45
 8006518:	700a      	strb	r2, [r1, #0]
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	c940      	ldmia	r1!, {r6}
 8006520:	0610      	lsls	r0, r2, #24
 8006522:	d402      	bmi.n	800652a <_printf_i+0x162>
 8006524:	0650      	lsls	r0, r2, #25
 8006526:	d500      	bpl.n	800652a <_printf_i+0x162>
 8006528:	b2b6      	uxth	r6, r6
 800652a:	6019      	str	r1, [r3, #0]
 800652c:	07d3      	lsls	r3, r2, #31
 800652e:	d502      	bpl.n	8006536 <_printf_i+0x16e>
 8006530:	2320      	movs	r3, #32
 8006532:	4313      	orrs	r3, r2
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	2e00      	cmp	r6, #0
 8006538:	d001      	beq.n	800653e <_printf_i+0x176>
 800653a:	2710      	movs	r7, #16
 800653c:	e7aa      	b.n	8006494 <_printf_i+0xcc>
 800653e:	2220      	movs	r2, #32
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	4393      	bics	r3, r2
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	e7f8      	b.n	800653a <_printf_i+0x172>
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	680d      	ldr	r5, [r1, #0]
 800654c:	1d10      	adds	r0, r2, #4
 800654e:	6949      	ldr	r1, [r1, #20]
 8006550:	6018      	str	r0, [r3, #0]
 8006552:	6813      	ldr	r3, [r2, #0]
 8006554:	062e      	lsls	r6, r5, #24
 8006556:	d501      	bpl.n	800655c <_printf_i+0x194>
 8006558:	6019      	str	r1, [r3, #0]
 800655a:	e002      	b.n	8006562 <_printf_i+0x19a>
 800655c:	066d      	lsls	r5, r5, #25
 800655e:	d5fb      	bpl.n	8006558 <_printf_i+0x190>
 8006560:	8019      	strh	r1, [r3, #0]
 8006562:	2300      	movs	r3, #0
 8006564:	9d03      	ldr	r5, [sp, #12]
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	e7bf      	b.n	80064ea <_printf_i+0x122>
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	1d11      	adds	r1, r2, #4
 800656e:	6019      	str	r1, [r3, #0]
 8006570:	6815      	ldr	r5, [r2, #0]
 8006572:	2100      	movs	r1, #0
 8006574:	0028      	movs	r0, r5
 8006576:	6862      	ldr	r2, [r4, #4]
 8006578:	f000 f996 	bl	80068a8 <memchr>
 800657c:	2800      	cmp	r0, #0
 800657e:	d001      	beq.n	8006584 <_printf_i+0x1bc>
 8006580:	1b40      	subs	r0, r0, r5
 8006582:	6060      	str	r0, [r4, #4]
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	2300      	movs	r3, #0
 800658a:	9a03      	ldr	r2, [sp, #12]
 800658c:	7013      	strb	r3, [r2, #0]
 800658e:	e7ac      	b.n	80064ea <_printf_i+0x122>
 8006590:	002a      	movs	r2, r5
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	9906      	ldr	r1, [sp, #24]
 8006596:	9805      	ldr	r0, [sp, #20]
 8006598:	9d07      	ldr	r5, [sp, #28]
 800659a:	47a8      	blx	r5
 800659c:	3001      	adds	r0, #1
 800659e:	d0ae      	beq.n	80064fe <_printf_i+0x136>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	079b      	lsls	r3, r3, #30
 80065a4:	d415      	bmi.n	80065d2 <_printf_i+0x20a>
 80065a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a8:	68e0      	ldr	r0, [r4, #12]
 80065aa:	4298      	cmp	r0, r3
 80065ac:	daa9      	bge.n	8006502 <_printf_i+0x13a>
 80065ae:	0018      	movs	r0, r3
 80065b0:	e7a7      	b.n	8006502 <_printf_i+0x13a>
 80065b2:	0022      	movs	r2, r4
 80065b4:	2301      	movs	r3, #1
 80065b6:	9906      	ldr	r1, [sp, #24]
 80065b8:	9805      	ldr	r0, [sp, #20]
 80065ba:	9e07      	ldr	r6, [sp, #28]
 80065bc:	3219      	adds	r2, #25
 80065be:	47b0      	blx	r6
 80065c0:	3001      	adds	r0, #1
 80065c2:	d09c      	beq.n	80064fe <_printf_i+0x136>
 80065c4:	3501      	adds	r5, #1
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	42ab      	cmp	r3, r5
 80065ce:	dcf0      	bgt.n	80065b2 <_printf_i+0x1ea>
 80065d0:	e7e9      	b.n	80065a6 <_printf_i+0x1de>
 80065d2:	2500      	movs	r5, #0
 80065d4:	e7f7      	b.n	80065c6 <_printf_i+0x1fe>
 80065d6:	46c0      	nop			@ (mov r8, r8)
 80065d8:	08006c82 	.word	0x08006c82
 80065dc:	08006c93 	.word	0x08006c93

080065e0 <__sflush_r>:
 80065e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065e2:	220c      	movs	r2, #12
 80065e4:	5e8b      	ldrsh	r3, [r1, r2]
 80065e6:	0005      	movs	r5, r0
 80065e8:	000c      	movs	r4, r1
 80065ea:	071a      	lsls	r2, r3, #28
 80065ec:	d456      	bmi.n	800669c <__sflush_r+0xbc>
 80065ee:	684a      	ldr	r2, [r1, #4]
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	dc02      	bgt.n	80065fa <__sflush_r+0x1a>
 80065f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	dd4e      	ble.n	8006698 <__sflush_r+0xb8>
 80065fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	d04b      	beq.n	8006698 <__sflush_r+0xb8>
 8006600:	2200      	movs	r2, #0
 8006602:	2080      	movs	r0, #128	@ 0x80
 8006604:	682e      	ldr	r6, [r5, #0]
 8006606:	602a      	str	r2, [r5, #0]
 8006608:	001a      	movs	r2, r3
 800660a:	0140      	lsls	r0, r0, #5
 800660c:	6a21      	ldr	r1, [r4, #32]
 800660e:	4002      	ands	r2, r0
 8006610:	4203      	tst	r3, r0
 8006612:	d033      	beq.n	800667c <__sflush_r+0x9c>
 8006614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	075b      	lsls	r3, r3, #29
 800661a:	d506      	bpl.n	800662a <__sflush_r+0x4a>
 800661c:	6863      	ldr	r3, [r4, #4]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <__sflush_r+0x4a>
 8006626:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006628:	1ad2      	subs	r2, r2, r3
 800662a:	2300      	movs	r3, #0
 800662c:	0028      	movs	r0, r5
 800662e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006630:	6a21      	ldr	r1, [r4, #32]
 8006632:	47b8      	blx	r7
 8006634:	89a2      	ldrh	r2, [r4, #12]
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	d106      	bne.n	8006648 <__sflush_r+0x68>
 800663a:	6829      	ldr	r1, [r5, #0]
 800663c:	291d      	cmp	r1, #29
 800663e:	d846      	bhi.n	80066ce <__sflush_r+0xee>
 8006640:	4b29      	ldr	r3, [pc, #164]	@ (80066e8 <__sflush_r+0x108>)
 8006642:	40cb      	lsrs	r3, r1
 8006644:	07db      	lsls	r3, r3, #31
 8006646:	d542      	bpl.n	80066ce <__sflush_r+0xee>
 8006648:	2300      	movs	r3, #0
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	04d2      	lsls	r2, r2, #19
 8006652:	d505      	bpl.n	8006660 <__sflush_r+0x80>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <__sflush_r+0x7e>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d100      	bne.n	8006660 <__sflush_r+0x80>
 800665e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006662:	602e      	str	r6, [r5, #0]
 8006664:	2900      	cmp	r1, #0
 8006666:	d017      	beq.n	8006698 <__sflush_r+0xb8>
 8006668:	0023      	movs	r3, r4
 800666a:	3344      	adds	r3, #68	@ 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__sflush_r+0x96>
 8006670:	0028      	movs	r0, r5
 8006672:	f7ff fbf9 	bl	8005e68 <_free_r>
 8006676:	2300      	movs	r3, #0
 8006678:	6363      	str	r3, [r4, #52]	@ 0x34
 800667a:	e00d      	b.n	8006698 <__sflush_r+0xb8>
 800667c:	2301      	movs	r3, #1
 800667e:	0028      	movs	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	0002      	movs	r2, r0
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d1c6      	bne.n	8006616 <__sflush_r+0x36>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0c3      	beq.n	8006616 <__sflush_r+0x36>
 800668e:	2b1d      	cmp	r3, #29
 8006690:	d001      	beq.n	8006696 <__sflush_r+0xb6>
 8006692:	2b16      	cmp	r3, #22
 8006694:	d11a      	bne.n	80066cc <__sflush_r+0xec>
 8006696:	602e      	str	r6, [r5, #0]
 8006698:	2000      	movs	r0, #0
 800669a:	e01e      	b.n	80066da <__sflush_r+0xfa>
 800669c:	690e      	ldr	r6, [r1, #16]
 800669e:	2e00      	cmp	r6, #0
 80066a0:	d0fa      	beq.n	8006698 <__sflush_r+0xb8>
 80066a2:	680f      	ldr	r7, [r1, #0]
 80066a4:	600e      	str	r6, [r1, #0]
 80066a6:	1bba      	subs	r2, r7, r6
 80066a8:	9201      	str	r2, [sp, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	079b      	lsls	r3, r3, #30
 80066ae:	d100      	bne.n	80066b2 <__sflush_r+0xd2>
 80066b0:	694a      	ldr	r2, [r1, #20]
 80066b2:	60a2      	str	r2, [r4, #8]
 80066b4:	9b01      	ldr	r3, [sp, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	ddee      	ble.n	8006698 <__sflush_r+0xb8>
 80066ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80066bc:	0032      	movs	r2, r6
 80066be:	001f      	movs	r7, r3
 80066c0:	0028      	movs	r0, r5
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	6a21      	ldr	r1, [r4, #32]
 80066c6:	47b8      	blx	r7
 80066c8:	2800      	cmp	r0, #0
 80066ca:	dc07      	bgt.n	80066dc <__sflush_r+0xfc>
 80066cc:	89a2      	ldrh	r2, [r4, #12]
 80066ce:	2340      	movs	r3, #64	@ 0x40
 80066d0:	2001      	movs	r0, #1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	b21b      	sxth	r3, r3
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	4240      	negs	r0, r0
 80066da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	1836      	adds	r6, r6, r0
 80066e0:	1a1b      	subs	r3, r3, r0
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	e7e6      	b.n	80066b4 <__sflush_r+0xd4>
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	20400001 	.word	0x20400001

080066ec <_fflush_r>:
 80066ec:	690b      	ldr	r3, [r1, #16]
 80066ee:	b570      	push	{r4, r5, r6, lr}
 80066f0:	0005      	movs	r5, r0
 80066f2:	000c      	movs	r4, r1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <_fflush_r+0x12>
 80066f8:	2500      	movs	r5, #0
 80066fa:	0028      	movs	r0, r5
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	2800      	cmp	r0, #0
 8006700:	d004      	beq.n	800670c <_fflush_r+0x20>
 8006702:	6a03      	ldr	r3, [r0, #32]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <_fflush_r+0x20>
 8006708:	f7ff fa28 	bl	8005b5c <__sinit>
 800670c:	220c      	movs	r2, #12
 800670e:	5ea3      	ldrsh	r3, [r4, r2]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f1      	beq.n	80066f8 <_fflush_r+0xc>
 8006714:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006716:	07d2      	lsls	r2, r2, #31
 8006718:	d404      	bmi.n	8006724 <_fflush_r+0x38>
 800671a:	059b      	lsls	r3, r3, #22
 800671c:	d402      	bmi.n	8006724 <_fflush_r+0x38>
 800671e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006720:	f7ff fb97 	bl	8005e52 <__retarget_lock_acquire_recursive>
 8006724:	0028      	movs	r0, r5
 8006726:	0021      	movs	r1, r4
 8006728:	f7ff ff5a 	bl	80065e0 <__sflush_r>
 800672c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800672e:	0005      	movs	r5, r0
 8006730:	07db      	lsls	r3, r3, #31
 8006732:	d4e2      	bmi.n	80066fa <_fflush_r+0xe>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	059b      	lsls	r3, r3, #22
 8006738:	d4df      	bmi.n	80066fa <_fflush_r+0xe>
 800673a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800673c:	f7ff fb8a 	bl	8005e54 <__retarget_lock_release_recursive>
 8006740:	e7db      	b.n	80066fa <_fflush_r+0xe>

08006742 <__swbuf_r>:
 8006742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006744:	0006      	movs	r6, r0
 8006746:	000d      	movs	r5, r1
 8006748:	0014      	movs	r4, r2
 800674a:	2800      	cmp	r0, #0
 800674c:	d004      	beq.n	8006758 <__swbuf_r+0x16>
 800674e:	6a03      	ldr	r3, [r0, #32]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <__swbuf_r+0x16>
 8006754:	f7ff fa02 	bl	8005b5c <__sinit>
 8006758:	69a3      	ldr	r3, [r4, #24]
 800675a:	60a3      	str	r3, [r4, #8]
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	071b      	lsls	r3, r3, #28
 8006760:	d502      	bpl.n	8006768 <__swbuf_r+0x26>
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <__swbuf_r+0x3a>
 8006768:	0021      	movs	r1, r4
 800676a:	0030      	movs	r0, r6
 800676c:	f000 f82c 	bl	80067c8 <__swsetup_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	d003      	beq.n	800677c <__swbuf_r+0x3a>
 8006774:	2501      	movs	r5, #1
 8006776:	426d      	negs	r5, r5
 8006778:	0028      	movs	r0, r5
 800677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	b2ef      	uxtb	r7, r5
 8006782:	1ac0      	subs	r0, r0, r3
 8006784:	6963      	ldr	r3, [r4, #20]
 8006786:	b2ed      	uxtb	r5, r5
 8006788:	4283      	cmp	r3, r0
 800678a:	dc05      	bgt.n	8006798 <__swbuf_r+0x56>
 800678c:	0021      	movs	r1, r4
 800678e:	0030      	movs	r0, r6
 8006790:	f7ff ffac 	bl	80066ec <_fflush_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	d1ed      	bne.n	8006774 <__swbuf_r+0x32>
 8006798:	68a3      	ldr	r3, [r4, #8]
 800679a:	3001      	adds	r0, #1
 800679c:	3b01      	subs	r3, #1
 800679e:	60a3      	str	r3, [r4, #8]
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	6022      	str	r2, [r4, #0]
 80067a6:	701f      	strb	r7, [r3, #0]
 80067a8:	6963      	ldr	r3, [r4, #20]
 80067aa:	4283      	cmp	r3, r0
 80067ac:	d004      	beq.n	80067b8 <__swbuf_r+0x76>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	07db      	lsls	r3, r3, #31
 80067b2:	d5e1      	bpl.n	8006778 <__swbuf_r+0x36>
 80067b4:	2d0a      	cmp	r5, #10
 80067b6:	d1df      	bne.n	8006778 <__swbuf_r+0x36>
 80067b8:	0021      	movs	r1, r4
 80067ba:	0030      	movs	r0, r6
 80067bc:	f7ff ff96 	bl	80066ec <_fflush_r>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d0d9      	beq.n	8006778 <__swbuf_r+0x36>
 80067c4:	e7d6      	b.n	8006774 <__swbuf_r+0x32>
	...

080067c8 <__swsetup_r>:
 80067c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006880 <__swsetup_r+0xb8>)
 80067ca:	b570      	push	{r4, r5, r6, lr}
 80067cc:	0005      	movs	r5, r0
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	000c      	movs	r4, r1
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d004      	beq.n	80067e0 <__swsetup_r+0x18>
 80067d6:	6a03      	ldr	r3, [r0, #32]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <__swsetup_r+0x18>
 80067dc:	f7ff f9be 	bl	8005b5c <__sinit>
 80067e0:	220c      	movs	r2, #12
 80067e2:	5ea3      	ldrsh	r3, [r4, r2]
 80067e4:	071a      	lsls	r2, r3, #28
 80067e6:	d423      	bmi.n	8006830 <__swsetup_r+0x68>
 80067e8:	06da      	lsls	r2, r3, #27
 80067ea:	d407      	bmi.n	80067fc <__swsetup_r+0x34>
 80067ec:	2209      	movs	r2, #9
 80067ee:	602a      	str	r2, [r5, #0]
 80067f0:	2240      	movs	r2, #64	@ 0x40
 80067f2:	2001      	movs	r0, #1
 80067f4:	4313      	orrs	r3, r2
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	4240      	negs	r0, r0
 80067fa:	e03a      	b.n	8006872 <__swsetup_r+0xaa>
 80067fc:	075b      	lsls	r3, r3, #29
 80067fe:	d513      	bpl.n	8006828 <__swsetup_r+0x60>
 8006800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006802:	2900      	cmp	r1, #0
 8006804:	d008      	beq.n	8006818 <__swsetup_r+0x50>
 8006806:	0023      	movs	r3, r4
 8006808:	3344      	adds	r3, #68	@ 0x44
 800680a:	4299      	cmp	r1, r3
 800680c:	d002      	beq.n	8006814 <__swsetup_r+0x4c>
 800680e:	0028      	movs	r0, r5
 8006810:	f7ff fb2a 	bl	8005e68 <_free_r>
 8006814:	2300      	movs	r3, #0
 8006816:	6363      	str	r3, [r4, #52]	@ 0x34
 8006818:	2224      	movs	r2, #36	@ 0x24
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	4393      	bics	r3, r2
 800681e:	81a3      	strh	r3, [r4, #12]
 8006820:	2300      	movs	r3, #0
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	2308      	movs	r3, #8
 800682a:	89a2      	ldrh	r2, [r4, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <__swsetup_r+0x86>
 8006836:	21a0      	movs	r1, #160	@ 0xa0
 8006838:	2280      	movs	r2, #128	@ 0x80
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	0089      	lsls	r1, r1, #2
 800683e:	0092      	lsls	r2, r2, #2
 8006840:	400b      	ands	r3, r1
 8006842:	4293      	cmp	r3, r2
 8006844:	d003      	beq.n	800684e <__swsetup_r+0x86>
 8006846:	0021      	movs	r1, r4
 8006848:	0028      	movs	r0, r5
 800684a:	f000 f863 	bl	8006914 <__smakebuf_r>
 800684e:	220c      	movs	r2, #12
 8006850:	5ea3      	ldrsh	r3, [r4, r2]
 8006852:	2101      	movs	r1, #1
 8006854:	001a      	movs	r2, r3
 8006856:	400a      	ands	r2, r1
 8006858:	420b      	tst	r3, r1
 800685a:	d00b      	beq.n	8006874 <__swsetup_r+0xac>
 800685c:	2200      	movs	r2, #0
 800685e:	60a2      	str	r2, [r4, #8]
 8006860:	6962      	ldr	r2, [r4, #20]
 8006862:	4252      	negs	r2, r2
 8006864:	61a2      	str	r2, [r4, #24]
 8006866:	2000      	movs	r0, #0
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	4282      	cmp	r2, r0
 800686c:	d101      	bne.n	8006872 <__swsetup_r+0xaa>
 800686e:	061a      	lsls	r2, r3, #24
 8006870:	d4be      	bmi.n	80067f0 <__swsetup_r+0x28>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	0799      	lsls	r1, r3, #30
 8006876:	d400      	bmi.n	800687a <__swsetup_r+0xb2>
 8006878:	6962      	ldr	r2, [r4, #20]
 800687a:	60a2      	str	r2, [r4, #8]
 800687c:	e7f3      	b.n	8006866 <__swsetup_r+0x9e>
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	20000018 	.word	0x20000018

08006884 <_sbrk_r>:
 8006884:	2300      	movs	r3, #0
 8006886:	b570      	push	{r4, r5, r6, lr}
 8006888:	4d06      	ldr	r5, [pc, #24]	@ (80068a4 <_sbrk_r+0x20>)
 800688a:	0004      	movs	r4, r0
 800688c:	0008      	movs	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fb ffb6 	bl	8002800 <_sbrk>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d103      	bne.n	80068a0 <_sbrk_r+0x1c>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d000      	beq.n	80068a0 <_sbrk_r+0x1c>
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
 80068a2:	46c0      	nop			@ (mov r8, r8)
 80068a4:	20001e24 	.word	0x20001e24

080068a8 <memchr>:
 80068a8:	b2c9      	uxtb	r1, r1
 80068aa:	1882      	adds	r2, r0, r2
 80068ac:	4290      	cmp	r0, r2
 80068ae:	d101      	bne.n	80068b4 <memchr+0xc>
 80068b0:	2000      	movs	r0, #0
 80068b2:	4770      	bx	lr
 80068b4:	7803      	ldrb	r3, [r0, #0]
 80068b6:	428b      	cmp	r3, r1
 80068b8:	d0fb      	beq.n	80068b2 <memchr+0xa>
 80068ba:	3001      	adds	r0, #1
 80068bc:	e7f6      	b.n	80068ac <memchr+0x4>
	...

080068c0 <__swhatbuf_r>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	000e      	movs	r6, r1
 80068c4:	001d      	movs	r5, r3
 80068c6:	230e      	movs	r3, #14
 80068c8:	5ec9      	ldrsh	r1, [r1, r3]
 80068ca:	0014      	movs	r4, r2
 80068cc:	b096      	sub	sp, #88	@ 0x58
 80068ce:	2900      	cmp	r1, #0
 80068d0:	da0c      	bge.n	80068ec <__swhatbuf_r+0x2c>
 80068d2:	89b2      	ldrh	r2, [r6, #12]
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	0011      	movs	r1, r2
 80068d8:	4019      	ands	r1, r3
 80068da:	421a      	tst	r2, r3
 80068dc:	d114      	bne.n	8006908 <__swhatbuf_r+0x48>
 80068de:	2380      	movs	r3, #128	@ 0x80
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	2000      	movs	r0, #0
 80068e4:	6029      	str	r1, [r5, #0]
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	b016      	add	sp, #88	@ 0x58
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	466a      	mov	r2, sp
 80068ee:	f000 f853 	bl	8006998 <_fstat_r>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	dbed      	blt.n	80068d2 <__swhatbuf_r+0x12>
 80068f6:	23f0      	movs	r3, #240	@ 0xf0
 80068f8:	9901      	ldr	r1, [sp, #4]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	4019      	ands	r1, r3
 80068fe:	4b04      	ldr	r3, [pc, #16]	@ (8006910 <__swhatbuf_r+0x50>)
 8006900:	18c9      	adds	r1, r1, r3
 8006902:	424b      	negs	r3, r1
 8006904:	4159      	adcs	r1, r3
 8006906:	e7ea      	b.n	80068de <__swhatbuf_r+0x1e>
 8006908:	2100      	movs	r1, #0
 800690a:	2340      	movs	r3, #64	@ 0x40
 800690c:	e7e9      	b.n	80068e2 <__swhatbuf_r+0x22>
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	ffffe000 	.word	0xffffe000

08006914 <__smakebuf_r>:
 8006914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006916:	2602      	movs	r6, #2
 8006918:	898b      	ldrh	r3, [r1, #12]
 800691a:	0005      	movs	r5, r0
 800691c:	000c      	movs	r4, r1
 800691e:	b085      	sub	sp, #20
 8006920:	4233      	tst	r3, r6
 8006922:	d007      	beq.n	8006934 <__smakebuf_r+0x20>
 8006924:	0023      	movs	r3, r4
 8006926:	3347      	adds	r3, #71	@ 0x47
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	2301      	movs	r3, #1
 800692e:	6163      	str	r3, [r4, #20]
 8006930:	b005      	add	sp, #20
 8006932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006934:	ab03      	add	r3, sp, #12
 8006936:	aa02      	add	r2, sp, #8
 8006938:	f7ff ffc2 	bl	80068c0 <__swhatbuf_r>
 800693c:	9f02      	ldr	r7, [sp, #8]
 800693e:	9001      	str	r0, [sp, #4]
 8006940:	0039      	movs	r1, r7
 8006942:	0028      	movs	r0, r5
 8006944:	f7ff fafc 	bl	8005f40 <_malloc_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	d108      	bne.n	800695e <__smakebuf_r+0x4a>
 800694c:	220c      	movs	r2, #12
 800694e:	5ea3      	ldrsh	r3, [r4, r2]
 8006950:	059a      	lsls	r2, r3, #22
 8006952:	d4ed      	bmi.n	8006930 <__smakebuf_r+0x1c>
 8006954:	2203      	movs	r2, #3
 8006956:	4393      	bics	r3, r2
 8006958:	431e      	orrs	r6, r3
 800695a:	81a6      	strh	r6, [r4, #12]
 800695c:	e7e2      	b.n	8006924 <__smakebuf_r+0x10>
 800695e:	2380      	movs	r3, #128	@ 0x80
 8006960:	89a2      	ldrh	r2, [r4, #12]
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	4313      	orrs	r3, r2
 8006966:	81a3      	strh	r3, [r4, #12]
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	6120      	str	r0, [r4, #16]
 800696c:	6167      	str	r7, [r4, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00c      	beq.n	800698c <__smakebuf_r+0x78>
 8006972:	0028      	movs	r0, r5
 8006974:	230e      	movs	r3, #14
 8006976:	5ee1      	ldrsh	r1, [r4, r3]
 8006978:	f000 f820 	bl	80069bc <_isatty_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	d005      	beq.n	800698c <__smakebuf_r+0x78>
 8006980:	2303      	movs	r3, #3
 8006982:	89a2      	ldrh	r2, [r4, #12]
 8006984:	439a      	bics	r2, r3
 8006986:	3b02      	subs	r3, #2
 8006988:	4313      	orrs	r3, r2
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	9a01      	ldr	r2, [sp, #4]
 8006990:	4313      	orrs	r3, r2
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	e7cc      	b.n	8006930 <__smakebuf_r+0x1c>
	...

08006998 <_fstat_r>:
 8006998:	2300      	movs	r3, #0
 800699a:	b570      	push	{r4, r5, r6, lr}
 800699c:	4d06      	ldr	r5, [pc, #24]	@ (80069b8 <_fstat_r+0x20>)
 800699e:	0004      	movs	r4, r0
 80069a0:	0008      	movs	r0, r1
 80069a2:	0011      	movs	r1, r2
 80069a4:	602b      	str	r3, [r5, #0]
 80069a6:	f7fb ff08 	bl	80027ba <_fstat>
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	d103      	bne.n	80069b6 <_fstat_r+0x1e>
 80069ae:	682b      	ldr	r3, [r5, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d000      	beq.n	80069b6 <_fstat_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	20001e24 	.word	0x20001e24

080069bc <_isatty_r>:
 80069bc:	2300      	movs	r3, #0
 80069be:	b570      	push	{r4, r5, r6, lr}
 80069c0:	4d06      	ldr	r5, [pc, #24]	@ (80069dc <_isatty_r+0x20>)
 80069c2:	0004      	movs	r4, r0
 80069c4:	0008      	movs	r0, r1
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	f7fb ff05 	bl	80027d6 <_isatty>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d103      	bne.n	80069d8 <_isatty_r+0x1c>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d000      	beq.n	80069d8 <_isatty_r+0x1c>
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
 80069da:	46c0      	nop			@ (mov r8, r8)
 80069dc:	20001e24 	.word	0x20001e24

080069e0 <_init>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	46c0      	nop			@ (mov r8, r8)
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr

080069ec <_fini>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	46c0      	nop			@ (mov r8, r8)
 80069f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f2:	bc08      	pop	{r3}
 80069f4:	469e      	mov	lr, r3
 80069f6:	4770      	bx	lr
