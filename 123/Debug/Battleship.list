
Battleship.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a2c  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000ae0  08000ae0  00001ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000af0  08000af0  00001af8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000af0  08000af0  00001af8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000af0  08000af8  00001af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000af0  08000af0  00001af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000af4  08000af4  00001af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000af8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000af8  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f9b  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004b8  00000000  00000000  00002abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00002f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000009a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e06  00000000  00000000  000030fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001973  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007af2  00000000  00000000  00006873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000e365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  0000e3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0000e57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08000ac8 	.word	0x08000ac8

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	08000ac8 	.word	0x08000ac8

080000fc <main>:
#include "user_uart.h"

void USER_GPIO_Init( void );

/* Superloop structure */
int main(void) {
 80000fc:	b580      	push	{r7, lr}
 80000fe:	b082      	sub	sp, #8
 8000100:	af00      	add	r7, sp, #0
	USER_RCC_Init();
 8000102:	f000 f9fb 	bl	80004fc <USER_RCC_Init>
    USER_GPIO_Init();       // Configura GPIOs
 8000106:	f000 f881 	bl	800020c <USER_GPIO_Init>
    USER_Keypad_Init();     // Inicializa el teclado
 800010a:	f000 fa31 	bl	8000570 <USER_Keypad_Init>
    USER_USART1_Init();     // Inicializa UART
 800010e:	f000 fba3 	bl	8000858 <USER_USART1_Init>
    USER_TIM3_Init();       // Configura Timer3
 8000112:	f000 fb51 	bl	80007b8 <USER_TIM3_Init>

    // Configura LEDs (PA5: verde, PA6: rojo)
    GPIOA->MODER &= ~(0x3UL << 10U);
 8000116:	23a0      	movs	r3, #160	@ 0xa0
 8000118:	05db      	lsls	r3, r3, #23
 800011a:	681a      	ldr	r2, [r3, #0]
 800011c:	23a0      	movs	r3, #160	@ 0xa0
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	4936      	ldr	r1, [pc, #216]	@ (80001fc <main+0x100>)
 8000122:	400a      	ands	r2, r1
 8000124:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0x1UL << 10U);  // PA5 como salida
 8000126:	23a0      	movs	r3, #160	@ 0xa0
 8000128:	05db      	lsls	r3, r3, #23
 800012a:	681a      	ldr	r2, [r3, #0]
 800012c:	23a0      	movs	r3, #160	@ 0xa0
 800012e:	05db      	lsls	r3, r3, #23
 8000130:	2180      	movs	r1, #128	@ 0x80
 8000132:	00c9      	lsls	r1, r1, #3
 8000134:	430a      	orrs	r2, r1
 8000136:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(0x3UL << 12U);
 8000138:	23a0      	movs	r3, #160	@ 0xa0
 800013a:	05db      	lsls	r3, r3, #23
 800013c:	681a      	ldr	r2, [r3, #0]
 800013e:	23a0      	movs	r3, #160	@ 0xa0
 8000140:	05db      	lsls	r3, r3, #23
 8000142:	492f      	ldr	r1, [pc, #188]	@ (8000200 <main+0x104>)
 8000144:	400a      	ands	r2, r1
 8000146:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0x1UL << 12U);  // PA6 como salida
 8000148:	23a0      	movs	r3, #160	@ 0xa0
 800014a:	05db      	lsls	r3, r3, #23
 800014c:	681a      	ldr	r2, [r3, #0]
 800014e:	23a0      	movs	r3, #160	@ 0xa0
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	2180      	movs	r1, #128	@ 0x80
 8000154:	0149      	lsls	r1, r1, #5
 8000156:	430a      	orrs	r2, r1
 8000158:	601a      	str	r2, [r3, #0]

    while(1) {
        // Paso 3: Leer tecla con anti-rebote
		char tecla = USER_Key();
 800015a:	f000 fac5 	bl	80006e8 <USER_Key>
 800015e:	0003      	movs	r3, r0
 8000160:	001a      	movs	r2, r3
 8000162:	1dbb      	adds	r3, r7, #6
 8000164:	701a      	strb	r2, [r3, #0]

//		printf("Tecla presionada: %c\r\n", tecla); // Depuraci√≥n
		if (tecla != '\0') {
 8000166:	1dbb      	adds	r3, r7, #6
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d004      	beq.n	8000178 <main+0x7c>
			USER_USART1_Transmit((uint8_t*)&tecla, 1);
 800016e:	1dbb      	adds	r3, r7, #6
 8000170:	2101      	movs	r1, #1
 8000172:	0018      	movs	r0, r3
 8000174:	f000 fc3c 	bl	80009f0 <USER_USART1_Transmit>
		}

        // Paso 4: Recibir por UART
        if(USART1->ISR & (1U << 5)) {  // Si hay dato recibido
 8000178:	4b22      	ldr	r3, [pc, #136]	@ (8000204 <main+0x108>)
 800017a:	69db      	ldr	r3, [r3, #28]
 800017c:	2220      	movs	r2, #32
 800017e:	4013      	ands	r3, r2
 8000180:	d0eb      	beq.n	800015a <main+0x5e>
            char recibido = USART1->RDR;
 8000182:	4b20      	ldr	r3, [pc, #128]	@ (8000204 <main+0x108>)
 8000184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000186:	1dfb      	adds	r3, r7, #7
 8000188:	701a      	strb	r2, [r3, #0]
            if(recibido == 'H') {
 800018a:	1dfb      	adds	r3, r7, #7
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	2b48      	cmp	r3, #72	@ 0x48
 8000190:	d117      	bne.n	80001c2 <main+0xc6>
                GPIOA->ODR |= (1U << 5);  // Encender LED verde
 8000192:	23a0      	movs	r3, #160	@ 0xa0
 8000194:	05db      	lsls	r3, r3, #23
 8000196:	695a      	ldr	r2, [r3, #20]
 8000198:	23a0      	movs	r3, #160	@ 0xa0
 800019a:	05db      	lsls	r3, r3, #23
 800019c:	2120      	movs	r1, #32
 800019e:	430a      	orrs	r2, r1
 80001a0:	615a      	str	r2, [r3, #20]
                USER_TIM3_Delay(479, 999);  // 1 segundo
 80001a2:	4a19      	ldr	r2, [pc, #100]	@ (8000208 <main+0x10c>)
 80001a4:	23e0      	movs	r3, #224	@ 0xe0
 80001a6:	33ff      	adds	r3, #255	@ 0xff
 80001a8:	0011      	movs	r1, r2
 80001aa:	0018      	movs	r0, r3
 80001ac:	f000 fb22 	bl	80007f4 <USER_TIM3_Delay>
                GPIOA->ODR &= ~(1U << 5);
 80001b0:	23a0      	movs	r3, #160	@ 0xa0
 80001b2:	05db      	lsls	r3, r3, #23
 80001b4:	695a      	ldr	r2, [r3, #20]
 80001b6:	23a0      	movs	r3, #160	@ 0xa0
 80001b8:	05db      	lsls	r3, r3, #23
 80001ba:	2120      	movs	r1, #32
 80001bc:	438a      	bics	r2, r1
 80001be:	615a      	str	r2, [r3, #20]
 80001c0:	e7cb      	b.n	800015a <main+0x5e>
            }
            else if(recibido == 'M') {
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	2b4d      	cmp	r3, #77	@ 0x4d
 80001c8:	d1c7      	bne.n	800015a <main+0x5e>
                GPIOA->ODR |= (1U << 6);  // Encender LED rojo
 80001ca:	23a0      	movs	r3, #160	@ 0xa0
 80001cc:	05db      	lsls	r3, r3, #23
 80001ce:	695a      	ldr	r2, [r3, #20]
 80001d0:	23a0      	movs	r3, #160	@ 0xa0
 80001d2:	05db      	lsls	r3, r3, #23
 80001d4:	2140      	movs	r1, #64	@ 0x40
 80001d6:	430a      	orrs	r2, r1
 80001d8:	615a      	str	r2, [r3, #20]
                USER_TIM3_Delay(479, 999);
 80001da:	4a0b      	ldr	r2, [pc, #44]	@ (8000208 <main+0x10c>)
 80001dc:	23e0      	movs	r3, #224	@ 0xe0
 80001de:	33ff      	adds	r3, #255	@ 0xff
 80001e0:	0011      	movs	r1, r2
 80001e2:	0018      	movs	r0, r3
 80001e4:	f000 fb06 	bl	80007f4 <USER_TIM3_Delay>
                GPIOA->ODR &= ~(1U << 6);
 80001e8:	23a0      	movs	r3, #160	@ 0xa0
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	695a      	ldr	r2, [r3, #20]
 80001ee:	23a0      	movs	r3, #160	@ 0xa0
 80001f0:	05db      	lsls	r3, r3, #23
 80001f2:	2140      	movs	r1, #64	@ 0x40
 80001f4:	438a      	bics	r2, r1
 80001f6:	615a      	str	r2, [r3, #20]
    while(1) {
 80001f8:	e7af      	b.n	800015a <main+0x5e>
 80001fa:	46c0      	nop			@ (mov r8, r8)
 80001fc:	fffff3ff 	.word	0xfffff3ff
 8000200:	ffffcfff 	.word	0xffffcfff
 8000204:	40013800 	.word	0x40013800
 8000208:	000003e7 	.word	0x000003e7

0800020c <USER_GPIO_Init>:
            }
        }
    }
}

void USER_GPIO_Init( void ){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  // Habilita el reloj de GPIOA y GPIOB
	RCC->IOPENR = RCC->IOPENR | (1UL << 0U); // GPIOAEN
 8000210:	4bb1      	ldr	r3, [pc, #708]	@ (80004d8 <USER_GPIO_Init+0x2cc>)
 8000212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000214:	4bb0      	ldr	r3, [pc, #704]	@ (80004d8 <USER_GPIO_Init+0x2cc>)
 8000216:	2101      	movs	r1, #1
 8000218:	430a      	orrs	r2, r1
 800021a:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->IOPENR = RCC->IOPENR | (1UL << 1U); // GPIOBEN
 800021c:	4bae      	ldr	r3, [pc, #696]	@ (80004d8 <USER_GPIO_Init+0x2cc>)
 800021e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000220:	4bad      	ldr	r3, [pc, #692]	@ (80004d8 <USER_GPIO_Init+0x2cc>)
 8000222:	2102      	movs	r1, #2
 8000224:	430a      	orrs	r2, r1
 8000226:	635a      	str	r2, [r3, #52]	@ 0x34

  // --- LEDs (PA5 a PA8) como salidas push-pull, LOW

  // PA5
  GPIOA->BSRR = 0x1UL << 21U;
 8000228:	23a0      	movs	r3, #160	@ 0xa0
 800022a:	05db      	lsls	r3, r3, #23
 800022c:	2280      	movs	r2, #128	@ 0x80
 800022e:	0392      	lsls	r2, r2, #14
 8000230:	619a      	str	r2, [r3, #24]
  GPIOA->PUPDR &= ~(0x3UL << 10U);
 8000232:	23a0      	movs	r3, #160	@ 0xa0
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	68da      	ldr	r2, [r3, #12]
 8000238:	23a0      	movs	r3, #160	@ 0xa0
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	49a7      	ldr	r1, [pc, #668]	@ (80004dc <USER_GPIO_Init+0x2d0>)
 800023e:	400a      	ands	r2, r1
 8000240:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~(0x1UL << 5U);
 8000242:	23a0      	movs	r3, #160	@ 0xa0
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	685a      	ldr	r2, [r3, #4]
 8000248:	23a0      	movs	r3, #160	@ 0xa0
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2120      	movs	r1, #32
 800024e:	438a      	bics	r2, r1
 8000250:	605a      	str	r2, [r3, #4]
  GPIOA->MODER &= ~(0x3UL << 10U);
 8000252:	23a0      	movs	r3, #160	@ 0xa0
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	23a0      	movs	r3, #160	@ 0xa0
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	499f      	ldr	r1, [pc, #636]	@ (80004dc <USER_GPIO_Init+0x2d0>)
 800025e:	400a      	ands	r2, r1
 8000260:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |=  (0x1UL << 10U);
 8000262:	23a0      	movs	r3, #160	@ 0xa0
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	23a0      	movs	r3, #160	@ 0xa0
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	2180      	movs	r1, #128	@ 0x80
 800026e:	00c9      	lsls	r1, r1, #3
 8000270:	430a      	orrs	r2, r1
 8000272:	601a      	str	r2, [r3, #0]

  // PA6
  GPIOA->BSRR = 0x1UL << 22U;
 8000274:	23a0      	movs	r3, #160	@ 0xa0
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2280      	movs	r2, #128	@ 0x80
 800027a:	03d2      	lsls	r2, r2, #15
 800027c:	619a      	str	r2, [r3, #24]
  GPIOA->PUPDR &= ~(0x3UL << 12U);
 800027e:	23a0      	movs	r3, #160	@ 0xa0
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	23a0      	movs	r3, #160	@ 0xa0
 8000286:	05db      	lsls	r3, r3, #23
 8000288:	4995      	ldr	r1, [pc, #596]	@ (80004e0 <USER_GPIO_Init+0x2d4>)
 800028a:	400a      	ands	r2, r1
 800028c:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~(0x1UL << 6U);
 800028e:	23a0      	movs	r3, #160	@ 0xa0
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	23a0      	movs	r3, #160	@ 0xa0
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2140      	movs	r1, #64	@ 0x40
 800029a:	438a      	bics	r2, r1
 800029c:	605a      	str	r2, [r3, #4]
  GPIOA->MODER &= ~(0x3UL << 12U);
 800029e:	23a0      	movs	r3, #160	@ 0xa0
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	23a0      	movs	r3, #160	@ 0xa0
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	498d      	ldr	r1, [pc, #564]	@ (80004e0 <USER_GPIO_Init+0x2d4>)
 80002aa:	400a      	ands	r2, r1
 80002ac:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |=  (0x1UL << 12U);
 80002ae:	23a0      	movs	r3, #160	@ 0xa0
 80002b0:	05db      	lsls	r3, r3, #23
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	23a0      	movs	r3, #160	@ 0xa0
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2180      	movs	r1, #128	@ 0x80
 80002ba:	0149      	lsls	r1, r1, #5
 80002bc:	430a      	orrs	r2, r1
 80002be:	601a      	str	r2, [r3, #0]

  // PA7
  GPIOA->BSRR = 0x1UL << 23U;
 80002c0:	23a0      	movs	r3, #160	@ 0xa0
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2280      	movs	r2, #128	@ 0x80
 80002c6:	0412      	lsls	r2, r2, #16
 80002c8:	619a      	str	r2, [r3, #24]
  GPIOA->PUPDR &= ~(0x3UL << 14U);
 80002ca:	23a0      	movs	r3, #160	@ 0xa0
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	23a0      	movs	r3, #160	@ 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	4983      	ldr	r1, [pc, #524]	@ (80004e4 <USER_GPIO_Init+0x2d8>)
 80002d6:	400a      	ands	r2, r1
 80002d8:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~(0x1UL << 7U);
 80002da:	23a0      	movs	r3, #160	@ 0xa0
 80002dc:	05db      	lsls	r3, r3, #23
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	23a0      	movs	r3, #160	@ 0xa0
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2180      	movs	r1, #128	@ 0x80
 80002e6:	438a      	bics	r2, r1
 80002e8:	605a      	str	r2, [r3, #4]
  GPIOA->MODER &= ~(0x2UL << 14U);
 80002ea:	23a0      	movs	r3, #160	@ 0xa0
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	23a0      	movs	r3, #160	@ 0xa0
 80002f2:	05db      	lsls	r3, r3, #23
 80002f4:	497c      	ldr	r1, [pc, #496]	@ (80004e8 <USER_GPIO_Init+0x2dc>)
 80002f6:	400a      	ands	r2, r1
 80002f8:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |=  (0x1UL << 14U);
 80002fa:	23a0      	movs	r3, #160	@ 0xa0
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	23a0      	movs	r3, #160	@ 0xa0
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	2180      	movs	r1, #128	@ 0x80
 8000306:	01c9      	lsls	r1, r1, #7
 8000308:	430a      	orrs	r2, r1
 800030a:	601a      	str	r2, [r3, #0]

  // PA8
  GPIOA->BSRR = 0x1UL << 24U;
 800030c:	23a0      	movs	r3, #160	@ 0xa0
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	2280      	movs	r2, #128	@ 0x80
 8000312:	0452      	lsls	r2, r2, #17
 8000314:	619a      	str	r2, [r3, #24]
  GPIOA->PUPDR &= ~(0x3UL << 16U);
 8000316:	23a0      	movs	r3, #160	@ 0xa0
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	68da      	ldr	r2, [r3, #12]
 800031c:	23a0      	movs	r3, #160	@ 0xa0
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	4972      	ldr	r1, [pc, #456]	@ (80004ec <USER_GPIO_Init+0x2e0>)
 8000322:	400a      	ands	r2, r1
 8000324:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~(0x1UL << 8U);
 8000326:	23a0      	movs	r3, #160	@ 0xa0
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	685a      	ldr	r2, [r3, #4]
 800032c:	23a0      	movs	r3, #160	@ 0xa0
 800032e:	05db      	lsls	r3, r3, #23
 8000330:	496f      	ldr	r1, [pc, #444]	@ (80004f0 <USER_GPIO_Init+0x2e4>)
 8000332:	400a      	ands	r2, r1
 8000334:	605a      	str	r2, [r3, #4]
  GPIOA->MODER &= ~(0x3UL << 16U);
 8000336:	23a0      	movs	r3, #160	@ 0xa0
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	23a0      	movs	r3, #160	@ 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	496a      	ldr	r1, [pc, #424]	@ (80004ec <USER_GPIO_Init+0x2e0>)
 8000342:	400a      	ands	r2, r1
 8000344:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |=  (0x1UL << 16U);
 8000346:	23a0      	movs	r3, #160	@ 0xa0
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	23a0      	movs	r3, #160	@ 0xa0
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	2180      	movs	r1, #128	@ 0x80
 8000352:	0249      	lsls	r1, r1, #9
 8000354:	430a      	orrs	r2, r1
 8000356:	601a      	str	r2, [r3, #0]

  //Filas PB0‚ÄìPB3 como salidas

  // PB0
  GPIOB->BSRR = 0x1UL << 16U;
 8000358:	4b66      	ldr	r3, [pc, #408]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800035a:	2280      	movs	r2, #128	@ 0x80
 800035c:	0252      	lsls	r2, r2, #9
 800035e:	619a      	str	r2, [r3, #24]
  GPIOB->PUPDR &= ~(0x3UL << 0U);
 8000360:	4b64      	ldr	r3, [pc, #400]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	4b63      	ldr	r3, [pc, #396]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000366:	2103      	movs	r1, #3
 8000368:	438a      	bics	r2, r1
 800036a:	60da      	str	r2, [r3, #12]
  GPIOB->OTYPER &= ~(0x1UL << 0U);
 800036c:	4b61      	ldr	r3, [pc, #388]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800036e:	685a      	ldr	r2, [r3, #4]
 8000370:	4b60      	ldr	r3, [pc, #384]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000372:	2101      	movs	r1, #1
 8000374:	438a      	bics	r2, r1
 8000376:	605a      	str	r2, [r3, #4]
  GPIOB->MODER &= ~(0x3UL << 0U);
 8000378:	4b5e      	ldr	r3, [pc, #376]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	4b5d      	ldr	r3, [pc, #372]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800037e:	2103      	movs	r1, #3
 8000380:	438a      	bics	r2, r1
 8000382:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |=  (0x1UL << 0U);
 8000384:	4b5b      	ldr	r3, [pc, #364]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b5a      	ldr	r3, [pc, #360]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800038a:	2101      	movs	r1, #1
 800038c:	430a      	orrs	r2, r1
 800038e:	601a      	str	r2, [r3, #0]

  // PB1
  GPIOB->BSRR = 0x1UL << 17U;
 8000390:	4b58      	ldr	r3, [pc, #352]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000392:	2280      	movs	r2, #128	@ 0x80
 8000394:	0292      	lsls	r2, r2, #10
 8000396:	619a      	str	r2, [r3, #24]
  GPIOB->PUPDR &= ~(0x3UL << 2U);
 8000398:	4b56      	ldr	r3, [pc, #344]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	4b55      	ldr	r3, [pc, #340]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800039e:	210c      	movs	r1, #12
 80003a0:	438a      	bics	r2, r1
 80003a2:	60da      	str	r2, [r3, #12]
  GPIOB->OTYPER &= ~(0x1UL << 1U);
 80003a4:	4b53      	ldr	r3, [pc, #332]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003a6:	685a      	ldr	r2, [r3, #4]
 80003a8:	4b52      	ldr	r3, [pc, #328]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003aa:	2102      	movs	r1, #2
 80003ac:	438a      	bics	r2, r1
 80003ae:	605a      	str	r2, [r3, #4]
  GPIOB->MODER &= ~(0x3UL << 2U);
 80003b0:	4b50      	ldr	r3, [pc, #320]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b4f      	ldr	r3, [pc, #316]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003b6:	210c      	movs	r1, #12
 80003b8:	438a      	bics	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |=  (0x1UL << 2U);
 80003bc:	4b4d      	ldr	r3, [pc, #308]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b4c      	ldr	r3, [pc, #304]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003c2:	2104      	movs	r1, #4
 80003c4:	430a      	orrs	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]

  // PB2
  GPIOB->BSRR = 0x1UL << 18U;
 80003c8:	4b4a      	ldr	r3, [pc, #296]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	02d2      	lsls	r2, r2, #11
 80003ce:	619a      	str	r2, [r3, #24]
  GPIOB->PUPDR &= ~(0x3UL << 4U);
 80003d0:	4b48      	ldr	r3, [pc, #288]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003d2:	68da      	ldr	r2, [r3, #12]
 80003d4:	4b47      	ldr	r3, [pc, #284]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003d6:	2130      	movs	r1, #48	@ 0x30
 80003d8:	438a      	bics	r2, r1
 80003da:	60da      	str	r2, [r3, #12]
  GPIOB->OTYPER &= ~(0x1UL << 2U);
 80003dc:	4b45      	ldr	r3, [pc, #276]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	4b44      	ldr	r3, [pc, #272]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003e2:	2104      	movs	r1, #4
 80003e4:	438a      	bics	r2, r1
 80003e6:	605a      	str	r2, [r3, #4]
  GPIOB->MODER &= ~(0x3UL << 4U);
 80003e8:	4b42      	ldr	r3, [pc, #264]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	4b41      	ldr	r3, [pc, #260]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003ee:	2130      	movs	r1, #48	@ 0x30
 80003f0:	438a      	bics	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |=  (0x1UL << 4U);
 80003f4:	4b3f      	ldr	r3, [pc, #252]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b3e      	ldr	r3, [pc, #248]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80003fa:	2110      	movs	r1, #16
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]

  // PB3
  GPIOB->BSRR = 0x1UL << 19U;
 8000400:	4b3c      	ldr	r3, [pc, #240]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000402:	2280      	movs	r2, #128	@ 0x80
 8000404:	0312      	lsls	r2, r2, #12
 8000406:	619a      	str	r2, [r3, #24]
  GPIOB->PUPDR &= ~(0x3UL << 6U);
 8000408:	4b3a      	ldr	r3, [pc, #232]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800040a:	68da      	ldr	r2, [r3, #12]
 800040c:	4b39      	ldr	r3, [pc, #228]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800040e:	21c0      	movs	r1, #192	@ 0xc0
 8000410:	438a      	bics	r2, r1
 8000412:	60da      	str	r2, [r3, #12]
  GPIOB->OTYPER &= ~(0x1UL << 3U);
 8000414:	4b37      	ldr	r3, [pc, #220]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000416:	685a      	ldr	r2, [r3, #4]
 8000418:	4b36      	ldr	r3, [pc, #216]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800041a:	2108      	movs	r1, #8
 800041c:	438a      	bics	r2, r1
 800041e:	605a      	str	r2, [r3, #4]
  GPIOB->MODER &= ~(0x3UL << 6U);
 8000420:	4b34      	ldr	r3, [pc, #208]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b33      	ldr	r3, [pc, #204]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000426:	21c0      	movs	r1, #192	@ 0xc0
 8000428:	438a      	bics	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |=  (0x1UL << 6U);
 800042c:	4b31      	ldr	r3, [pc, #196]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b30      	ldr	r3, [pc, #192]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000432:	2140      	movs	r1, #64	@ 0x40
 8000434:	430a      	orrs	r2, r1
 8000436:	601a      	str	r2, [r3, #0]

  // Columnas PB4‚ÄìPB7

  // PB4
  GPIOB->MODER &= ~(0x3UL << 8U);
 8000438:	4b2e      	ldr	r3, [pc, #184]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b2d      	ldr	r3, [pc, #180]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800043e:	492e      	ldr	r1, [pc, #184]	@ (80004f8 <USER_GPIO_Init+0x2ec>)
 8000440:	400a      	ands	r2, r1
 8000442:	601a      	str	r2, [r3, #0]
  GPIOB->PUPDR &= ~(0x3UL << 8U);
 8000444:	4b2b      	ldr	r3, [pc, #172]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000446:	68da      	ldr	r2, [r3, #12]
 8000448:	4b2a      	ldr	r3, [pc, #168]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800044a:	492b      	ldr	r1, [pc, #172]	@ (80004f8 <USER_GPIO_Init+0x2ec>)
 800044c:	400a      	ands	r2, r1
 800044e:	60da      	str	r2, [r3, #12]
  GPIOB->PUPDR |=  (0x1UL << 8U);
 8000450:	4b28      	ldr	r3, [pc, #160]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000452:	68da      	ldr	r2, [r3, #12]
 8000454:	4b27      	ldr	r3, [pc, #156]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000456:	2180      	movs	r1, #128	@ 0x80
 8000458:	0049      	lsls	r1, r1, #1
 800045a:	430a      	orrs	r2, r1
 800045c:	60da      	str	r2, [r3, #12]

  // PB5
  GPIOB->MODER &= ~(0x3UL << 10U);
 800045e:	4b25      	ldr	r3, [pc, #148]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	4b24      	ldr	r3, [pc, #144]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000464:	491d      	ldr	r1, [pc, #116]	@ (80004dc <USER_GPIO_Init+0x2d0>)
 8000466:	400a      	ands	r2, r1
 8000468:	601a      	str	r2, [r3, #0]
  GPIOB->PUPDR &= ~(0x3UL << 10U);
 800046a:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800046c:	68da      	ldr	r2, [r3, #12]
 800046e:	4b21      	ldr	r3, [pc, #132]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000470:	491a      	ldr	r1, [pc, #104]	@ (80004dc <USER_GPIO_Init+0x2d0>)
 8000472:	400a      	ands	r2, r1
 8000474:	60da      	str	r2, [r3, #12]
  GPIOB->PUPDR |=  (0x1UL << 10U);
 8000476:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000478:	68da      	ldr	r2, [r3, #12]
 800047a:	4b1e      	ldr	r3, [pc, #120]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	00c9      	lsls	r1, r1, #3
 8000480:	430a      	orrs	r2, r1
 8000482:	60da      	str	r2, [r3, #12]

  // PB6
  GPIOB->MODER &= ~(0x3UL << 12U);
 8000484:	4b1b      	ldr	r3, [pc, #108]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800048a:	4915      	ldr	r1, [pc, #84]	@ (80004e0 <USER_GPIO_Init+0x2d4>)
 800048c:	400a      	ands	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
  GPIOB->PUPDR &= ~(0x3UL << 12U);
 8000490:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000492:	68da      	ldr	r2, [r3, #12]
 8000494:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 8000496:	4912      	ldr	r1, [pc, #72]	@ (80004e0 <USER_GPIO_Init+0x2d4>)
 8000498:	400a      	ands	r2, r1
 800049a:	60da      	str	r2, [r3, #12]
  GPIOB->PUPDR |=  (0x1UL << 12U);
 800049c:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80004a2:	2180      	movs	r1, #128	@ 0x80
 80004a4:	0149      	lsls	r1, r1, #5
 80004a6:	430a      	orrs	r2, r1
 80004a8:	60da      	str	r2, [r3, #12]

  // PB7
  GPIOB->MODER &= ~(0x3UL << 14U);
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80004b0:	490c      	ldr	r1, [pc, #48]	@ (80004e4 <USER_GPIO_Init+0x2d8>)
 80004b2:	400a      	ands	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
  GPIOB->PUPDR &= ~(0x3UL << 14U);
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80004bc:	4909      	ldr	r1, [pc, #36]	@ (80004e4 <USER_GPIO_Init+0x2d8>)
 80004be:	400a      	ands	r2, r1
 80004c0:	60da      	str	r2, [r3, #12]
  GPIOB->PUPDR |=  (0x1UL << 14U);
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80004c4:	68da      	ldr	r2, [r3, #12]
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <USER_GPIO_Init+0x2e8>)
 80004c8:	2180      	movs	r1, #128	@ 0x80
 80004ca:	01c9      	lsls	r1, r1, #7
 80004cc:	430a      	orrs	r2, r1
 80004ce:	60da      	str	r2, [r3, #12]
}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000
 80004dc:	fffff3ff 	.word	0xfffff3ff
 80004e0:	ffffcfff 	.word	0xffffcfff
 80004e4:	ffff3fff 	.word	0xffff3fff
 80004e8:	ffff7fff 	.word	0xffff7fff
 80004ec:	fffcffff 	.word	0xfffcffff
 80004f0:	fffffeff 	.word	0xfffffeff
 80004f4:	50000400 	.word	0x50000400
 80004f8:	fffffcff 	.word	0xfffffcff

080004fc <USER_RCC_Init>:



void USER_RCC_Init( void ){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* System Clock (SYSCLK) configuration for 48 MHz */
	FLASH->ACR	&= ~( 0x6UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 8000500:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <USER_RCC_Init+0x64>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b16      	ldr	r3, [pc, #88]	@ (8000560 <USER_RCC_Init+0x64>)
 8000506:	2106      	movs	r1, #6
 8000508:	438a      	bics	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
	FLASH->ACR	|=  ( 0x1UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <USER_RCC_Init+0x64>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <USER_RCC_Init+0x64>)
 8000512:	2101      	movs	r1, #1
 8000514:	430a      	orrs	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
	while(( FLASH->ACR & ( 0x7UL <<  0U )) != 0x001UL );// wait until LATENCY[2:0]=001
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <USER_RCC_Init+0x64>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2207      	movs	r2, #7
 8000520:	4013      	ands	r3, r2
 8000522:	2b01      	cmp	r3, #1
 8000524:	d1f9      	bne.n	800051a <USER_RCC_Init+0x1e>
	RCC->CR		&= ~( 0x7UL << 11U );// select HSISYS division factor by 1
 8000526:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <USER_RCC_Init+0x68>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <USER_RCC_Init+0x68>)
 800052c:	490e      	ldr	r1, [pc, #56]	@ (8000568 <USER_RCC_Init+0x6c>)
 800052e:	400a      	ands	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
	while(!( RCC->CR & ( 0x1UL << 10U )));// wait until HSISYS is stable and ready
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <USER_RCC_Init+0x68>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	4013      	ands	r3, r2
 800053e:	d0f9      	beq.n	8000534 <USER_RCC_Init+0x38>
	RCC->CFGR	&= ~( 0x7UL <<  0U );// select HSISYS as the SYSCLK clock source
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <USER_RCC_Init+0x68>)
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <USER_RCC_Init+0x68>)
 8000546:	2107      	movs	r1, #7
 8000548:	438a      	bics	r2, r1
 800054a:	609a      	str	r2, [r3, #8]
	RCC->CFGR	&= ~( 0x1UL << 11U );// select HCLK division factor by 1
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <USER_RCC_Init+0x68>)
 800054e:	689a      	ldr	r2, [r3, #8]
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <USER_RCC_Init+0x68>)
 8000552:	4906      	ldr	r1, [pc, #24]	@ (800056c <USER_RCC_Init+0x70>)
 8000554:	400a      	ands	r2, r1
 8000556:	609a      	str	r2, [r3, #8]
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	40022000 	.word	0x40022000
 8000564:	40021000 	.word	0x40021000
 8000568:	ffffc7ff 	.word	0xffffc7ff
 800056c:	fffff7ff 	.word	0xfffff7ff

08000570 <USER_Keypad_Init>:
    {'7','8','9','C'},
    {'*','0','#','D'}
};

// Inicializa los GPIOs usados por el teclado
void USER_Keypad_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    RCC->IOPENR |= (0x1UL << 1U);  // Habilita reloj para GPIOB
 8000574:	4b56      	ldr	r3, [pc, #344]	@ (80006d0 <USER_Keypad_Init+0x160>)
 8000576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000578:	4b55      	ldr	r3, [pc, #340]	@ (80006d0 <USER_Keypad_Init+0x160>)
 800057a:	2102      	movs	r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34

    // Configura PB0‚ÄìPB3 como salidas

    // PB0
    GPIOB->OTYPER &= ~(1UL << 0);
 8000580:	4b54      	ldr	r3, [pc, #336]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	4b53      	ldr	r3, [pc, #332]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000586:	2101      	movs	r1, #1
 8000588:	438a      	bics	r2, r1
 800058a:	605a      	str	r2, [r3, #4]
    GPIOB->MODER &= ~(0x3UL << 0);
 800058c:	4b51      	ldr	r3, [pc, #324]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b50      	ldr	r3, [pc, #320]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000592:	2103      	movs	r1, #3
 8000594:	438a      	bics	r2, r1
 8000596:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  (0x1UL << 0);   // Salida
 8000598:	4b4e      	ldr	r3, [pc, #312]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b4d      	ldr	r3, [pc, #308]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800059e:	2101      	movs	r1, #1
 80005a0:	430a      	orrs	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
    GPIOB->BSRR = (1UL << 16);       // Apaga PB0
 80005a4:	4b4b      	ldr	r3, [pc, #300]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005a6:	2280      	movs	r2, #128	@ 0x80
 80005a8:	0252      	lsls	r2, r2, #9
 80005aa:	619a      	str	r2, [r3, #24]

    // PB1
    GPIOB->OTYPER &= ~(1UL << 1);
 80005ac:	4b49      	ldr	r3, [pc, #292]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005b2:	2102      	movs	r1, #2
 80005b4:	438a      	bics	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]
    GPIOB->MODER &= ~(0x3UL << 2);
 80005b8:	4b46      	ldr	r3, [pc, #280]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b45      	ldr	r3, [pc, #276]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005be:	210c      	movs	r1, #12
 80005c0:	438a      	bics	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  (0x1UL << 2);
 80005c4:	4b43      	ldr	r3, [pc, #268]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b42      	ldr	r3, [pc, #264]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	430a      	orrs	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
    GPIOB->BSRR = (1UL << 17);       // Apaga PB1
 80005d0:	4b40      	ldr	r3, [pc, #256]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005d2:	2280      	movs	r2, #128	@ 0x80
 80005d4:	0292      	lsls	r2, r2, #10
 80005d6:	619a      	str	r2, [r3, #24]

    // PB2
    GPIOB->OTYPER &= ~(1UL << 2);
 80005d8:	4b3e      	ldr	r3, [pc, #248]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	4b3d      	ldr	r3, [pc, #244]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005de:	2104      	movs	r1, #4
 80005e0:	438a      	bics	r2, r1
 80005e2:	605a      	str	r2, [r3, #4]
    GPIOB->MODER &= ~(0x3UL << 4);
 80005e4:	4b3b      	ldr	r3, [pc, #236]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b3a      	ldr	r3, [pc, #232]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005ea:	2130      	movs	r1, #48	@ 0x30
 80005ec:	438a      	bics	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  (0x1UL << 4);
 80005f0:	4b38      	ldr	r3, [pc, #224]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005f6:	2110      	movs	r1, #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
    GPIOB->BSRR = (1UL << 18);       // Apaga PB2
 80005fc:	4b35      	ldr	r3, [pc, #212]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	02d2      	lsls	r2, r2, #11
 8000602:	619a      	str	r2, [r3, #24]

    // PB3
    GPIOB->OTYPER &= ~(1UL << 3);
 8000604:	4b33      	ldr	r3, [pc, #204]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	4b32      	ldr	r3, [pc, #200]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800060a:	2108      	movs	r1, #8
 800060c:	438a      	bics	r2, r1
 800060e:	605a      	str	r2, [r3, #4]
    GPIOB->MODER &= ~(0x3UL << 6);
 8000610:	4b30      	ldr	r3, [pc, #192]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000616:	21c0      	movs	r1, #192	@ 0xc0
 8000618:	438a      	bics	r2, r1
 800061a:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  (0x1UL << 6);
 800061c:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000622:	2140      	movs	r1, #64	@ 0x40
 8000624:	430a      	orrs	r2, r1
 8000626:	601a      	str	r2, [r3, #0]
    GPIOB->BSRR = (1UL << 19);       // Apaga PB3
 8000628:	4b2a      	ldr	r3, [pc, #168]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800062a:	2280      	movs	r2, #128	@ 0x80
 800062c:	0312      	lsls	r2, r2, #12
 800062e:	619a      	str	r2, [r3, #24]

    // Configura PB4‚ÄìPB7 como entradas

    // PB4
    GPIOB->MODER &= ~(0x3UL << 8);
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000636:	4928      	ldr	r1, [pc, #160]	@ (80006d8 <USER_Keypad_Init+0x168>)
 8000638:	400a      	ands	r2, r1
 800063a:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR &= ~(0x3UL << 8);
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000642:	4925      	ldr	r1, [pc, #148]	@ (80006d8 <USER_Keypad_Init+0x168>)
 8000644:	400a      	ands	r2, r1
 8000646:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  (0x1UL << 8);   // Pull-up
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800064a:	68da      	ldr	r2, [r3, #12]
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	0049      	lsls	r1, r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	60da      	str	r2, [r3, #12]

    // PB5
    GPIOB->MODER &= ~(0x3UL << 10);
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800065c:	491f      	ldr	r1, [pc, #124]	@ (80006dc <USER_Keypad_Init+0x16c>)
 800065e:	400a      	ands	r2, r1
 8000660:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR &= ~(0x3UL << 10);
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000664:	68da      	ldr	r2, [r3, #12]
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000668:	491c      	ldr	r1, [pc, #112]	@ (80006dc <USER_Keypad_Init+0x16c>)
 800066a:	400a      	ands	r2, r1
 800066c:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  (0x1UL << 10);
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	00c9      	lsls	r1, r1, #3
 8000678:	430a      	orrs	r2, r1
 800067a:	60da      	str	r2, [r3, #12]

    // PB6
    GPIOB->MODER &= ~(0x3UL << 12);
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000682:	4917      	ldr	r1, [pc, #92]	@ (80006e0 <USER_Keypad_Init+0x170>)
 8000684:	400a      	ands	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR &= ~(0x3UL << 12);
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800068a:	68da      	ldr	r2, [r3, #12]
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800068e:	4914      	ldr	r1, [pc, #80]	@ (80006e0 <USER_Keypad_Init+0x170>)
 8000690:	400a      	ands	r2, r1
 8000692:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  (0x1UL << 12);
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <USER_Keypad_Init+0x164>)
 8000696:	68da      	ldr	r2, [r3, #12]
 8000698:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <USER_Keypad_Init+0x164>)
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	0149      	lsls	r1, r1, #5
 800069e:	430a      	orrs	r2, r1
 80006a0:	60da      	str	r2, [r3, #12]

    // PB7
    GPIOB->MODER &= ~(0x3UL << 14);
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80006a8:	490e      	ldr	r1, [pc, #56]	@ (80006e4 <USER_Keypad_Init+0x174>)
 80006aa:	400a      	ands	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR &= ~(0x3UL << 14);
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80006b4:	490b      	ldr	r1, [pc, #44]	@ (80006e4 <USER_Keypad_Init+0x174>)
 80006b6:	400a      	ands	r2, r1
 80006b8:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  (0x1UL << 14);
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80006bc:	68da      	ldr	r2, [r3, #12]
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <USER_Keypad_Init+0x164>)
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	01c9      	lsls	r1, r1, #7
 80006c4:	430a      	orrs	r2, r1
 80006c6:	60da      	str	r2, [r3, #12]
}
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	40021000 	.word	0x40021000
 80006d4:	50000400 	.word	0x50000400
 80006d8:	fffffcff 	.word	0xfffffcff
 80006dc:	fffff3ff 	.word	0xfffff3ff
 80006e0:	ffffcfff 	.word	0xffffcfff
 80006e4:	ffff3fff 	.word	0xffff3fff

080006e8 <USER_Key>:

// Funci√≥n para detectar qu√© tecla fue presionada
char USER_Key(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    static char last_key = '\0';
//    static uint32_t last_time = 0;
    char new_key = '\0';
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]

    // Escanear cada fila
    for (uint8_t i = 0; i < 4; i++) {
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e037      	b.n	800076c <USER_Key+0x84>
        GPIOB->ODR = ~(1U << i);  // Activar fila i
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2201      	movs	r2, #1
 8000702:	409a      	lsls	r2, r3
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <USER_Key+0xc0>)
 8000706:	43d2      	mvns	r2, r2
 8000708:	615a      	str	r2, [r3, #20]
        USER_TIM3_Delay(479, 999); // Retardo de 10ms
 800070a:	4a28      	ldr	r2, [pc, #160]	@ (80007ac <USER_Key+0xc4>)
 800070c:	23e0      	movs	r3, #224	@ 0xe0
 800070e:	33ff      	adds	r3, #255	@ 0xff
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f86e 	bl	80007f4 <USER_TIM3_Delay>

        uint32_t columnas = (GPIOB->IDR >> 4) & 0x0F;
 8000718:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <USER_Key+0xc0>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	091b      	lsrs	r3, r3, #4
 800071e:	220f      	movs	r2, #15
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
        for (uint8_t j = 0; j < 4; j++) {
 8000724:	1d7b      	adds	r3, r7, #5
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e016      	b.n	800075a <USER_Key+0x72>
            if (!(columnas & (1U << j))) {
 800072c:	1d7b      	adds	r3, r7, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2201      	movs	r2, #1
 8000732:	409a      	lsls	r2, r3
 8000734:	0013      	movs	r3, r2
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	4013      	ands	r3, r2
 800073a:	d109      	bne.n	8000750 <USER_Key+0x68>
                new_key = key_map[i][j];
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	1d7b      	adds	r3, r7, #5
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <USER_Key+0xc8>)
 8000748:	0089      	lsls	r1, r1, #2
 800074a:	1841      	adds	r1, r0, r1
 800074c:	5c8a      	ldrb	r2, [r1, r2]
 800074e:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 4; j++) {
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	1d7b      	adds	r3, r7, #5
 8000756:	3201      	adds	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	1d7b      	adds	r3, r7, #5
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d9e4      	bls.n	800072c <USER_Key+0x44>
    for (uint8_t i = 0; i < 4; i++) {
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	1dbb      	adds	r3, r7, #6
 8000768:	3201      	adds	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d9c3      	bls.n	80006fc <USER_Key+0x14>
            }
        }
    }

    // Verificar si la tecla es estable
    if (new_key != '\0' && new_key == last_key) {
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00b      	beq.n	8000794 <USER_Key+0xac>
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <USER_Key+0xcc>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	1dfa      	adds	r2, r7, #7
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d105      	bne.n	8000794 <USER_Key+0xac>
        last_key = '\0';
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <USER_Key+0xcc>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
        return new_key;
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	e004      	b.n	800079e <USER_Key+0xb6>
    }
    last_key = new_key;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <USER_Key+0xcc>)
 8000796:	1dfa      	adds	r2, r7, #7
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	701a      	strb	r2, [r3, #0]
    return '\0';
 800079c:	2300      	movs	r3, #0
}
 800079e:	0018      	movs	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	50000400 	.word	0x50000400
 80007ac:	000003e7 	.word	0x000003e7
 80007b0:	08000ae0 	.word	0x08000ae0
 80007b4:	2000001c 	.word	0x2000001c

080007b8 <USER_TIM3_Init>:
#include <stdint.h>
#include "main.h"
#include "user_tim.h"

void USER_TIM3_Init( void ){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	RCC->APBENR1	|=  ( 0x1UL <<  1U );//		Enable TIM3 clock source
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <USER_TIM3_Init+0x30>)
 80007be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <USER_TIM3_Init+0x30>)
 80007c2:	2102      	movs	r1, #2
 80007c4:	430a      	orrs	r2, r1
 80007c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->SMCR		&= ~( 0x1UL << 16U )
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <USER_TIM3_Init+0x34>)
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <USER_TIM3_Init+0x34>)
 80007ce:	4908      	ldr	r1, [pc, #32]	@ (80007f0 <USER_TIM3_Init+0x38>)
 80007d0:	400a      	ands	r2, r1
 80007d2:	609a      	str	r2, [r3, #8]
					&  ~( 0x7UL <<  0U );// 	Prescaler is clocked directed by the internal clock
	TIM3->CR1		&= ~( 0x1UL <<  7U ) //		Auto-reload register is not buffered
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <USER_TIM3_Init+0x34>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <USER_TIM3_Init+0x34>)
 80007da:	21f2      	movs	r1, #242	@ 0xf2
 80007dc:	438a      	bics	r2, r1
 80007de:	601a      	str	r2, [r3, #0]
					&  ~( 0x3UL <<  5U ) //		Selects edge-aligned mode
					&  ~( 0x1UL <<  4U ) //		Counter used as upcounter
					&  ~( 0x1UL <<  1U );//		Update Event (UEV) enabled
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40000400 	.word	0x40000400
 80007f0:	fffefff8 	.word	0xfffefff8

080007f4 <USER_TIM3_Delay>:

// user_tim.c (completar funci√≥n)
void USER_TIM3_Delay(uint16_t prescaler, uint16_t maxCount) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	0002      	movs	r2, r0
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	801a      	strh	r2, [r3, #0]
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	1c0a      	adds	r2, r1, #0
 8000804:	801a      	strh	r2, [r3, #0]
    TIM3->PSC = prescaler;          // Configurar prescaler
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <USER_TIM3_Delay+0x60>)
 8000808:	1dba      	adds	r2, r7, #6
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = maxCount;           // M√°ximo conteo
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <USER_TIM3_Delay+0x60>)
 8000810:	1d3a      	adds	r2, r7, #4
 8000812:	8812      	ldrh	r2, [r2, #0]
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CNT = 0;                  // Reiniciar contador
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <USER_TIM3_Delay+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM3->CR1 |= TIM_CR1_CEN;       // Iniciar timer
 800081c:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <USER_TIM3_Delay+0x60>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <USER_TIM3_Delay+0x60>)
 8000822:	2101      	movs	r1, #1
 8000824:	430a      	orrs	r2, r1
 8000826:	601a      	str	r2, [r3, #0]

    while (!(TIM3->SR & TIM_SR_UIF)); // Esperar bandera de update
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <USER_TIM3_Delay+0x60>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	d0fa      	beq.n	800082a <USER_TIM3_Delay+0x36>
    TIM3->SR &= ~TIM_SR_UIF;         // Limpiar bandera
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <USER_TIM3_Delay+0x60>)
 8000836:	691a      	ldr	r2, [r3, #16]
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <USER_TIM3_Delay+0x60>)
 800083a:	2101      	movs	r1, #1
 800083c:	438a      	bics	r2, r1
 800083e:	611a      	str	r2, [r3, #16]
    TIM3->CR1 &= ~TIM_CR1_CEN;       // Detener timer
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <USER_TIM3_Delay+0x60>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <USER_TIM3_Delay+0x60>)
 8000846:	2101      	movs	r1, #1
 8000848:	438a      	bics	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40000400 	.word	0x40000400

08000858 <USER_USART1_Init>:
#include "main.h"
#include "user_uart.h"

static void USER_USART1_Send_8bit(uint8_t Data);

void USER_USART1_Init(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    // Habilitar el clock
    RCC->IOPENR  |= (0x1UL << 0U);   // del GPIOAEN
 800085c:	4b4d      	ldr	r3, [pc, #308]	@ (8000994 <USER_USART1_Init+0x13c>)
 800085e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000860:	4b4c      	ldr	r3, [pc, #304]	@ (8000994 <USER_USART1_Init+0x13c>)
 8000862:	2101      	movs	r1, #1
 8000864:	430a      	orrs	r2, r1
 8000866:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (0x1UL << 14U);  // del USART1EN
 8000868:	4b4a      	ldr	r3, [pc, #296]	@ (8000994 <USER_USART1_Init+0x13c>)
 800086a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800086c:	4b49      	ldr	r3, [pc, #292]	@ (8000994 <USER_USART1_Init+0x13c>)
 800086e:	2180      	movs	r1, #128	@ 0x80
 8000870:	01c9      	lsls	r1, r1, #7
 8000872:	430a      	orrs	r2, r1
 8000874:	641a      	str	r2, [r3, #64]	@ 0x40

    // Se configura PA9 que es TX el que transmite y PA10 que es RX es decir el que recibe setteando el modo de Alternate Function AF1
    GPIOA->AFRH = GPIOA->AFRH & ~(0xEUL << 4U);
 8000876:	23a0      	movs	r3, #160	@ 0xa0
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800087c:	23a0      	movs	r3, #160	@ 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	21e0      	movs	r1, #224	@ 0xe0
 8000882:	438a      	bics	r2, r1
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFRH = GPIOA->AFRH | (0x1UL << 4U);
 8000886:	23a0      	movs	r3, #160	@ 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800088c:	23a0      	movs	r3, #160	@ 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	2110      	movs	r1, #16
 8000892:	430a      	orrs	r2, r1
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 18U);
 8000896:	23a0      	movs	r3, #160	@ 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	23a0      	movs	r3, #160	@ 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	493d      	ldr	r1, [pc, #244]	@ (8000998 <USER_USART1_Init+0x140>)
 80008a2:	400a      	ands	r2, r1
 80008a4:	60da      	str	r2, [r3, #12]
	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 9U);
 80008a6:	23a0      	movs	r3, #160	@ 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	23a0      	movs	r3, #160	@ 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	493a      	ldr	r1, [pc, #232]	@ (800099c <USER_USART1_Init+0x144>)
 80008b2:	400a      	ands	r2, r1
 80008b4:	605a      	str	r2, [r3, #4]
	GPIOA->MODER = GPIOA->MODER & ~(0x1UL << 18U);
 80008b6:	23a0      	movs	r3, #160	@ 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	23a0      	movs	r3, #160	@ 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	4937      	ldr	r1, [pc, #220]	@ (80009a0 <USER_USART1_Init+0x148>)
 80008c2:	400a      	ands	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER = GPIOA->MODER | (0x2UL << 18U);
 80008c6:	23a0      	movs	r3, #160	@ 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	23a0      	movs	r3, #160	@ 0xa0
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	0309      	lsls	r1, r1, #12
 80008d4:	430a      	orrs	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]

	GPIOA->AFRH = GPIOA->AFRH & ~(0xEUL << 8U);
 80008d8:	23a0      	movs	r3, #160	@ 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008de:	23a0      	movs	r3, #160	@ 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	4930      	ldr	r1, [pc, #192]	@ (80009a4 <USER_USART1_Init+0x14c>)
 80008e4:	400a      	ands	r2, r1
 80008e6:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFRH = GPIOA->AFRH | (0x1UL << 8U);
 80008e8:	23a0      	movs	r3, #160	@ 0xa0
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008ee:	23a0      	movs	r3, #160	@ 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2180      	movs	r1, #128	@ 0x80
 80008f4:	0049      	lsls	r1, r1, #1
 80008f6:	430a      	orrs	r2, r1
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 20U);
 80008fa:	23a0      	movs	r3, #160	@ 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	23a0      	movs	r3, #160	@ 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	4928      	ldr	r1, [pc, #160]	@ (80009a8 <USER_USART1_Init+0x150>)
 8000906:	400a      	ands	r2, r1
 8000908:	60da      	str	r2, [r3, #12]
	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 10U);
 800090a:	23a0      	movs	r3, #160	@ 0xa0
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	23a0      	movs	r3, #160	@ 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	4925      	ldr	r1, [pc, #148]	@ (80009ac <USER_USART1_Init+0x154>)
 8000916:	400a      	ands	r2, r1
 8000918:	605a      	str	r2, [r3, #4]
	GPIOA->MODER = GPIOA->MODER & ~(0x1UL << 20U);
 800091a:	23a0      	movs	r3, #160	@ 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	23a0      	movs	r3, #160	@ 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	4922      	ldr	r1, [pc, #136]	@ (80009b0 <USER_USART1_Init+0x158>)
 8000926:	400a      	ands	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
	GPIOA->MODER = GPIOA->MODER | (0x2UL << 20U);
 800092a:	23a0      	movs	r3, #160	@ 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	23a0      	movs	r3, #160	@ 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0389      	lsls	r1, r1, #14
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]

    // Configuraci√≥n de USART
	// 8-bit data M
	USART1->CR1 = USART1->CR1 & ~(0x1UL << 28U);
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <USER_USART1_Init+0x15c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <USER_USART1_Init+0x15c>)
 8000942:	491d      	ldr	r1, [pc, #116]	@ (80009b8 <USER_USART1_Init+0x160>)
 8000944:	400a      	ands	r2, r1
 8000946:	601a      	str	r2, [r3, #0]
	USART1->CR1 = USART1->CR1 & ~(0x1UL << 12U);
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <USER_USART1_Init+0x15c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <USER_USART1_Init+0x15c>)
 800094e:	491b      	ldr	r1, [pc, #108]	@ (80009bc <USER_USART1_Init+0x164>)
 8000950:	400a      	ands	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
	// Baudrate
    USART1->BRR = 417;               // 115200 / 48 MHz = 104
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <USER_USART1_Init+0x15c>)
 8000956:	22a2      	movs	r2, #162	@ 0xa2
 8000958:	32ff      	adds	r2, #255	@ 0xff
 800095a:	60da      	str	r2, [r3, #12]
    //STOP bit in usart_cr2
    USART1->CR2 = USART1->CR2 & ~(0x3UL << 12U);        // stop bit
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <USER_USART1_Init+0x15c>)
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <USER_USART1_Init+0x15c>)
 8000962:	4917      	ldr	r1, [pc, #92]	@ (80009c0 <USER_USART1_Init+0x168>)
 8000964:	400a      	ands	r2, r1
 8000966:	605a      	str	r2, [r3, #4]

    // Se habilitan el USART, TX y RX
    USART1->CR1 = USART1->CR1 | (0x1UL << 0U);  // UE el USART se habilita
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <USER_USART1_Init+0x15c>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <USER_USART1_Init+0x15c>)
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	601a      	str	r2, [r3, #0]
    USART1->CR1 = USART1->CR1 | (0x1UL << 3U);  // TE el que transmite se habilita
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <USER_USART1_Init+0x15c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <USER_USART1_Init+0x15c>)
 800097a:	2108      	movs	r1, #8
 800097c:	430a      	orrs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
    USART1->CR1 = USART1->CR1 | (0x1UL << 2U);  // RE el que recibe datos se habilita
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <USER_USART1_Init+0x15c>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <USER_USART1_Init+0x15c>)
 8000986:	2104      	movs	r1, #4
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	40021000 	.word	0x40021000
 8000998:	fff3ffff 	.word	0xfff3ffff
 800099c:	fffffdff 	.word	0xfffffdff
 80009a0:	fffbffff 	.word	0xfffbffff
 80009a4:	fffff1ff 	.word	0xfffff1ff
 80009a8:	ffcfffff 	.word	0xffcfffff
 80009ac:	fffffbff 	.word	0xfffffbff
 80009b0:	ffefffff 	.word	0xffefffff
 80009b4:	40013800 	.word	0x40013800
 80009b8:	efffffff 	.word	0xefffffff
 80009bc:	ffffefff 	.word	0xffffefff
 80009c0:	ffffcfff 	.word	0xffffcfff

080009c4 <USER_USART1_Send_8bit>:

// TRANSMITION FUNCTION
static void USER_USART1_Send_8bit(uint8_t Data) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	701a      	strb	r2, [r3, #0]
    while (!(USART1->ISR & (0x1UL << 7U)));  // Transmit data register empty
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <USER_USART1_Send_8bit+0x28>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	2280      	movs	r2, #128	@ 0x80
 80009d8:	4013      	ands	r3, r2
 80009da:	d0fa      	beq.n	80009d2 <USER_USART1_Send_8bit+0xe>
    USART1->TDR = Data;
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <USER_USART1_Send_8bit+0x28>)
 80009de:	1dfa      	adds	r2, r7, #7
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40013800 	.word	0x40013800

080009f0 <USER_USART1_Transmit>:

void USER_USART1_Transmit(uint8_t *pData, uint16_t size) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	000a      	movs	r2, r1
 80009fa:	1cbb      	adds	r3, r7, #2
 80009fc:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e009      	b.n	8000a18 <USER_USART1_Transmit+0x28>
        USER_USART1_Send_8bit(pData[i]);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	18d3      	adds	r3, r2, r3
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ffd9 	bl	80009c4 <USER_USART1_Send_8bit>
    for (int i = 0; i < size; i++) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	1cbb      	adds	r3, r7, #2
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dbf0      	blt.n	8000a04 <USER_USART1_Transmit+0x14>
    }
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b004      	add	sp, #16
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a2c:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a30:	e000      	b.n	8000a34 <Reset_Handler+0x8>
 8000a32:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5a:	f000 f811 	bl	8000a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff fb4d 	bl	80000fc <main>

08000a62 <LoopForever>:

LoopForever:
  b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   r0, =_estack
 8000a64:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a70:	08000af8 	.word	0x08000af8
  ldr r2, =_sbss
 8000a74:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a78:	20000020 	.word	0x20000020

08000a7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <__libc_init_array>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	2600      	movs	r6, #0
 8000a84:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab8 <__libc_init_array+0x38>)
 8000a86:	4d0d      	ldr	r5, [pc, #52]	@ (8000abc <__libc_init_array+0x3c>)
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	10a4      	asrs	r4, r4, #2
 8000a8c:	42a6      	cmp	r6, r4
 8000a8e:	d109      	bne.n	8000aa4 <__libc_init_array+0x24>
 8000a90:	2600      	movs	r6, #0
 8000a92:	f000 f819 	bl	8000ac8 <_init>
 8000a96:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <__libc_init_array+0x40>)
 8000a98:	4d0a      	ldr	r5, [pc, #40]	@ (8000ac4 <__libc_init_array+0x44>)
 8000a9a:	1b64      	subs	r4, r4, r5
 8000a9c:	10a4      	asrs	r4, r4, #2
 8000a9e:	42a6      	cmp	r6, r4
 8000aa0:	d105      	bne.n	8000aae <__libc_init_array+0x2e>
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	00b3      	lsls	r3, r6, #2
 8000aa6:	58eb      	ldr	r3, [r5, r3]
 8000aa8:	4798      	blx	r3
 8000aaa:	3601      	adds	r6, #1
 8000aac:	e7ee      	b.n	8000a8c <__libc_init_array+0xc>
 8000aae:	00b3      	lsls	r3, r6, #2
 8000ab0:	58eb      	ldr	r3, [r5, r3]
 8000ab2:	4798      	blx	r3
 8000ab4:	3601      	adds	r6, #1
 8000ab6:	e7f2      	b.n	8000a9e <__libc_init_array+0x1e>
 8000ab8:	08000af0 	.word	0x08000af0
 8000abc:	08000af0 	.word	0x08000af0
 8000ac0:	08000af4 	.word	0x08000af4
 8000ac4:	08000af0 	.word	0x08000af0

08000ac8 <_init>:
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ace:	bc08      	pop	{r3}
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	4770      	bx	lr

08000ad4 <_fini>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ada:	bc08      	pop	{r3}
 8000adc:	469e      	mov	lr, r3
 8000ade:	4770      	bx	lr
