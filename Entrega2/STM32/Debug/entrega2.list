
entrega2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a88  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001b3c  08001b3c  00002b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bd8  08001bd8  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001bd8  08001bd8  00003050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001bd8  08001bd8  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bd8  08001bd8  00002bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bdc  08001bdc  00002bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001be0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08001c30  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001c30  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001654  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007b0  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00004e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000011a  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022a5  00000000  00000000  00005132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000026fd  00000000  00000000  000073d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000853f  00000000  00000000  00009ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00012013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000928  00000000  00000000  00012058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00012980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000050 	.word	0x20000050
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08001b24 	.word	0x08001b24

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000054 	.word	0x20000054
 80000f8:	08001b24 	.word	0x08001b24

080000fc <__gnu_thumb1_case_shi>:
 80000fc:	b403      	push	{r0, r1}
 80000fe:	4671      	mov	r1, lr
 8000100:	0849      	lsrs	r1, r1, #1
 8000102:	0040      	lsls	r0, r0, #1
 8000104:	0049      	lsls	r1, r1, #1
 8000106:	5e09      	ldrsh	r1, [r1, r0]
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	448e      	add	lr, r1
 800010c:	bc03      	pop	{r0, r1}
 800010e:	4770      	bx	lr

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <USER_ADC_Init>:
#include <stdint.h>
#include "main.h"
#include "systicklib.h"
#include "adclib.h"

void USER_ADC_Init(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
    // Enable ADC and GPIOA clock
    RCC->IOPENR |= (1 << 0);     // GPIOAEN
 8000402:	4b4e      	ldr	r3, [pc, #312]	@ (800053c <USER_ADC_Init+0x140>)
 8000404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <USER_ADC_Init+0x140>)
 8000408:	2101      	movs	r1, #1
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (1 << 20);   // ADCEN
 800040e:	4b4b      	ldr	r3, [pc, #300]	@ (800053c <USER_ADC_Init+0x140>)
 8000410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000412:	4b4a      	ldr	r3, [pc, #296]	@ (800053c <USER_ADC_Init+0x140>)
 8000414:	2180      	movs	r1, #128	@ 0x80
 8000416:	0349      	lsls	r1, r1, #13
 8000418:	430a      	orrs	r2, r1
 800041a:	641a      	str	r2, [r3, #64]	@ 0x40

    // PA0 in analog mode
    GPIOA->MODER |= (0x3 << (0*2));   // Analog mode
 800041c:	23a0      	movs	r3, #160	@ 0xa0
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	23a0      	movs	r3, #160	@ 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2103      	movs	r1, #3
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR &= ~(0x3 << (0*2));  // No pull-up/pull-down
 800042c:	23a0      	movs	r3, #160	@ 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	68da      	ldr	r2, [r3, #12]
 8000432:	23a0      	movs	r3, #160	@ 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2103      	movs	r1, #3
 8000438:	438a      	bics	r2, r1
 800043a:	60da      	str	r2, [r3, #12]

    // Configure CKMODE for synchronous clock divided by 2
    ADC->CFGR2 &= ~(0x3 << 30);        // Clear CKMODE
 800043c:	4b40      	ldr	r3, [pc, #256]	@ (8000540 <USER_ADC_Init+0x144>)
 800043e:	691a      	ldr	r2, [r3, #16]
 8000440:	4b3f      	ldr	r3, [pc, #252]	@ (8000540 <USER_ADC_Init+0x144>)
 8000442:	0092      	lsls	r2, r2, #2
 8000444:	0892      	lsrs	r2, r2, #2
 8000446:	611a      	str	r2, [r3, #16]
    //ADC1->CFGR2 |=  (0x1 << 30);        // CKMODE = 01: PCLK/2

    ADC->CCR &= ~(0xE << 18);
 8000448:	4a3d      	ldr	r2, [pc, #244]	@ (8000540 <USER_ADC_Init+0x144>)
 800044a:	23c2      	movs	r3, #194	@ 0xc2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	58d3      	ldr	r3, [r2, r3]
 8000450:	493b      	ldr	r1, [pc, #236]	@ (8000540 <USER_ADC_Init+0x144>)
 8000452:	4a3c      	ldr	r2, [pc, #240]	@ (8000544 <USER_ADC_Init+0x148>)
 8000454:	401a      	ands	r2, r3
 8000456:	23c2      	movs	r3, #194	@ 0xc2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	50ca      	str	r2, [r1, r3]
    ADC->CCR|=  (0x1 << 18);
 800045c:	4a38      	ldr	r2, [pc, #224]	@ (8000540 <USER_ADC_Init+0x144>)
 800045e:	23c2      	movs	r3, #194	@ 0xc2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	58d3      	ldr	r3, [r2, r3]
 8000464:	4936      	ldr	r1, [pc, #216]	@ (8000540 <USER_ADC_Init+0x144>)
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	02d2      	lsls	r2, r2, #11
 800046a:	431a      	orrs	r2, r3
 800046c:	23c2      	movs	r3, #194	@ 0xc2
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	50ca      	str	r2, [r1, r3]

    // Configure resolution, alignment, conversion mode
    ADC->CFGR1 &= ~(0x1 << 13); // Single conversion mode
 8000472:	4b33      	ldr	r3, [pc, #204]	@ (8000540 <USER_ADC_Init+0x144>)
 8000474:	68da      	ldr	r2, [r3, #12]
 8000476:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <USER_ADC_Init+0x144>)
 8000478:	4933      	ldr	r1, [pc, #204]	@ (8000548 <USER_ADC_Init+0x14c>)
 800047a:	400a      	ands	r2, r1
 800047c:	60da      	str	r2, [r3, #12]
    ADC->CFGR1 &= ~(0x1 << 5);  // Right alignment
 800047e:	4b30      	ldr	r3, [pc, #192]	@ (8000540 <USER_ADC_Init+0x144>)
 8000480:	68da      	ldr	r2, [r3, #12]
 8000482:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <USER_ADC_Init+0x144>)
 8000484:	2120      	movs	r1, #32
 8000486:	438a      	bics	r2, r1
 8000488:	60da      	str	r2, [r3, #12]
    ADC->CFGR1 &= ~(0x3 << 3);  // 12-bit resolution
 800048a:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <USER_ADC_Init+0x144>)
 800048c:	68da      	ldr	r2, [r3, #12]
 800048e:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <USER_ADC_Init+0x144>)
 8000490:	2118      	movs	r1, #24
 8000492:	438a      	bics	r2, r1
 8000494:	60da      	str	r2, [r3, #12]

    // Sampling time
    ADC->SMPR &= ~(0x7 << 0);   // Clear bits
 8000496:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <USER_ADC_Init+0x144>)
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	4b29      	ldr	r3, [pc, #164]	@ (8000540 <USER_ADC_Init+0x144>)
 800049c:	2107      	movs	r1, #7
 800049e:	438a      	bics	r2, r1
 80004a0:	615a      	str	r2, [r3, #20]
    ADC->SMPR |= (0x4 << 0);    // Moderate sampling time (e.g., 7.5 ADC clk)
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <USER_ADC_Init+0x144>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b26      	ldr	r3, [pc, #152]	@ (8000540 <USER_ADC_Init+0x144>)
 80004a8:	2104      	movs	r1, #4
 80004aa:	430a      	orrs	r2, r1
 80004ac:	615a      	str	r2, [r3, #20]

    ADC->ISR &= ~( 0x1UL << 13U );
 80004ae:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <USER_ADC_Init+0x144>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <USER_ADC_Init+0x144>)
 80004b4:	4924      	ldr	r1, [pc, #144]	@ (8000548 <USER_ADC_Init+0x14c>)
 80004b6:	400a      	ands	r2, r1
 80004b8:	601a      	str	r2, [r3, #0]
    ADC->CFGR1 &= ~( 0x1UL << 21U ) & ~( 0x1UL << 2U );
 80004ba:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <USER_ADC_Init+0x144>)
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <USER_ADC_Init+0x144>)
 80004c0:	4922      	ldr	r1, [pc, #136]	@ (800054c <USER_ADC_Init+0x150>)
 80004c2:	400a      	ands	r2, r1
 80004c4:	60da      	str	r2, [r3, #12]

    // Select channel 0 (PA0)
    ADC->CHSELR |= (1 << 0);
 80004c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <USER_ADC_Init+0x144>)
 80004c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80004ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <USER_ADC_Init+0x144>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	629a      	str	r2, [r3, #40]	@ 0x28

    while( !(ADC->ISR & (0x1UL << 13U)));
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <USER_ADC_Init+0x144>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	2380      	movs	r3, #128	@ 0x80
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	4013      	ands	r3, r2
 80004de:	d0f9      	beq.n	80004d4 <USER_ADC_Init+0xd8>

    // Enable internal regulator
    ADC->CR |= (1 << 28);       // ADVREGEN
 80004e0:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <USER_ADC_Init+0x144>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <USER_ADC_Init+0x144>)
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	0549      	lsls	r1, r1, #21
 80004ea:	430a      	orrs	r2, r1
 80004ec:	609a      	str	r2, [r3, #8]
    SysTick_Delay(100);            // Delay > 10 us
 80004ee:	2064      	movs	r0, #100	@ 0x64
 80004f0:	f000 fd50 	bl	8000f94 <SysTick_Delay>

    // Calibration
    while (!USER_ADC_Calibration());
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	f000 f82b 	bl	8000550 <USER_ADC_Calibration>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d0fb      	beq.n	80004f6 <USER_ADC_Init+0xfa>

    // Enable ADC
    ADC->CR |= (1 << 0);         // ADEN
 80004fe:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <USER_ADC_Init+0x144>)
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <USER_ADC_Init+0x144>)
 8000504:	2101      	movs	r1, #1
 8000506:	430a      	orrs	r2, r1
 8000508:	609a      	str	r2, [r3, #8]
    for (uint32_t i = 0; i < 1000 && !(ADC->ISR & (1 << 0)); i++) SysTick_Delay(1); // Wait up to 1ms
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	e005      	b.n	800051c <USER_ADC_Init+0x120>
 8000510:	2001      	movs	r0, #1
 8000512:	f000 fd3f 	bl	8000f94 <SysTick_Delay>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3301      	adds	r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	23fa      	movs	r3, #250	@ 0xfa
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	429a      	cmp	r2, r3
 8000524:	d204      	bcs.n	8000530 <USER_ADC_Init+0x134>
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <USER_ADC_Init+0x144>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	d0ef      	beq.n	8000510 <USER_ADC_Init+0x114>
    if (!(ADC->ISR & (1 << 0))) return;  // Fail if ADRDY not set
 8000530:	4b03      	ldr	r3, [pc, #12]	@ (8000540 <USER_ADC_Init+0x144>)
 8000532:	681b      	ldr	r3, [r3, #0]
}
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	40021000 	.word	0x40021000
 8000540:	40012400 	.word	0x40012400
 8000544:	ffc7ffff 	.word	0xffc7ffff
 8000548:	ffffdfff 	.word	0xffffdfff
 800054c:	ffdffffb 	.word	0xffdffffb

08000550 <USER_ADC_Calibration>:

uint8_t USER_ADC_Calibration(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
    ADC->CR |= (1 << 31);                   // ADCAL
 8000554:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <USER_ADC_Calibration+0x38>)
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <USER_ADC_Calibration+0x38>)
 800055a:	2180      	movs	r1, #128	@ 0x80
 800055c:	0609      	lsls	r1, r1, #24
 800055e:	430a      	orrs	r2, r1
 8000560:	609a      	str	r2, [r3, #8]
    while (ADC->CR & (1 << 31));            // Wait for calibration to finish
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <USER_ADC_Calibration+0x38>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	2b00      	cmp	r3, #0
 800056a:	dbfb      	blt.n	8000564 <USER_ADC_Calibration+0x14>

    // (Optional) Adjust calibration factor
    if (ADC->CALFACT > 0x7F) {
 800056c:	4a06      	ldr	r2, [pc, #24]	@ (8000588 <USER_ADC_Calibration+0x38>)
 800056e:	23b4      	movs	r3, #180	@ 0xb4
 8000570:	58d3      	ldr	r3, [r2, r3]
 8000572:	2b7f      	cmp	r3, #127	@ 0x7f
 8000574:	d903      	bls.n	800057e <USER_ADC_Calibration+0x2e>
        ADC->CALFACT = 0x7F;
 8000576:	4a04      	ldr	r2, [pc, #16]	@ (8000588 <USER_ADC_Calibration+0x38>)
 8000578:	23b4      	movs	r3, #180	@ 0xb4
 800057a:	217f      	movs	r1, #127	@ 0x7f
 800057c:	50d1      	str	r1, [r2, r3]
    }
    return 1;
 800057e:	2301      	movs	r3, #1
}
 8000580:	0018      	movs	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	40012400 	.word	0x40012400

0800058c <USER_ADC_Read>:

uint16_t USER_ADC_Read(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    ADC->CR |= (1 << 2);               // ADSTART
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <USER_ADC_Read+0x40>)
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <USER_ADC_Read+0x40>)
 8000596:	2104      	movs	r1, #4
 8000598:	430a      	orrs	r2, r1
 800059a:	609a      	str	r2, [r3, #8]
    while (!(ADC->ISR & (1 << 2)));    // Wait for EOC
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <USER_ADC_Read+0x40>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2204      	movs	r2, #4
 80005a4:	4013      	ands	r3, r2
 80005a6:	d0fa      	beq.n	800059e <USER_ADC_Read+0x12>
    if (ADC->ISR & (1 << 4)) {         // Check for overrun error
 80005a8:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <USER_ADC_Read+0x40>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2210      	movs	r2, #16
 80005ae:	4013      	ands	r3, r2
 80005b0:	d005      	beq.n	80005be <USER_ADC_Read+0x32>
        ADC->ISR |= (1 << 4);          // Clear overrun flag
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <USER_ADC_Read+0x40>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <USER_ADC_Read+0x40>)
 80005b8:	2110      	movs	r1, #16
 80005ba:	430a      	orrs	r2, r1
 80005bc:	601a      	str	r2, [r3, #0]
    }
    return (uint16_t)(ADC->DR);        // Read converted value
 80005be:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <USER_ADC_Read+0x40>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c2:	b29b      	uxth	r3, r3
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	40012400 	.word	0x40012400

080005d0 <LCD_Init>:
	{ 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

void LCD_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
	int8_t const *p;

	// Enable clock for GPIOB
	RCC->IOPENR |= (0x1UL << 1U);
 80005d6:	4b6a      	ldr	r3, [pc, #424]	@ (8000780 <LCD_Init+0x1b0>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005da:	4b69      	ldr	r3, [pc, #420]	@ (8000780 <LCD_Init+0x1b0>)
 80005dc:	2102      	movs	r1, #2
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	@ 0x34

	// Configure control pins (RS, RW, EN) as general purpose output push-pull
	for (uint8_t pin = 9; pin <= 11; ++pin) {
 80005e2:	230b      	movs	r3, #11
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2209      	movs	r2, #9
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	e032      	b.n	8000652 <LCD_Init+0x82>
		GPIOB->PUPDR  &= ~(0x3UL << (pin * 2));
 80005ec:	4b65      	ldr	r3, [pc, #404]	@ (8000784 <LCD_Init+0x1b4>)
 80005ee:	68da      	ldr	r2, [r3, #12]
 80005f0:	200b      	movs	r0, #11
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	2103      	movs	r1, #3
 80005fa:	4099      	lsls	r1, r3
 80005fc:	000b      	movs	r3, r1
 80005fe:	43d9      	mvns	r1, r3
 8000600:	4b60      	ldr	r3, [pc, #384]	@ (8000784 <LCD_Init+0x1b4>)
 8000602:	400a      	ands	r2, r1
 8000604:	60da      	str	r2, [r3, #12]
		GPIOB->OTYPER &= ~(0x1UL << pin);
 8000606:	4b5f      	ldr	r3, [pc, #380]	@ (8000784 <LCD_Init+0x1b4>)
 8000608:	685a      	ldr	r2, [r3, #4]
 800060a:	183b      	adds	r3, r7, r0
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2101      	movs	r1, #1
 8000610:	4099      	lsls	r1, r3
 8000612:	000b      	movs	r3, r1
 8000614:	43d9      	mvns	r1, r3
 8000616:	4b5b      	ldr	r3, [pc, #364]	@ (8000784 <LCD_Init+0x1b4>)
 8000618:	400a      	ands	r2, r1
 800061a:	605a      	str	r2, [r3, #4]
		GPIOB->MODER  &= ~(0x2UL << (pin * 2));
 800061c:	4b59      	ldr	r3, [pc, #356]	@ (8000784 <LCD_Init+0x1b4>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	183b      	adds	r3, r7, r0
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2102      	movs	r1, #2
 8000628:	4099      	lsls	r1, r3
 800062a:	000b      	movs	r3, r1
 800062c:	43d9      	mvns	r1, r3
 800062e:	4b55      	ldr	r3, [pc, #340]	@ (8000784 <LCD_Init+0x1b4>)
 8000630:	400a      	ands	r2, r1
 8000632:	601a      	str	r2, [r3, #0]
		GPIOB->MODER  |=  (0x1UL << (pin * 2));
 8000634:	4b53      	ldr	r3, [pc, #332]	@ (8000784 <LCD_Init+0x1b4>)
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	183b      	adds	r3, r7, r0
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2201      	movs	r2, #1
 8000640:	409a      	lsls	r2, r3
 8000642:	4b50      	ldr	r3, [pc, #320]	@ (8000784 <LCD_Init+0x1b4>)
 8000644:	430a      	orrs	r2, r1
 8000646:	601a      	str	r2, [r3, #0]
	for (uint8_t pin = 9; pin <= 11; ++pin) {
 8000648:	183b      	adds	r3, r7, r0
 800064a:	183a      	adds	r2, r7, r0
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	3201      	adds	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	230b      	movs	r3, #11
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0b      	cmp	r3, #11
 800065a:	d9c7      	bls.n	80005ec <LCD_Init+0x1c>
	}

	// Configure data pins (D4-D7) as general purpose output push-pull
	for (uint8_t pin = 12; pin <= 15; ++pin) {
 800065c:	230a      	movs	r3, #10
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	220c      	movs	r2, #12
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e032      	b.n	80006cc <LCD_Init+0xfc>
		GPIOB->PUPDR  &= ~(0x3UL << (pin * 2));
 8000666:	4b47      	ldr	r3, [pc, #284]	@ (8000784 <LCD_Init+0x1b4>)
 8000668:	68da      	ldr	r2, [r3, #12]
 800066a:	200a      	movs	r0, #10
 800066c:	183b      	adds	r3, r7, r0
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	2103      	movs	r1, #3
 8000674:	4099      	lsls	r1, r3
 8000676:	000b      	movs	r3, r1
 8000678:	43d9      	mvns	r1, r3
 800067a:	4b42      	ldr	r3, [pc, #264]	@ (8000784 <LCD_Init+0x1b4>)
 800067c:	400a      	ands	r2, r1
 800067e:	60da      	str	r2, [r3, #12]
		GPIOB->OTYPER &= ~(0x1UL << pin);
 8000680:	4b40      	ldr	r3, [pc, #256]	@ (8000784 <LCD_Init+0x1b4>)
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	183b      	adds	r3, r7, r0
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	4099      	lsls	r1, r3
 800068c:	000b      	movs	r3, r1
 800068e:	43d9      	mvns	r1, r3
 8000690:	4b3c      	ldr	r3, [pc, #240]	@ (8000784 <LCD_Init+0x1b4>)
 8000692:	400a      	ands	r2, r1
 8000694:	605a      	str	r2, [r3, #4]
		GPIOB->MODER  &= ~(0x2UL << (pin * 2));
 8000696:	4b3b      	ldr	r3, [pc, #236]	@ (8000784 <LCD_Init+0x1b4>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	183b      	adds	r3, r7, r0
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	2102      	movs	r1, #2
 80006a2:	4099      	lsls	r1, r3
 80006a4:	000b      	movs	r3, r1
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <LCD_Init+0x1b4>)
 80006aa:	400a      	ands	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]
		GPIOB->MODER  |=  (0x1UL << (pin * 2));
 80006ae:	4b35      	ldr	r3, [pc, #212]	@ (8000784 <LCD_Init+0x1b4>)
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	2201      	movs	r2, #1
 80006ba:	409a      	lsls	r2, r3
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <LCD_Init+0x1b4>)
 80006be:	430a      	orrs	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]
	for (uint8_t pin = 12; pin <= 15; ++pin) {
 80006c2:	183b      	adds	r3, r7, r0
 80006c4:	183a      	adds	r2, r7, r0
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	3201      	adds	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	230a      	movs	r3, #10
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d9c7      	bls.n	8000666 <LCD_Init+0x96>
	}

	// LCD power-on initialization sequence
	GPIOB->BSRR = LCD_RS_PIN_LOW | LCD_RW_PIN_LOW | LCD_EN_PIN_LOW |
 80006d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <LCD_Init+0x1b4>)
 80006d8:	22fe      	movs	r2, #254	@ 0xfe
 80006da:	0612      	lsls	r2, r2, #24
 80006dc:	619a      	str	r2, [r3, #24]
				  LCD_D4_PIN_LOW | LCD_D5_PIN_LOW | LCD_D6_PIN_LOW | LCD_D7_PIN_LOW;
	SysTick_Delay(50);
 80006de:	2032      	movs	r0, #50	@ 0x32
 80006e0:	f000 fc58 	bl	8000f94 <SysTick_Delay>

	for (int i = 0; i < 3; ++i) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	e00a      	b.n	8000700 <LCD_Init+0x130>
		GPIOB->BSRR = LCD_D4_PIN_HIGH | LCD_D5_PIN_HIGH | LCD_D6_PIN_LOW | LCD_D7_PIN_LOW;
 80006ea:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <LCD_Init+0x1b4>)
 80006ec:	4a26      	ldr	r2, [pc, #152]	@ (8000788 <LCD_Init+0x1b8>)
 80006ee:	619a      	str	r2, [r3, #24]
		LCD_Pulse_EN();
 80006f0:	f000 fa2e 	bl	8000b50 <LCD_Pulse_EN>
		SysTick_Delay(50);
 80006f4:	2032      	movs	r0, #50	@ 0x32
 80006f6:	f000 fc4d 	bl	8000f94 <SysTick_Delay>
	for (int i = 0; i < 3; ++i) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b02      	cmp	r3, #2
 8000704:	ddf1      	ble.n	80006ea <LCD_Init+0x11a>
	}
	while (LCD_Busy());
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	f000 f9ce 	bl	8000aa8 <LCD_Busy>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d1fb      	bne.n	8000708 <LCD_Init+0x138>

	// Set 4-bit mode
	GPIOB->BSRR = LCD_D4_PIN_LOW | LCD_D5_PIN_HIGH | LCD_D6_PIN_LOW | LCD_D7_PIN_LOW;
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <LCD_Init+0x1b4>)
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <LCD_Init+0x1bc>)
 8000714:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN();
 8000716:	f000 fa1b 	bl	8000b50 <LCD_Pulse_EN>
	while (LCD_Busy());
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	f000 f9c4 	bl	8000aa8 <LCD_Busy>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d1fb      	bne.n	800071c <LCD_Init+0x14c>

	// Function Set: 4-bit, 2 lines, 5x8 dots
	LCD_Write_Cmd(0x28U);
 8000724:	2028      	movs	r0, #40	@ 0x28
 8000726:	f000 f895 	bl	8000854 <LCD_Write_Cmd>
	// Display OFF
	LCD_Write_Cmd(0x08U);
 800072a:	2008      	movs	r0, #8
 800072c:	f000 f892 	bl	8000854 <LCD_Write_Cmd>
	// Clear display
	LCD_Write_Cmd(0x01U);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 f88f 	bl	8000854 <LCD_Write_Cmd>
	// Entry mode set: increment, no shift
	LCD_Write_Cmd(0x06U);
 8000736:	2006      	movs	r0, #6
 8000738:	f000 f88c 	bl	8000854 <LCD_Write_Cmd>
	// Display ON, cursor ON, blink ON
	LCD_Write_Cmd(0x0FU);
 800073c:	200f      	movs	r0, #15
 800073e:	f000 f889 	bl	8000854 <LCD_Write_Cmd>

	// Load user-defined characters into CGRAM
	LCD_Write_Cmd(0x40);
 8000742:	2040      	movs	r0, #64	@ 0x40
 8000744:	f000 f886 	bl	8000854 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <LCD_Init+0x1c0>)
 800074a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(UserFont); i++, p++)
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	e00c      	b.n	800076c <LCD_Init+0x19c>
		LCD_Put_Char(*p);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b25b      	sxtb	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f890 	bl	8000880 <LCD_Put_Char>
	for (int i = 0; i < sizeof(UserFont); i++, p++)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000770:	d9ef      	bls.n	8000752 <LCD_Init+0x182>

	// Set DDRAM address to 0
	LCD_Write_Cmd(0x80);
 8000772:	2080      	movs	r0, #128	@ 0x80
 8000774:	f000 f86e 	bl	8000854 <LCD_Write_Cmd>
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	50000400 	.word	0x50000400
 8000788:	c0003000 	.word	0xc0003000
 800078c:	d0002000 	.word	0xd0002000
 8000790:	08001b64 	.word	0x08001b64

08000794 <LCD_Out_Data4>:

void LCD_Out_Data4(uint8_t val) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR = (val & 0x01U) ? LCD_D4_PIN_HIGH : LCD_D4_PIN_LOW;
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2201      	movs	r2, #1
 80007a6:	4013      	ands	r3, r2
 80007a8:	d002      	beq.n	80007b0 <LCD_Out_Data4+0x1c>
 80007aa:	2380      	movs	r3, #128	@ 0x80
 80007ac:	015b      	lsls	r3, r3, #5
 80007ae:	e001      	b.n	80007b4 <LCD_Out_Data4+0x20>
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	055b      	lsls	r3, r3, #21
 80007b4:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <LCD_Out_Data4+0x74>)
 80007b6:	6193      	str	r3, [r2, #24]
	GPIOB->BSRR = (val & 0x02U) ? LCD_D5_PIN_HIGH : LCD_D5_PIN_LOW;
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2202      	movs	r2, #2
 80007be:	4013      	ands	r3, r2
 80007c0:	d002      	beq.n	80007c8 <LCD_Out_Data4+0x34>
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	e001      	b.n	80007cc <LCD_Out_Data4+0x38>
 80007c8:	2380      	movs	r3, #128	@ 0x80
 80007ca:	059b      	lsls	r3, r3, #22
 80007cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <LCD_Out_Data4+0x74>)
 80007ce:	6193      	str	r3, [r2, #24]
	GPIOB->BSRR = (val & 0x04U) ? LCD_D6_PIN_HIGH : LCD_D6_PIN_LOW;
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2204      	movs	r2, #4
 80007d6:	4013      	ands	r3, r2
 80007d8:	d002      	beq.n	80007e0 <LCD_Out_Data4+0x4c>
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	01db      	lsls	r3, r3, #7
 80007de:	e001      	b.n	80007e4 <LCD_Out_Data4+0x50>
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <LCD_Out_Data4+0x74>)
 80007e6:	6193      	str	r3, [r2, #24]
	GPIOB->BSRR = (val & 0x08U) ? LCD_D7_PIN_HIGH : LCD_D7_PIN_LOW;
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2208      	movs	r2, #8
 80007ee:	4013      	ands	r3, r2
 80007f0:	d002      	beq.n	80007f8 <LCD_Out_Data4+0x64>
 80007f2:	2380      	movs	r3, #128	@ 0x80
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	e001      	b.n	80007fc <LCD_Out_Data4+0x68>
 80007f8:	2380      	movs	r3, #128	@ 0x80
 80007fa:	061b      	lsls	r3, r3, #24
 80007fc:	4a02      	ldr	r2, [pc, #8]	@ (8000808 <LCD_Out_Data4+0x74>)
 80007fe:	6193      	str	r3, [r2, #24]
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}
 8000808:	50000400 	.word	0x50000400

0800080c <LCD_Write_Byte>:

void LCD_Write_Byte(uint8_t val) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	0002      	movs	r2, r0
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	701a      	strb	r2, [r3, #0]
	LCD_Out_Data4((val >> 4) & 0x0FU);
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	091b      	lsrs	r3, r3, #4
 800081e:	b2db      	uxtb	r3, r3
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff ffb7 	bl	8000794 <LCD_Out_Data4>
	LCD_Pulse_EN();
 8000826:	f000 f993 	bl	8000b50 <LCD_Pulse_EN>
	LCD_Out_Data4(val & 0x0FU);
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	220f      	movs	r2, #15
 8000830:	4013      	ands	r3, r2
 8000832:	b2db      	uxtb	r3, r3
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff ffad 	bl	8000794 <LCD_Out_Data4>
	LCD_Pulse_EN();
 800083a:	f000 f989 	bl	8000b50 <LCD_Pulse_EN>
	while (LCD_Busy());
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	f000 f932 	bl	8000aa8 <LCD_Busy>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d1fb      	bne.n	8000840 <LCD_Write_Byte+0x34>
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LCD_Write_Cmd>:

void LCD_Write_Cmd(uint8_t val) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	0002      	movs	r2, r0
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR = LCD_RS_PIN_LOW;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <LCD_Write_Cmd+0x28>)
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	0492      	lsls	r2, r2, #18
 8000866:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte(val);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff ffcd 	bl	800080c <LCD_Write_Byte>
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	50000400 	.word	0x50000400

08000880 <LCD_Put_Char>:

void LCD_Put_Char(uint8_t c) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	0002      	movs	r2, r0
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR = LCD_RS_PIN_HIGH;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <LCD_Put_Char+0x28>)
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte(c);
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ffb7 	bl	800080c <LCD_Write_Byte>
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	50000400 	.word	0x50000400

080008ac <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t line, uint8_t column) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	0002      	movs	r2, r0
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	1dbb      	adds	r3, r7, #6
 80008ba:	1c0a      	adds	r2, r1, #0
 80008bc:	701a      	strb	r2, [r3, #0]
	uint8_t address;
	column--;
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	3a01      	subs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
	line--;
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	3a01      	subs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
	address = (line * 0x40U) + column;
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	019b      	lsls	r3, r3, #6
 80008d8:	b2d9      	uxtb	r1, r3
 80008da:	200f      	movs	r0, #15
 80008dc:	183b      	adds	r3, r7, r0
 80008de:	1dba      	adds	r2, r7, #6
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	188a      	adds	r2, r1, r2
 80008e4:	701a      	strb	r2, [r3, #0]
	address = 0x80U + (address & 0x7FU);
 80008e6:	0001      	movs	r1, r0
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	227f      	movs	r2, #127	@ 0x7f
 80008ee:	4013      	ands	r3, r2
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	3a80      	subs	r2, #128	@ 0x80
 80008f6:	701a      	strb	r2, [r3, #0]
	LCD_Write_Cmd(address);
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff ffa9 	bl	8000854 <LCD_Write_Cmd>
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}

0800090a <LCD_Put_Str>:

void LCD_Put_Str(char *str) {
 800090a:	b590      	push	{r4, r7, lr}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	for (int16_t i = 0; i < 16 && str[i] != 0; i++)
 8000912:	230e      	movs	r3, #14
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	2200      	movs	r2, #0
 8000918:	801a      	strh	r2, [r3, #0]
 800091a:	e012      	b.n	8000942 <LCD_Put_Str+0x38>
		LCD_Put_Char(str[i]);
 800091c:	240e      	movs	r4, #14
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2200      	movs	r2, #0
 8000922:	5e9b      	ldrsh	r3, [r3, r2]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	18d3      	adds	r3, r2, r3
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ffa8 	bl	8000880 <LCD_Put_Char>
	for (int16_t i = 0; i < 16 && str[i] != 0; i++)
 8000930:	0021      	movs	r1, r4
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	5e9b      	ldrsh	r3, [r3, r2]
 8000938:	b29b      	uxth	r3, r3
 800093a:	3301      	adds	r3, #1
 800093c:	b29a      	uxth	r2, r3
 800093e:	187b      	adds	r3, r7, r1
 8000940:	801a      	strh	r2, [r3, #0]
 8000942:	220e      	movs	r2, #14
 8000944:	18bb      	adds	r3, r7, r2
 8000946:	2100      	movs	r1, #0
 8000948:	5e5b      	ldrsh	r3, [r3, r1]
 800094a:	2b0f      	cmp	r3, #15
 800094c:	dc07      	bgt.n	800095e <LCD_Put_Str+0x54>
 800094e:	18bb      	adds	r3, r7, r2
 8000950:	2200      	movs	r2, #0
 8000952:	5e9b      	ldrsh	r3, [r3, r2]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	18d3      	adds	r3, r2, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1de      	bne.n	800091c <LCD_Put_Str+0x12>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b005      	add	sp, #20
 8000964:	bd90      	pop	{r4, r7, pc}

08000966 <LCD_Put_Num>:

void LCD_Put_Num(int16_t num) {
 8000966:	b590      	push	{r4, r7, lr}
 8000968:	b087      	sub	sp, #28
 800096a:	af00      	add	r7, sp, #0
 800096c:	0002      	movs	r2, r0
 800096e:	1dbb      	adds	r3, r7, #6
 8000970:	801a      	strh	r2, [r3, #0]
	int16_t p;
	int16_t f = 0;
 8000972:	2314      	movs	r3, #20
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	2200      	movs	r2, #0
 8000978:	801a      	strh	r2, [r3, #0]
	int8_t ch[5];

	for (int16_t i = 0; i < 5; i++) {
 800097a:	2312      	movs	r3, #18
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	2200      	movs	r2, #0
 8000980:	801a      	strh	r2, [r3, #0]
 8000982:	e085      	b.n	8000a90 <LCD_Put_Num+0x12a>
		p = 1;
 8000984:	2316      	movs	r3, #22
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	2201      	movs	r2, #1
 800098a:	801a      	strh	r2, [r3, #0]
		for (int16_t j = 4 - i; j > 0; j--)
 800098c:	2312      	movs	r3, #18
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2204      	movs	r2, #4
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	b29a      	uxth	r2, r3
 8000998:	2310      	movs	r3, #16
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	801a      	strh	r2, [r3, #0]
 800099e:	e012      	b.n	80009c6 <LCD_Put_Num+0x60>
			p *= 10;
 80009a0:	2116      	movs	r1, #22
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	1c1a      	adds	r2, r3, #0
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	18d3      	adds	r3, r2, r3
 80009ac:	18db      	adds	r3, r3, r3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	801a      	strh	r2, [r3, #0]
		for (int16_t j = 4 - i; j > 0; j--)
 80009b4:	2110      	movs	r1, #16
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	5e9b      	ldrsh	r3, [r3, r2]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	3b01      	subs	r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	801a      	strh	r2, [r3, #0]
 80009c6:	2310      	movs	r3, #16
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	2200      	movs	r2, #0
 80009cc:	5e9b      	ldrsh	r3, [r3, r2]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dce6      	bgt.n	80009a0 <LCD_Put_Num+0x3a>
		ch[i] = (num / p);
 80009d2:	1dbb      	adds	r3, r7, #6
 80009d4:	2200      	movs	r2, #0
 80009d6:	5e9a      	ldrsh	r2, [r3, r2]
 80009d8:	2416      	movs	r4, #22
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2100      	movs	r1, #0
 80009de:	5e5b      	ldrsh	r3, [r3, r1]
 80009e0:	0019      	movs	r1, r3
 80009e2:	0010      	movs	r0, r2
 80009e4:	f7ff fc1e 	bl	8000224 <__divsi3>
 80009e8:	0003      	movs	r3, r0
 80009ea:	001a      	movs	r2, r3
 80009ec:	2312      	movs	r3, #18
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	5e5b      	ldrsh	r3, [r3, r1]
 80009f4:	b251      	sxtb	r1, r2
 80009f6:	2208      	movs	r2, #8
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	54d1      	strb	r1, [r2, r3]
		if (num >= p && !f)
 80009fc:	1dba      	adds	r2, r7, #6
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2100      	movs	r1, #0
 8000a02:	5e52      	ldrsh	r2, [r2, r1]
 8000a04:	2100      	movs	r1, #0
 8000a06:	5e5b      	ldrsh	r3, [r3, r1]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	db08      	blt.n	8000a1e <LCD_Put_Num+0xb8>
 8000a0c:	2214      	movs	r2, #20
 8000a0e:	18bb      	adds	r3, r7, r2
 8000a10:	2100      	movs	r1, #0
 8000a12:	5e5b      	ldrsh	r3, [r3, r1]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <LCD_Put_Num+0xb8>
			f = 1;
 8000a18:	18bb      	adds	r3, r7, r2
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	801a      	strh	r2, [r3, #0]
		num -= ch[i] * p;
 8000a1e:	1dbb      	adds	r3, r7, #6
 8000a20:	881a      	ldrh	r2, [r3, #0]
 8000a22:	2012      	movs	r0, #18
 8000a24:	183b      	adds	r3, r7, r0
 8000a26:	2100      	movs	r1, #0
 8000a28:	5e5b      	ldrsh	r3, [r3, r1]
 8000a2a:	2408      	movs	r4, #8
 8000a2c:	1939      	adds	r1, r7, r4
 8000a2e:	56cb      	ldrsb	r3, [r1, r3]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	2116      	movs	r1, #22
 8000a34:	1879      	adds	r1, r7, r1
 8000a36:	8809      	ldrh	r1, [r1, #0]
 8000a38:	434b      	muls	r3, r1
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	801a      	strh	r2, [r3, #0]
		ch[i] += 48;
 8000a44:	183b      	adds	r3, r7, r0
 8000a46:	2200      	movs	r2, #0
 8000a48:	5e9b      	ldrsh	r3, [r3, r2]
 8000a4a:	193a      	adds	r2, r7, r4
 8000a4c:	56d3      	ldrsb	r3, [r2, r3]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	3330      	adds	r3, #48	@ 0x30
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	183b      	adds	r3, r7, r0
 8000a56:	2100      	movs	r1, #0
 8000a58:	5e5b      	ldrsh	r3, [r3, r1]
 8000a5a:	b251      	sxtb	r1, r2
 8000a5c:	193a      	adds	r2, r7, r4
 8000a5e:	54d1      	strb	r1, [r2, r3]
		if (f)
 8000a60:	2314      	movs	r3, #20
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	5e9b      	ldrsh	r3, [r3, r2]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d008      	beq.n	8000a7e <LCD_Put_Num+0x118>
			LCD_Put_Char(ch[i]);
 8000a6c:	183b      	adds	r3, r7, r0
 8000a6e:	2200      	movs	r2, #0
 8000a70:	5e9b      	ldrsh	r3, [r3, r2]
 8000a72:	193a      	adds	r2, r7, r4
 8000a74:	56d3      	ldrsb	r3, [r2, r3]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff01 	bl	8000880 <LCD_Put_Char>
	for (int16_t i = 0; i < 5; i++) {
 8000a7e:	2112      	movs	r1, #18
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	5e9b      	ldrsh	r3, [r3, r2]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	801a      	strh	r2, [r3, #0]
 8000a90:	2312      	movs	r3, #18
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	2200      	movs	r2, #0
 8000a96:	5e9b      	ldrsh	r3, [r3, r2]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	dc00      	bgt.n	8000a9e <LCD_Put_Num+0x138>
 8000a9c:	e772      	b.n	8000984 <LCD_Put_Num+0x1e>
	}
}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b007      	add	sp, #28
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <LCD_Busy>:

char LCD_Busy(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	// Configure D7 as input floating
	GPIOB->PUPDR &= ~(0x3UL << 30U);
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <LCD_Busy+0xa0>)
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <LCD_Busy+0xa0>)
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	0892      	lsrs	r2, r2, #2
 8000ab8:	60da      	str	r2, [r3, #12]
	GPIOB->MODER &= ~(0x3UL << 30U);
 8000aba:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <LCD_Busy+0xa0>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <LCD_Busy+0xa0>)
 8000ac0:	0092      	lsls	r2, r2, #2
 8000ac2:	0892      	lsrs	r2, r2, #2
 8000ac4:	601a      	str	r2, [r3, #0]
	GPIOB->BSRR  = LCD_RS_PIN_LOW;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <LCD_Busy+0xa0>)
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	0492      	lsls	r2, r2, #18
 8000acc:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  = LCD_RW_PIN_HIGH;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <LCD_Busy+0xa0>)
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	00d2      	lsls	r2, r2, #3
 8000ad4:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  = LCD_EN_PIN_HIGH;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <LCD_Busy+0xa0>)
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	619a      	str	r2, [r3, #24]
	SysTick_Delay(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 fa58 	bl	8000f94 <SysTick_Delay>
	char busy = (GPIOB->IDR & LCD_D7_PIN_HIGH) ? 1 : 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <LCD_Busy+0xa0>)
 8000ae6:	691a      	ldr	r2, [r3, #16]
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	4013      	ands	r3, r2
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	4193      	sbcs	r3, r2
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR = LCD_EN_PIN_LOW;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <LCD_Busy+0xa0>)
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	0512      	lsls	r2, r2, #20
 8000afe:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = LCD_RW_PIN_LOW;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b02:	2280      	movs	r2, #128	@ 0x80
 8000b04:	04d2      	lsls	r2, r2, #19
 8000b06:	619a      	str	r2, [r3, #24]
	// Configure D7 as output push-pull
	GPIOB->PUPDR  &= ~(0x3UL << 30U);
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b0e:	0092      	lsls	r2, r2, #2
 8000b10:	0892      	lsrs	r2, r2, #2
 8000b12:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~(0x1UL << 15U);
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b1a:	490c      	ldr	r1, [pc, #48]	@ (8000b4c <LCD_Busy+0xa4>)
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~(0x2UL << 30U);
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	0852      	lsrs	r2, r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  (0x1UL << 30U);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <LCD_Busy+0xa0>)
 8000b32:	2180      	movs	r1, #128	@ 0x80
 8000b34:	05c9      	lsls	r1, r1, #23
 8000b36:	430a      	orrs	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
	return busy;
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	50000400 	.word	0x50000400
 8000b4c:	ffff7fff 	.word	0xffff7fff

08000b50 <LCD_Pulse_EN>:

void LCD_Pulse_EN(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	GPIOB->BSRR = LCD_EN_PIN_LOW;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <LCD_Pulse_EN+0x34>)
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	0512      	lsls	r2, r2, #20
 8000b5a:	619a      	str	r2, [r3, #24]
	SysTick_Delay(1);
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 fa19 	bl	8000f94 <SysTick_Delay>
	GPIOB->BSRR = LCD_EN_PIN_HIGH;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <LCD_Pulse_EN+0x34>)
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	619a      	str	r2, [r3, #24]
	SysTick_Delay(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fa12 	bl	8000f94 <SysTick_Delay>
	GPIOB->BSRR = LCD_EN_PIN_LOW;
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <LCD_Pulse_EN+0x34>)
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	0512      	lsls	r2, r2, #20
 8000b76:	619a      	str	r2, [r3, #24]
	SysTick_Delay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 fa0b 	bl	8000f94 <SysTick_Delay>
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	50000400 	.word	0x50000400

08000b88 <main>:

uint8_t uart_rx_buffer[128];
uint16_t uart_rx_index = 0;

int main(void)
{
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b092      	sub	sp, #72	@ 0x48
 8000b8c:	af00      	add	r7, sp, #0
	// Initialize system clock and peripherals
	USER_RCC_Init();
 8000b8e:	f000 f8a3 	bl	8000cd8 <USER_RCC_Init>
	USER_SysTick_Init();
 8000b92:	f000 f9e9 	bl	8000f68 <USER_SysTick_Init>
	USER_UART1_Init();
 8000b96:	f000 fa25 	bl	8000fe4 <USER_UART1_Init>
	USER_GPIO_Init();
 8000b9a:	f000 f8dd 	bl	8000d58 <USER_GPIO_Init>
	LCD_Init();
 8000b9e:	f7ff fd17 	bl	80005d0 <LCD_Init>
	USER_ADC_Init();
 8000ba2:	f7ff fc2b 	bl	80003fc <USER_ADC_Init>
//	exit INIT <---------------

	uint16_t val, prev_val = 0xFFFF;
 8000ba6:	2346      	movs	r3, #70	@ 0x46
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	2201      	movs	r2, #1
 8000bac:	4252      	negs	r2, r2
 8000bae:	801a      	strh	r2, [r3, #0]
	uint8_t button_status = 0, prev_button = 0xFF;
 8000bb0:	2345      	movs	r3, #69	@ 0x45
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	2344      	movs	r3, #68	@ 0x44
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	22ff      	movs	r2, #255	@ 0xff
 8000bbe:	701a      	strb	r2, [r3, #0]

	LCD_Clear();
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fe47 	bl	8000854 <LCD_Write_Cmd>

	for(;;) {
		// UPDATE_SERIAL();
	    val = USER_ADC_Read();
 8000bc6:	2542      	movs	r5, #66	@ 0x42
 8000bc8:	197c      	adds	r4, r7, r5
 8000bca:	f7ff fcdf 	bl	800058c <USER_ADC_Read>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	8023      	strh	r3, [r4, #0]
		Update_LEDs(val);
 8000bd2:	197b      	adds	r3, r7, r5
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f932 	bl	8000e40 <Update_LEDs>

	    if(GPIOA->IDR & (0x1UL << 8U)){
 8000bdc:	23a0      	movs	r3, #160	@ 0xa0
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4013      	ands	r3, r2
 8000be8:	d004      	beq.n	8000bf4 <main+0x6c>
	        button_status = 1;
 8000bea:	2345      	movs	r3, #69	@ 0x45
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e003      	b.n	8000bfc <main+0x74>
	    } else {
	        button_status = 0;
 8000bf4:	2345      	movs	r3, #69	@ 0x45
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
	    }

	    // Solo actualiza si el valor cambió
	    if (val != prev_val) {
 8000bfc:	2442      	movs	r4, #66	@ 0x42
 8000bfe:	193a      	adds	r2, r7, r4
 8000c00:	2546      	movs	r5, #70	@ 0x46
 8000c02:	197b      	adds	r3, r7, r5
 8000c04:	8812      	ldrh	r2, [r2, #0]
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d015      	beq.n	8000c38 <main+0xb0>
	        LCD_Set_Cursor(1, 1);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fe4c 	bl	80008ac <LCD_Set_Cursor>
	        LCD_Put_Str("ADC:      ");  // Borrar valor anterior (rellenar con espacios)
 8000c14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <main+0x144>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fe77 	bl	800090a <LCD_Put_Str>
	        LCD_Set_Cursor(1, 6);       // Solo el número
 8000c1c:	2106      	movs	r1, #6
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fe44 	bl	80008ac <LCD_Set_Cursor>
	        LCD_Put_Num(val);
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	5e9b      	ldrsh	r3, [r3, r2]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fe9b 	bl	8000966 <LCD_Put_Num>
	        prev_val = val;
 8000c30:	197b      	adds	r3, r7, r5
 8000c32:	193a      	adds	r2, r7, r4
 8000c34:	8812      	ldrh	r2, [r2, #0]
 8000c36:	801a      	strh	r2, [r3, #0]
	    }

	    if (button_status != prev_button) {
 8000c38:	2445      	movs	r4, #69	@ 0x45
 8000c3a:	193a      	adds	r2, r7, r4
 8000c3c:	2544      	movs	r5, #68	@ 0x44
 8000c3e:	197b      	adds	r3, r7, r5
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d015      	beq.n	8000c74 <main+0xec>
	        LCD_Set_Cursor(2, 1);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f7ff fe2e 	bl	80008ac <LCD_Set_Cursor>
	        LCD_Put_Str("Button:   ");
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <main+0x148>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff fe59 	bl	800090a <LCD_Put_Str>
	        LCD_Set_Cursor(2, 9);
 8000c58:	2109      	movs	r1, #9
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff fe26 	bl	80008ac <LCD_Set_Cursor>
	        LCD_Put_Num(button_status);
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fe7d 	bl	8000966 <LCD_Put_Num>
	        prev_button = button_status;
 8000c6c:	197b      	adds	r3, r7, r5
 8000c6e:	193a      	adds	r2, r7, r4
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
	    }

	    // Enviar UART (si lo necesitas)
	    // USER_USART1_Send_8bit(button_status);
		if (val != prev_val || button_status != prev_button) {
 8000c74:	2342      	movs	r3, #66	@ 0x42
 8000c76:	18fa      	adds	r2, r7, r3
 8000c78:	2346      	movs	r3, #70	@ 0x46
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	8812      	ldrh	r2, [r2, #0]
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d107      	bne.n	8000c94 <main+0x10c>
 8000c84:	2345      	movs	r3, #69	@ 0x45
 8000c86:	18fa      	adds	r2, r7, r3
 8000c88:	2344      	movs	r3, #68	@ 0x44
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d017      	beq.n	8000cc4 <main+0x13c>
            char buffer[64];
            sprintf(buffer, "ADC:%d,BTN:%d\n", val, button_status); // Formato simple
 8000c94:	2442      	movs	r4, #66	@ 0x42
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	881a      	ldrh	r2, [r3, #0]
 8000c9a:	2545      	movs	r5, #69	@ 0x45
 8000c9c:	197b      	adds	r3, r7, r5
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <main+0x14c>)
 8000ca2:	0038      	movs	r0, r7
 8000ca4:	f000 faaa 	bl	80011fc <siprintf>
            USER_USART1_Send_String(buffer);
 8000ca8:	003b      	movs	r3, r7
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fa66 	bl	800117c <USER_USART1_Send_String>

            prev_val = val;
 8000cb0:	2346      	movs	r3, #70	@ 0x46
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	193a      	adds	r2, r7, r4
 8000cb6:	8812      	ldrh	r2, [r2, #0]
 8000cb8:	801a      	strh	r2, [r3, #0]
            prev_button = button_status;
 8000cba:	2344      	movs	r3, #68	@ 0x44
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	197a      	adds	r2, r7, r5
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	701a      	strb	r2, [r3, #0]
        }
	    SysTick_Delay(100);  // Una pequeña pausa para evitar sobrecarga
 8000cc4:	2064      	movs	r0, #100	@ 0x64
 8000cc6:	f000 f965 	bl	8000f94 <SysTick_Delay>
	for(;;) {
 8000cca:	e77c      	b.n	8000bc6 <main+0x3e>
 8000ccc:	08001b3c 	.word	0x08001b3c
 8000cd0:	08001b48 	.word	0x08001b48
 8000cd4:	08001b54 	.word	0x08001b54

08000cd8 <USER_RCC_Init>:
	}
}

// Configure system clock and enable GPIOA peripheral
void USER_RCC_Init(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
		RCC->IOPENR |= (0x1UL << 0U); // Enable GPIOA clock
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	635a      	str	r2, [r3, #52]	@ 0x34
		// RCC->AHBENR |= (0x1UL << 29U); // Enable ADC clock
		// Flash latency and clock setup
		FLASH->ACR &= ~(0x6UL << 0U);
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <USER_RCC_Init+0x74>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <USER_RCC_Init+0x74>)
 8000cee:	2106      	movs	r1, #6
 8000cf0:	438a      	bics	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
		FLASH->ACR |=  (0x1UL << 0U);
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <USER_RCC_Init+0x74>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <USER_RCC_Init+0x74>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
		while((FLASH->ACR & (0x7UL << 0U)) != 0x001UL);
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <USER_RCC_Init+0x74>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2207      	movs	r2, #7
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d1f9      	bne.n	8000d02 <USER_RCC_Init+0x2a>

		RCC->CR &= ~(0x7UL << 11U);
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000d14:	490e      	ldr	r1, [pc, #56]	@ (8000d50 <USER_RCC_Init+0x78>)
 8000d16:	400a      	ands	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
		while(!(RCC->CR & (0x1UL << 10U)));
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4013      	ands	r3, r2
 8000d26:	d0f9      	beq.n	8000d1c <USER_RCC_Init+0x44>

		RCC->CFGR &= ~(0x7UL << 0U);
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000d2e:	2107      	movs	r1, #7
 8000d30:	438a      	bics	r2, r1
 8000d32:	609a      	str	r2, [r3, #8]
		RCC->CFGR &= ~(0x1UL << 11U);
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <USER_RCC_Init+0x70>)
 8000d3a:	4906      	ldr	r1, [pc, #24]	@ (8000d54 <USER_RCC_Init+0x7c>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	609a      	str	r2, [r3, #8]
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	ffffc7ff 	.word	0xffffc7ff
 8000d54:	fffff7ff 	.word	0xfffff7ff

08000d58 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    // Configurar PA6 y PA7 como salida
    GPIOA->MODER &= ~((0x3UL << (6U * 2)) | (0x3UL << (7U * 2))); // Limpiar bits
 8000d5c:	23a0      	movs	r3, #160	@ 0xa0
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	23a0      	movs	r3, #160	@ 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	4933      	ldr	r1, [pc, #204]	@ (8000e34 <USER_GPIO_Init+0xdc>)
 8000d68:	400a      	ands	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ((0x1UL << (6U * 2)) | (0x1UL << (7U * 2))); // Salida
 8000d6c:	23a0      	movs	r3, #160	@ 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	23a0      	movs	r3, #160	@ 0xa0
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	21a0      	movs	r1, #160	@ 0xa0
 8000d78:	01c9      	lsls	r1, r1, #7
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
    GPIOA->OTYPER &= ~((0x1UL << 6U) | (0x1UL << 7U));            // Push-pull
 8000d7e:	23a0      	movs	r3, #160	@ 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	23a0      	movs	r3, #160	@ 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	21c0      	movs	r1, #192	@ 0xc0
 8000d8a:	438a      	bics	r2, r1
 8000d8c:	605a      	str	r2, [r3, #4]
    GPIOA->PUPDR  &= ~((0x3UL << (6U * 2)) | (0x3UL << (7U * 2))); // Sin pull
 8000d8e:	23a0      	movs	r3, #160	@ 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	23a0      	movs	r3, #160	@ 0xa0
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	4926      	ldr	r1, [pc, #152]	@ (8000e34 <USER_GPIO_Init+0xdc>)
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	60da      	str	r2, [r3, #12]

    // Encender PA6 y PA7
    GPIOA->ODR |= (1UL << 6U) | (1UL << 7U);
 8000d9e:	23a0      	movs	r3, #160	@ 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	23a0      	movs	r3, #160	@ 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	21c0      	movs	r1, #192	@ 0xc0
 8000daa:	430a      	orrs	r2, r1
 8000dac:	615a      	str	r2, [r3, #20]

    // Configurar PB0, PB1 y PB2 como salida
    GPIOB->MODER &= ~((0x3UL << (0U * 2)) | (0x3UL << (1U * 2)) | (0x3UL << (2U * 2))); // Limpiar
 8000dae:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000db4:	213f      	movs	r1, #63	@ 0x3f
 8000db6:	438a      	bics	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  ((0x1UL << (0U * 2)) | (0x1UL << (1U * 2)) | (0x1UL << (2U * 2))); // Salida
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000dc0:	2115      	movs	r1, #21
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIOB->OTYPER &= ~((0x1UL << 0U) | (0x1UL << 1U) | (0x1UL << 2U));                 // Push-pull
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000dcc:	2107      	movs	r1, #7
 8000dce:	438a      	bics	r2, r1
 8000dd0:	605a      	str	r2, [r3, #4]
    GPIOB->PUPDR  &= ~((0x3UL << (0U * 2)) | (0x3UL << (1U * 2)) | (0x3UL << (2U * 2))); // Sin pull
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000dd8:	213f      	movs	r1, #63	@ 0x3f
 8000dda:	438a      	bics	r2, r1
 8000ddc:	60da      	str	r2, [r3, #12]

    // Encender PB0, PB1 y PB2
    GPIOB->ODR |= (1UL << 0U) | (1UL << 1U) | (1UL << 2U);
 8000dde:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <USER_GPIO_Init+0xe0>)
 8000de4:	2107      	movs	r1, #7
 8000de6:	430a      	orrs	r2, r1
 8000de8:	615a      	str	r2, [r3, #20]

    // Configurar PA8 como entrada con pull-down
    GPIOA->MODER &= ~(0x3UL << 16U); // PA8 como entrada
 8000dea:	23a0      	movs	r3, #160	@ 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	23a0      	movs	r3, #160	@ 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	4911      	ldr	r1, [pc, #68]	@ (8000e3c <USER_GPIO_Init+0xe4>)
 8000df6:	400a      	ands	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR &= ~(0x3UL << 16U); // Limpiar pull
 8000dfa:	23a0      	movs	r3, #160	@ 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	23a0      	movs	r3, #160	@ 0xa0
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	490d      	ldr	r1, [pc, #52]	@ (8000e3c <USER_GPIO_Init+0xe4>)
 8000e06:	400a      	ands	r2, r1
 8000e08:	60da      	str	r2, [r3, #12]
    GPIOA->PUPDR |=  (0x2UL << 16U); // Pull-down
 8000e0a:	23a0      	movs	r3, #160	@ 0xa0
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	23a0      	movs	r3, #160	@ 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	2180      	movs	r1, #128	@ 0x80
 8000e16:	0289      	lsls	r1, r1, #10
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	60da      	str	r2, [r3, #12]


	GPIOA->MODER |= (0x3UL << 0U); // PA0 as analogic
 8000e1c:	23a0      	movs	r3, #160	@ 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	2103      	movs	r1, #3
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	ffff0fff 	.word	0xffff0fff
 8000e38:	50000400 	.word	0x50000400
 8000e3c:	fffcffff 	.word	0xfffcffff

08000e40 <Update_LEDs>:

void Update_LEDs(uint16_t adc_val){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0002      	movs	r2, r0
 8000e48:	1dbb      	adds	r3, r7, #6
 8000e4a:	801a      	strh	r2, [r3, #0]
    // Limpiar todos los LEDs
    GPIOA->ODR &= ~((1UL << 6U) | (1UL << 7U));              // PA6 y PA7
 8000e4c:	23a0      	movs	r3, #160	@ 0xa0
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	23a0      	movs	r3, #160	@ 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	21c0      	movs	r1, #192	@ 0xc0
 8000e58:	438a      	bics	r2, r1
 8000e5a:	615a      	str	r2, [r3, #20]
    GPIOB->ODR &= ~((1UL << 0U) | (1UL << 1U) | (1UL << 2U)); // PB0, PB1, PB2
 8000e5c:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <Update_LEDs+0xac>)
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <Update_LEDs+0xac>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	438a      	bics	r2, r1
 8000e66:	615a      	str	r2, [r3, #20]

    if (adc_val > 683)  GPIOB->ODR |= (1UL << 0U); // LED 1
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	881a      	ldrh	r2, [r3, #0]
 8000e6c:	23ab      	movs	r3, #171	@ 0xab
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d305      	bcc.n	8000e80 <Update_LEDs+0x40>
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <Update_LEDs+0xac>)
 8000e76:	695a      	ldr	r2, [r3, #20]
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <Update_LEDs+0xac>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	615a      	str	r2, [r3, #20]
    if (adc_val > 1365) GPIOB->ODR |= (1UL << 1U); // LED 2
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef0 <Update_LEDs+0xb0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d905      	bls.n	8000e96 <Update_LEDs+0x56>
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <Update_LEDs+0xac>)
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <Update_LEDs+0xac>)
 8000e90:	2102      	movs	r1, #2
 8000e92:	430a      	orrs	r2, r1
 8000e94:	615a      	str	r2, [r3, #20]
    if (adc_val > 2048) GPIOB->ODR |= (1UL << 2U); // LED 3
 8000e96:	1dbb      	adds	r3, r7, #6
 8000e98:	881a      	ldrh	r2, [r3, #0]
 8000e9a:	2380      	movs	r3, #128	@ 0x80
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d905      	bls.n	8000eae <Update_LEDs+0x6e>
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <Update_LEDs+0xac>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <Update_LEDs+0xac>)
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	615a      	str	r2, [r3, #20]
    if (adc_val > 2730) GPIOA->ODR |= (1UL << 6U); // LED 4
 8000eae:	1dbb      	adds	r3, r7, #6
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ef4 <Update_LEDs+0xb4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d907      	bls.n	8000ec8 <Update_LEDs+0x88>
 8000eb8:	23a0      	movs	r3, #160	@ 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	23a0      	movs	r3, #160	@ 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	2140      	movs	r1, #64	@ 0x40
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	615a      	str	r2, [r3, #20]
    if (adc_val > 3412) GPIOA->ODR |= (1UL << 7U); // LED 5
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <Update_LEDs+0xb8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d907      	bls.n	8000ee2 <Update_LEDs+0xa2>
 8000ed2:	23a0      	movs	r3, #160	@ 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	23a0      	movs	r3, #160	@ 0xa0
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	615a      	str	r2, [r3, #20]
}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	50000400 	.word	0x50000400
 8000ef0:	00000555 	.word	0x00000555
 8000ef4:	00000aaa 	.word	0x00000aaa
 8000ef8:	00000d54 	.word	0x00000d54

08000efc <_sbrk>:
#include <stdint.h>

static uint8_t *__sbrk_heap_end = NULL;

void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;
  extern uint8_t _estack;
  extern uint32_t _Min_Stack_Size;
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	18d3      	adds	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f000 f988 	bl	8001240 <__errno>
 8000f30:	0003      	movs	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	425b      	negs	r3, r3
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	18d2      	adds	r2, r2, r3
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <_sbrk+0x64>)
 8000f4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b006      	add	sp, #24
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20003000 	.word	0x20003000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000006c 	.word	0x2000006c
 8000f64:	200001b8 	.word	0x200001b8

08000f68 <USER_SysTick_Init>:
#include <stdint.h>
#include "main.h"
#include "systicklib.h"

void USER_SysTick_Init( void ){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  Systick->RVR  = 48000 - 1;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <USER_SysTick_Init+0x24>)
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <USER_SysTick_Init+0x28>)
 8000f70:	605a      	str	r2, [r3, #4]
  Systick->CVR  = 0;           
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <USER_SysTick_Init+0x24>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  Systick->CSR |=  ( 0x1UL <<  2U );
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <USER_SysTick_Init+0x24>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <USER_SysTick_Init+0x24>)
 8000f7e:	2104      	movs	r1, #4
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	e000e010 	.word	0xe000e010
 8000f90:	0000bb7f 	.word	0x0000bb7f

08000f94 <SysTick_Delay>:

void SysTick_Delay( uint32_t time ) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  Systick->CSR |=  ( 0x1UL <<  0U );
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <SysTick_Delay+0x4c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <SysTick_Delay+0x4c>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
  for(uint32_t i = 0; i < time; i++){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e009      	b.n	8000fc2 <SysTick_Delay+0x2e>
    while(!( Systick->CSR & ( 0x1UL << 16U )));
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <SysTick_Delay+0x4c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	025b      	lsls	r3, r3, #9
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d0f9      	beq.n	8000fb0 <SysTick_Delay+0x1c>
  for(uint32_t i = 0; i < time; i++){
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d3f1      	bcc.n	8000fae <SysTick_Delay+0x1a>
  }
  Systick->CSR &= ~( 0x1UL <<  0U );
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SysTick_Delay+0x4c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <SysTick_Delay+0x4c>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	438a      	bics	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b004      	add	sp, #16
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <USER_UART1_Init>:

// Prototype for function to receive a byte via UART1
uint8_t USER_UART1_Receive_8bit(void);

// Initializes UART1 peripheral and associated pins
void USER_UART1_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	RCC->IOPENR = RCC->IOPENR | (0x1UL << 0U);
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800111c <USER_UART1_Init+0x138>)
 8000fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fec:	4b4b      	ldr	r3, [pc, #300]	@ (800111c <USER_UART1_Init+0x138>)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	635a      	str	r2, [r3, #52]	@ 0x34
	// Enable clock for USART1
	RCC->APBENR2 = RCC->APBENR2 | (0x1UL << 14U);
 8000ff4:	4b49      	ldr	r3, [pc, #292]	@ (800111c <USER_UART1_Init+0x138>)
 8000ff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ff8:	4b48      	ldr	r3, [pc, #288]	@ (800111c <USER_UART1_Init+0x138>)
 8000ffa:	2180      	movs	r1, #128	@ 0x80
 8000ffc:	01c9      	lsls	r1, r1, #7
 8000ffe:	430a      	orrs	r2, r1
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40

	// Configure PA9 (TX) as alternate function AF1, no pull-up/pull-down, push-pull, alternate mode
	GPIOA->AFRH = GPIOA->AFRH & ~(0xEUL << 4U);   // Clear AF bits for PA9
 8001002:	23a0      	movs	r3, #160	@ 0xa0
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001008:	23a0      	movs	r3, #160	@ 0xa0
 800100a:	05db      	lsls	r3, r3, #23
 800100c:	21e0      	movs	r1, #224	@ 0xe0
 800100e:	438a      	bics	r2, r1
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFRH = GPIOA->AFRH | (0x1UL << 4U);    // Select AF1 for PA9
 8001012:	23a0      	movs	r3, #160	@ 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001018:	23a0      	movs	r3, #160	@ 0xa0
 800101a:	05db      	lsls	r3, r3, #23
 800101c:	2110      	movs	r1, #16
 800101e:	430a      	orrs	r2, r1
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 18U);// No pull-up/pull-down on PA9
 8001022:	23a0      	movs	r3, #160	@ 0xa0
 8001024:	05db      	lsls	r3, r3, #23
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	23a0      	movs	r3, #160	@ 0xa0
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	493c      	ldr	r1, [pc, #240]	@ (8001120 <USER_UART1_Init+0x13c>)
 800102e:	400a      	ands	r2, r1
 8001030:	60da      	str	r2, [r3, #12]
	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 9U);// Push-pull on PA9
 8001032:	23a0      	movs	r3, #160	@ 0xa0
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	23a0      	movs	r3, #160	@ 0xa0
 800103a:	05db      	lsls	r3, r3, #23
 800103c:	4939      	ldr	r1, [pc, #228]	@ (8001124 <USER_UART1_Init+0x140>)
 800103e:	400a      	ands	r2, r1
 8001040:	605a      	str	r2, [r3, #4]
	GPIOA->MODER = GPIOA->MODER & ~(0x1UL << 18U);// Clear mode for PA9
 8001042:	23a0      	movs	r3, #160	@ 0xa0
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	23a0      	movs	r3, #160	@ 0xa0
 800104a:	05db      	lsls	r3, r3, #23
 800104c:	4936      	ldr	r1, [pc, #216]	@ (8001128 <USER_UART1_Init+0x144>)
 800104e:	400a      	ands	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
	GPIOA->MODER = GPIOA->MODER | (0x2UL << 18U); // Alternate mode for PA9
 8001052:	23a0      	movs	r3, #160	@ 0xa0
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	23a0      	movs	r3, #160	@ 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	0309      	lsls	r1, r1, #12
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

	// Configure PA10 (RX) as alternate function AF1, no pull-up/pull-down, push-pull, alternate mode
	GPIOA->AFRH = GPIOA->AFRH & ~(0xEUL << 8U);   // Clear AF bits for PA10
 8001064:	23a0      	movs	r3, #160	@ 0xa0
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800106a:	23a0      	movs	r3, #160	@ 0xa0
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	492f      	ldr	r1, [pc, #188]	@ (800112c <USER_UART1_Init+0x148>)
 8001070:	400a      	ands	r2, r1
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFRH = GPIOA->AFRH | (0x1UL << 8U);    // Select AF1 for PA10
 8001074:	23a0      	movs	r3, #160	@ 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800107a:	23a0      	movs	r3, #160	@ 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	2180      	movs	r1, #128	@ 0x80
 8001080:	0049      	lsls	r1, r1, #1
 8001082:	430a      	orrs	r2, r1
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 20U);// No pull-up/pull-down on PA10
 8001086:	23a0      	movs	r3, #160	@ 0xa0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	23a0      	movs	r3, #160	@ 0xa0
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	4927      	ldr	r1, [pc, #156]	@ (8001130 <USER_UART1_Init+0x14c>)
 8001092:	400a      	ands	r2, r1
 8001094:	60da      	str	r2, [r3, #12]
	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 10U);// Push-pull on PA10
 8001096:	23a0      	movs	r3, #160	@ 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	23a0      	movs	r3, #160	@ 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	4924      	ldr	r1, [pc, #144]	@ (8001134 <USER_UART1_Init+0x150>)
 80010a2:	400a      	ands	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]
	GPIOA->MODER = GPIOA->MODER & ~(0x1UL << 20U);// Clear mode for PA10
 80010a6:	23a0      	movs	r3, #160	@ 0xa0
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	23a0      	movs	r3, #160	@ 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	4921      	ldr	r1, [pc, #132]	@ (8001138 <USER_UART1_Init+0x154>)
 80010b2:	400a      	ands	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER = GPIOA->MODER | (0x2UL << 20U); // Alternate mode for PA10
 80010b6:	23a0      	movs	r3, #160	@ 0xa0
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	23a0      	movs	r3, #160	@ 0xa0
 80010be:	05db      	lsls	r3, r3, #23
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	0389      	lsls	r1, r1, #14
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

	// USART1 configuration
	USART1->CR1 = USART1->CR1 & ~(0x1UL << 28U);  // Disable LIN mode
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <USER_UART1_Init+0x158>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <USER_UART1_Init+0x158>)
 80010ce:	491c      	ldr	r1, [pc, #112]	@ (8001140 <USER_UART1_Init+0x15c>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
	USART1->CR1 = USART1->CR1 & ~(0x1UL << 12U);  // 8 data bits
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <USER_UART1_Init+0x158>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <USER_UART1_Init+0x158>)
 80010da:	491a      	ldr	r1, [pc, #104]	@ (8001144 <USER_UART1_Init+0x160>)
 80010dc:	400a      	ands	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
	USART1->BRR = 5000;                            // Baudrate (example: 115200 @ 48MHz)
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <USER_UART1_Init+0x158>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <USER_UART1_Init+0x164>)
 80010e4:	60da      	str	r2, [r3, #12]
	USART1->CR2 = USART1->CR2 & ~(0x3UL << 12U);  // 1 stop bit
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <USER_UART1_Init+0x158>)
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <USER_UART1_Init+0x158>)
 80010ec:	4917      	ldr	r1, [pc, #92]	@ (800114c <USER_UART1_Init+0x168>)
 80010ee:	400a      	ands	r2, r1
 80010f0:	605a      	str	r2, [r3, #4]
	USART1->CR1 = USART1->CR1 | (0x1UL << 0U);    // Enable USART1
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <USER_UART1_Init+0x158>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <USER_UART1_Init+0x158>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
	USART1->CR1 = USART1->CR1 | (0x1UL << 3U);    // Enable transmission
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <USER_UART1_Init+0x158>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <USER_UART1_Init+0x158>)
 8001104:	2108      	movs	r1, #8
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
	USART1->CR1 = USART1->CR1 | (0x1UL << 2U);    // Enable reception
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <USER_UART1_Init+0x158>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <USER_UART1_Init+0x158>)
 8001110:	2104      	movs	r1, #4
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	fff3ffff 	.word	0xfff3ffff
 8001124:	fffffdff 	.word	0xfffffdff
 8001128:	fffbffff 	.word	0xfffbffff
 800112c:	fffff1ff 	.word	0xfffff1ff
 8001130:	ffcfffff 	.word	0xffcfffff
 8001134:	fffffbff 	.word	0xfffffbff
 8001138:	ffefffff 	.word	0xffefffff
 800113c:	40013800 	.word	0x40013800
 8001140:	efffffff 	.word	0xefffffff
 8001144:	ffffefff 	.word	0xffffefff
 8001148:	00001388 	.word	0x00001388
 800114c:	ffffcfff 	.word	0xffffcfff

08001150 <USER_USART1_Send_8bit>:

// Sends a byte via USART1
void USER_USART1_Send_8bit(uint8_t Data) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	0002      	movs	r2, r0
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	701a      	strb	r2, [r3, #0]
	while (!(USART1->ISR & (0x1UL << 7U))); // Wait until transmit register is empty
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <USER_USART1_Send_8bit+0x28>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	4013      	ands	r3, r2
 8001166:	d0fa      	beq.n	800115e <USER_USART1_Send_8bit+0xe>
	USART1->TDR = Data;                     // Write data to transmit
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <USER_USART1_Send_8bit+0x28>)
 800116a:	1dfa      	adds	r2, r7, #7
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40013800 	.word	0x40013800

0800117c <USER_USART1_Send_String>:
		return '0';                             // If no data, return '0'
	}
}


void USER_USART1_Send_String(const char *str) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001184:	e006      	b.n	8001194 <USER_USART1_Send_String+0x18>
        USER_USART1_Send_8bit(*str++); // Envía cada carácter
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff ffde 	bl	8001150 <USER_USART1_Send_8bit>
    while (*str) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f4      	bne.n	8001186 <USER_USART1_Send_String+0xa>
    }
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a8:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ac:	e000      	b.n	80011b0 <Reset_Handler+0x8>
 80011ae:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopForever+0xe>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopForever+0x16>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011d6:	f000 f839 	bl	800124c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fcd5 	bl	8000b88 <main>

080011de <LoopForever>:

LoopForever:
  b LoopForever
 80011de:	e7fe      	b.n	80011de <LoopForever>
  ldr   r0, =_estack
 80011e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80011ec:	08001be0 	.word	0x08001be0
  ldr r2, =_sbss
 80011f0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80011f4:	200001b8 	.word	0x200001b8

080011f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>
	...

080011fc <siprintf>:
 80011fc:	b40e      	push	{r1, r2, r3}
 80011fe:	b510      	push	{r4, lr}
 8001200:	2400      	movs	r4, #0
 8001202:	490c      	ldr	r1, [pc, #48]	@ (8001234 <siprintf+0x38>)
 8001204:	b09d      	sub	sp, #116	@ 0x74
 8001206:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001208:	9002      	str	r0, [sp, #8]
 800120a:	9006      	str	r0, [sp, #24]
 800120c:	9107      	str	r1, [sp, #28]
 800120e:	9104      	str	r1, [sp, #16]
 8001210:	4809      	ldr	r0, [pc, #36]	@ (8001238 <siprintf+0x3c>)
 8001212:	490a      	ldr	r1, [pc, #40]	@ (800123c <siprintf+0x40>)
 8001214:	cb04      	ldmia	r3!, {r2}
 8001216:	9105      	str	r1, [sp, #20]
 8001218:	6800      	ldr	r0, [r0, #0]
 800121a:	a902      	add	r1, sp, #8
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001220:	f000 f996 	bl	8001550 <_svfiprintf_r>
 8001224:	9b02      	ldr	r3, [sp, #8]
 8001226:	701c      	strb	r4, [r3, #0]
 8001228:	b01d      	add	sp, #116	@ 0x74
 800122a:	bc10      	pop	{r4}
 800122c:	bc08      	pop	{r3}
 800122e:	b003      	add	sp, #12
 8001230:	4718      	bx	r3
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	7fffffff 	.word	0x7fffffff
 8001238:	20000000 	.word	0x20000000
 800123c:	ffff0208 	.word	0xffff0208

08001240 <__errno>:
 8001240:	4b01      	ldr	r3, [pc, #4]	@ (8001248 <__errno+0x8>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	4770      	bx	lr
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	20000000 	.word	0x20000000

0800124c <__libc_init_array>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	2600      	movs	r6, #0
 8001250:	4c0c      	ldr	r4, [pc, #48]	@ (8001284 <__libc_init_array+0x38>)
 8001252:	4d0d      	ldr	r5, [pc, #52]	@ (8001288 <__libc_init_array+0x3c>)
 8001254:	1b64      	subs	r4, r4, r5
 8001256:	10a4      	asrs	r4, r4, #2
 8001258:	42a6      	cmp	r6, r4
 800125a:	d109      	bne.n	8001270 <__libc_init_array+0x24>
 800125c:	2600      	movs	r6, #0
 800125e:	f000 fc61 	bl	8001b24 <_init>
 8001262:	4c0a      	ldr	r4, [pc, #40]	@ (800128c <__libc_init_array+0x40>)
 8001264:	4d0a      	ldr	r5, [pc, #40]	@ (8001290 <__libc_init_array+0x44>)
 8001266:	1b64      	subs	r4, r4, r5
 8001268:	10a4      	asrs	r4, r4, #2
 800126a:	42a6      	cmp	r6, r4
 800126c:	d105      	bne.n	800127a <__libc_init_array+0x2e>
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	00b3      	lsls	r3, r6, #2
 8001272:	58eb      	ldr	r3, [r5, r3]
 8001274:	4798      	blx	r3
 8001276:	3601      	adds	r6, #1
 8001278:	e7ee      	b.n	8001258 <__libc_init_array+0xc>
 800127a:	00b3      	lsls	r3, r6, #2
 800127c:	58eb      	ldr	r3, [r5, r3]
 800127e:	4798      	blx	r3
 8001280:	3601      	adds	r6, #1
 8001282:	e7f2      	b.n	800126a <__libc_init_array+0x1e>
 8001284:	08001bd8 	.word	0x08001bd8
 8001288:	08001bd8 	.word	0x08001bd8
 800128c:	08001bdc 	.word	0x08001bdc
 8001290:	08001bd8 	.word	0x08001bd8

08001294 <__retarget_lock_acquire_recursive>:
 8001294:	4770      	bx	lr

08001296 <__retarget_lock_release_recursive>:
 8001296:	4770      	bx	lr

08001298 <_free_r>:
 8001298:	b570      	push	{r4, r5, r6, lr}
 800129a:	0005      	movs	r5, r0
 800129c:	1e0c      	subs	r4, r1, #0
 800129e:	d010      	beq.n	80012c2 <_free_r+0x2a>
 80012a0:	3c04      	subs	r4, #4
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da00      	bge.n	80012aa <_free_r+0x12>
 80012a8:	18e4      	adds	r4, r4, r3
 80012aa:	0028      	movs	r0, r5
 80012ac:	f000 f8e0 	bl	8001470 <__malloc_lock>
 80012b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <_free_r+0x90>)
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <_free_r+0x2c>
 80012b8:	6063      	str	r3, [r4, #4]
 80012ba:	6014      	str	r4, [r2, #0]
 80012bc:	0028      	movs	r0, r5
 80012be:	f000 f8df 	bl	8001480 <__malloc_unlock>
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
 80012c4:	42a3      	cmp	r3, r4
 80012c6:	d908      	bls.n	80012da <_free_r+0x42>
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	1821      	adds	r1, r4, r0
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d1f3      	bne.n	80012b8 <_free_r+0x20>
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	1809      	adds	r1, r1, r0
 80012d6:	6021      	str	r1, [r4, #0]
 80012d8:	e7ee      	b.n	80012b8 <_free_r+0x20>
 80012da:	001a      	movs	r2, r3
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <_free_r+0x4e>
 80012e2:	42a3      	cmp	r3, r4
 80012e4:	d9f9      	bls.n	80012da <_free_r+0x42>
 80012e6:	6811      	ldr	r1, [r2, #0]
 80012e8:	1850      	adds	r0, r2, r1
 80012ea:	42a0      	cmp	r0, r4
 80012ec:	d10b      	bne.n	8001306 <_free_r+0x6e>
 80012ee:	6820      	ldr	r0, [r4, #0]
 80012f0:	1809      	adds	r1, r1, r0
 80012f2:	1850      	adds	r0, r2, r1
 80012f4:	6011      	str	r1, [r2, #0]
 80012f6:	4283      	cmp	r3, r0
 80012f8:	d1e0      	bne.n	80012bc <_free_r+0x24>
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	1841      	adds	r1, r0, r1
 8001300:	6011      	str	r1, [r2, #0]
 8001302:	6053      	str	r3, [r2, #4]
 8001304:	e7da      	b.n	80012bc <_free_r+0x24>
 8001306:	42a0      	cmp	r0, r4
 8001308:	d902      	bls.n	8001310 <_free_r+0x78>
 800130a:	230c      	movs	r3, #12
 800130c:	602b      	str	r3, [r5, #0]
 800130e:	e7d5      	b.n	80012bc <_free_r+0x24>
 8001310:	6820      	ldr	r0, [r4, #0]
 8001312:	1821      	adds	r1, r4, r0
 8001314:	428b      	cmp	r3, r1
 8001316:	d103      	bne.n	8001320 <_free_r+0x88>
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	1809      	adds	r1, r1, r0
 800131e:	6021      	str	r1, [r4, #0]
 8001320:	6063      	str	r3, [r4, #4]
 8001322:	6054      	str	r4, [r2, #4]
 8001324:	e7ca      	b.n	80012bc <_free_r+0x24>
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	200001b4 	.word	0x200001b4

0800132c <sbrk_aligned>:
 800132c:	b570      	push	{r4, r5, r6, lr}
 800132e:	4e0f      	ldr	r6, [pc, #60]	@ (800136c <sbrk_aligned+0x40>)
 8001330:	000d      	movs	r5, r1
 8001332:	6831      	ldr	r1, [r6, #0]
 8001334:	0004      	movs	r4, r0
 8001336:	2900      	cmp	r1, #0
 8001338:	d102      	bne.n	8001340 <sbrk_aligned+0x14>
 800133a:	f000 fb95 	bl	8001a68 <_sbrk_r>
 800133e:	6030      	str	r0, [r6, #0]
 8001340:	0029      	movs	r1, r5
 8001342:	0020      	movs	r0, r4
 8001344:	f000 fb90 	bl	8001a68 <_sbrk_r>
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	d103      	bne.n	8001354 <sbrk_aligned+0x28>
 800134c:	2501      	movs	r5, #1
 800134e:	426d      	negs	r5, r5
 8001350:	0028      	movs	r0, r5
 8001352:	bd70      	pop	{r4, r5, r6, pc}
 8001354:	2303      	movs	r3, #3
 8001356:	1cc5      	adds	r5, r0, #3
 8001358:	439d      	bics	r5, r3
 800135a:	42a8      	cmp	r0, r5
 800135c:	d0f8      	beq.n	8001350 <sbrk_aligned+0x24>
 800135e:	1a29      	subs	r1, r5, r0
 8001360:	0020      	movs	r0, r4
 8001362:	f000 fb81 	bl	8001a68 <_sbrk_r>
 8001366:	3001      	adds	r0, #1
 8001368:	d1f2      	bne.n	8001350 <sbrk_aligned+0x24>
 800136a:	e7ef      	b.n	800134c <sbrk_aligned+0x20>
 800136c:	200001b0 	.word	0x200001b0

08001370 <_malloc_r>:
 8001370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001372:	2203      	movs	r2, #3
 8001374:	1ccb      	adds	r3, r1, #3
 8001376:	4393      	bics	r3, r2
 8001378:	3308      	adds	r3, #8
 800137a:	0005      	movs	r5, r0
 800137c:	001f      	movs	r7, r3
 800137e:	2b0c      	cmp	r3, #12
 8001380:	d234      	bcs.n	80013ec <_malloc_r+0x7c>
 8001382:	270c      	movs	r7, #12
 8001384:	42b9      	cmp	r1, r7
 8001386:	d833      	bhi.n	80013f0 <_malloc_r+0x80>
 8001388:	0028      	movs	r0, r5
 800138a:	f000 f871 	bl	8001470 <__malloc_lock>
 800138e:	4e37      	ldr	r6, [pc, #220]	@ (800146c <_malloc_r+0xfc>)
 8001390:	6833      	ldr	r3, [r6, #0]
 8001392:	001c      	movs	r4, r3
 8001394:	2c00      	cmp	r4, #0
 8001396:	d12f      	bne.n	80013f8 <_malloc_r+0x88>
 8001398:	0039      	movs	r1, r7
 800139a:	0028      	movs	r0, r5
 800139c:	f7ff ffc6 	bl	800132c <sbrk_aligned>
 80013a0:	0004      	movs	r4, r0
 80013a2:	1c43      	adds	r3, r0, #1
 80013a4:	d15f      	bne.n	8001466 <_malloc_r+0xf6>
 80013a6:	6834      	ldr	r4, [r6, #0]
 80013a8:	9400      	str	r4, [sp, #0]
 80013aa:	9b00      	ldr	r3, [sp, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d14a      	bne.n	8001446 <_malloc_r+0xd6>
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	d052      	beq.n	800145a <_malloc_r+0xea>
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	0028      	movs	r0, r5
 80013b8:	18e3      	adds	r3, r4, r3
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	f000 fb53 	bl	8001a68 <_sbrk_r>
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	4283      	cmp	r3, r0
 80013c6:	d148      	bne.n	800145a <_malloc_r+0xea>
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	0028      	movs	r0, r5
 80013cc:	1aff      	subs	r7, r7, r3
 80013ce:	0039      	movs	r1, r7
 80013d0:	f7ff ffac 	bl	800132c <sbrk_aligned>
 80013d4:	3001      	adds	r0, #1
 80013d6:	d040      	beq.n	800145a <_malloc_r+0xea>
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	19db      	adds	r3, r3, r7
 80013dc:	6023      	str	r3, [r4, #0]
 80013de:	6833      	ldr	r3, [r6, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	d133      	bne.n	800144e <_malloc_r+0xde>
 80013e6:	9b00      	ldr	r3, [sp, #0]
 80013e8:	6033      	str	r3, [r6, #0]
 80013ea:	e019      	b.n	8001420 <_malloc_r+0xb0>
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dac9      	bge.n	8001384 <_malloc_r+0x14>
 80013f0:	230c      	movs	r3, #12
 80013f2:	602b      	str	r3, [r5, #0]
 80013f4:	2000      	movs	r0, #0
 80013f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80013f8:	6821      	ldr	r1, [r4, #0]
 80013fa:	1bc9      	subs	r1, r1, r7
 80013fc:	d420      	bmi.n	8001440 <_malloc_r+0xd0>
 80013fe:	290b      	cmp	r1, #11
 8001400:	d90a      	bls.n	8001418 <_malloc_r+0xa8>
 8001402:	19e2      	adds	r2, r4, r7
 8001404:	6027      	str	r7, [r4, #0]
 8001406:	42a3      	cmp	r3, r4
 8001408:	d104      	bne.n	8001414 <_malloc_r+0xa4>
 800140a:	6032      	str	r2, [r6, #0]
 800140c:	6863      	ldr	r3, [r4, #4]
 800140e:	6011      	str	r1, [r2, #0]
 8001410:	6053      	str	r3, [r2, #4]
 8001412:	e005      	b.n	8001420 <_malloc_r+0xb0>
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e7f9      	b.n	800140c <_malloc_r+0x9c>
 8001418:	6862      	ldr	r2, [r4, #4]
 800141a:	42a3      	cmp	r3, r4
 800141c:	d10e      	bne.n	800143c <_malloc_r+0xcc>
 800141e:	6032      	str	r2, [r6, #0]
 8001420:	0028      	movs	r0, r5
 8001422:	f000 f82d 	bl	8001480 <__malloc_unlock>
 8001426:	0020      	movs	r0, r4
 8001428:	2207      	movs	r2, #7
 800142a:	300b      	adds	r0, #11
 800142c:	1d23      	adds	r3, r4, #4
 800142e:	4390      	bics	r0, r2
 8001430:	1ac2      	subs	r2, r0, r3
 8001432:	4298      	cmp	r0, r3
 8001434:	d0df      	beq.n	80013f6 <_malloc_r+0x86>
 8001436:	1a1b      	subs	r3, r3, r0
 8001438:	50a3      	str	r3, [r4, r2]
 800143a:	e7dc      	b.n	80013f6 <_malloc_r+0x86>
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e7ef      	b.n	8001420 <_malloc_r+0xb0>
 8001440:	0023      	movs	r3, r4
 8001442:	6864      	ldr	r4, [r4, #4]
 8001444:	e7a6      	b.n	8001394 <_malloc_r+0x24>
 8001446:	9c00      	ldr	r4, [sp, #0]
 8001448:	6863      	ldr	r3, [r4, #4]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	e7ad      	b.n	80013aa <_malloc_r+0x3a>
 800144e:	001a      	movs	r2, r3
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	42a3      	cmp	r3, r4
 8001454:	d1fb      	bne.n	800144e <_malloc_r+0xde>
 8001456:	2300      	movs	r3, #0
 8001458:	e7da      	b.n	8001410 <_malloc_r+0xa0>
 800145a:	230c      	movs	r3, #12
 800145c:	0028      	movs	r0, r5
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	f000 f80e 	bl	8001480 <__malloc_unlock>
 8001464:	e7c6      	b.n	80013f4 <_malloc_r+0x84>
 8001466:	6007      	str	r7, [r0, #0]
 8001468:	e7da      	b.n	8001420 <_malloc_r+0xb0>
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	200001b4 	.word	0x200001b4

08001470 <__malloc_lock>:
 8001470:	b510      	push	{r4, lr}
 8001472:	4802      	ldr	r0, [pc, #8]	@ (800147c <__malloc_lock+0xc>)
 8001474:	f7ff ff0e 	bl	8001294 <__retarget_lock_acquire_recursive>
 8001478:	bd10      	pop	{r4, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	200001ac 	.word	0x200001ac

08001480 <__malloc_unlock>:
 8001480:	b510      	push	{r4, lr}
 8001482:	4802      	ldr	r0, [pc, #8]	@ (800148c <__malloc_unlock+0xc>)
 8001484:	f7ff ff07 	bl	8001296 <__retarget_lock_release_recursive>
 8001488:	bd10      	pop	{r4, pc}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	200001ac 	.word	0x200001ac

08001490 <__ssputs_r>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	688e      	ldr	r6, [r1, #8]
 8001494:	b085      	sub	sp, #20
 8001496:	001f      	movs	r7, r3
 8001498:	000c      	movs	r4, r1
 800149a:	680b      	ldr	r3, [r1, #0]
 800149c:	9002      	str	r0, [sp, #8]
 800149e:	9203      	str	r2, [sp, #12]
 80014a0:	42be      	cmp	r6, r7
 80014a2:	d830      	bhi.n	8001506 <__ssputs_r+0x76>
 80014a4:	210c      	movs	r1, #12
 80014a6:	5e62      	ldrsh	r2, [r4, r1]
 80014a8:	2190      	movs	r1, #144	@ 0x90
 80014aa:	00c9      	lsls	r1, r1, #3
 80014ac:	420a      	tst	r2, r1
 80014ae:	d028      	beq.n	8001502 <__ssputs_r+0x72>
 80014b0:	2003      	movs	r0, #3
 80014b2:	6921      	ldr	r1, [r4, #16]
 80014b4:	1a5b      	subs	r3, r3, r1
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	6963      	ldr	r3, [r4, #20]
 80014ba:	4343      	muls	r3, r0
 80014bc:	9801      	ldr	r0, [sp, #4]
 80014be:	0fdd      	lsrs	r5, r3, #31
 80014c0:	18ed      	adds	r5, r5, r3
 80014c2:	1c7b      	adds	r3, r7, #1
 80014c4:	181b      	adds	r3, r3, r0
 80014c6:	106d      	asrs	r5, r5, #1
 80014c8:	42ab      	cmp	r3, r5
 80014ca:	d900      	bls.n	80014ce <__ssputs_r+0x3e>
 80014cc:	001d      	movs	r5, r3
 80014ce:	0552      	lsls	r2, r2, #21
 80014d0:	d528      	bpl.n	8001524 <__ssputs_r+0x94>
 80014d2:	0029      	movs	r1, r5
 80014d4:	9802      	ldr	r0, [sp, #8]
 80014d6:	f7ff ff4b 	bl	8001370 <_malloc_r>
 80014da:	1e06      	subs	r6, r0, #0
 80014dc:	d02c      	beq.n	8001538 <__ssputs_r+0xa8>
 80014de:	9a01      	ldr	r2, [sp, #4]
 80014e0:	6921      	ldr	r1, [r4, #16]
 80014e2:	f000 fade 	bl	8001aa2 <memcpy>
 80014e6:	89a2      	ldrh	r2, [r4, #12]
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <__ssputs_r+0xbc>)
 80014ea:	401a      	ands	r2, r3
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	4313      	orrs	r3, r2
 80014f0:	81a3      	strh	r3, [r4, #12]
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	6126      	str	r6, [r4, #16]
 80014f6:	18f6      	adds	r6, r6, r3
 80014f8:	6026      	str	r6, [r4, #0]
 80014fa:	003e      	movs	r6, r7
 80014fc:	6165      	str	r5, [r4, #20]
 80014fe:	1aed      	subs	r5, r5, r3
 8001500:	60a5      	str	r5, [r4, #8]
 8001502:	42be      	cmp	r6, r7
 8001504:	d900      	bls.n	8001508 <__ssputs_r+0x78>
 8001506:	003e      	movs	r6, r7
 8001508:	0032      	movs	r2, r6
 800150a:	9903      	ldr	r1, [sp, #12]
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	f000 fa99 	bl	8001a44 <memmove>
 8001512:	2000      	movs	r0, #0
 8001514:	68a3      	ldr	r3, [r4, #8]
 8001516:	1b9b      	subs	r3, r3, r6
 8001518:	60a3      	str	r3, [r4, #8]
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	199b      	adds	r3, r3, r6
 800151e:	6023      	str	r3, [r4, #0]
 8001520:	b005      	add	sp, #20
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001524:	002a      	movs	r2, r5
 8001526:	9802      	ldr	r0, [sp, #8]
 8001528:	f000 fac4 	bl	8001ab4 <_realloc_r>
 800152c:	1e06      	subs	r6, r0, #0
 800152e:	d1e0      	bne.n	80014f2 <__ssputs_r+0x62>
 8001530:	6921      	ldr	r1, [r4, #16]
 8001532:	9802      	ldr	r0, [sp, #8]
 8001534:	f7ff feb0 	bl	8001298 <_free_r>
 8001538:	230c      	movs	r3, #12
 800153a:	2001      	movs	r0, #1
 800153c:	9a02      	ldr	r2, [sp, #8]
 800153e:	4240      	negs	r0, r0
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	89a2      	ldrh	r2, [r4, #12]
 8001544:	3334      	adds	r3, #52	@ 0x34
 8001546:	4313      	orrs	r3, r2
 8001548:	81a3      	strh	r3, [r4, #12]
 800154a:	e7e9      	b.n	8001520 <__ssputs_r+0x90>
 800154c:	fffffb7f 	.word	0xfffffb7f

08001550 <_svfiprintf_r>:
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	b0a1      	sub	sp, #132	@ 0x84
 8001554:	9003      	str	r0, [sp, #12]
 8001556:	001d      	movs	r5, r3
 8001558:	898b      	ldrh	r3, [r1, #12]
 800155a:	000f      	movs	r7, r1
 800155c:	0016      	movs	r6, r2
 800155e:	061b      	lsls	r3, r3, #24
 8001560:	d511      	bpl.n	8001586 <_svfiprintf_r+0x36>
 8001562:	690b      	ldr	r3, [r1, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10e      	bne.n	8001586 <_svfiprintf_r+0x36>
 8001568:	2140      	movs	r1, #64	@ 0x40
 800156a:	f7ff ff01 	bl	8001370 <_malloc_r>
 800156e:	6038      	str	r0, [r7, #0]
 8001570:	6138      	str	r0, [r7, #16]
 8001572:	2800      	cmp	r0, #0
 8001574:	d105      	bne.n	8001582 <_svfiprintf_r+0x32>
 8001576:	230c      	movs	r3, #12
 8001578:	9a03      	ldr	r2, [sp, #12]
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	2001      	movs	r0, #1
 800157e:	4240      	negs	r0, r0
 8001580:	e0cf      	b.n	8001722 <_svfiprintf_r+0x1d2>
 8001582:	2340      	movs	r3, #64	@ 0x40
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	2300      	movs	r3, #0
 8001588:	ac08      	add	r4, sp, #32
 800158a:	6163      	str	r3, [r4, #20]
 800158c:	3320      	adds	r3, #32
 800158e:	7663      	strb	r3, [r4, #25]
 8001590:	3310      	adds	r3, #16
 8001592:	76a3      	strb	r3, [r4, #26]
 8001594:	9507      	str	r5, [sp, #28]
 8001596:	0035      	movs	r5, r6
 8001598:	782b      	ldrb	r3, [r5, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <_svfiprintf_r+0x52>
 800159e:	2b25      	cmp	r3, #37	@ 0x25
 80015a0:	d148      	bne.n	8001634 <_svfiprintf_r+0xe4>
 80015a2:	1bab      	subs	r3, r5, r6
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	42b5      	cmp	r5, r6
 80015a8:	d00b      	beq.n	80015c2 <_svfiprintf_r+0x72>
 80015aa:	0032      	movs	r2, r6
 80015ac:	0039      	movs	r1, r7
 80015ae:	9803      	ldr	r0, [sp, #12]
 80015b0:	f7ff ff6e 	bl	8001490 <__ssputs_r>
 80015b4:	3001      	adds	r0, #1
 80015b6:	d100      	bne.n	80015ba <_svfiprintf_r+0x6a>
 80015b8:	e0ae      	b.n	8001718 <_svfiprintf_r+0x1c8>
 80015ba:	6963      	ldr	r3, [r4, #20]
 80015bc:	9a05      	ldr	r2, [sp, #20]
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	6163      	str	r3, [r4, #20]
 80015c2:	782b      	ldrb	r3, [r5, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d100      	bne.n	80015ca <_svfiprintf_r+0x7a>
 80015c8:	e0a6      	b.n	8001718 <_svfiprintf_r+0x1c8>
 80015ca:	2201      	movs	r2, #1
 80015cc:	2300      	movs	r3, #0
 80015ce:	4252      	negs	r2, r2
 80015d0:	6062      	str	r2, [r4, #4]
 80015d2:	a904      	add	r1, sp, #16
 80015d4:	3254      	adds	r2, #84	@ 0x54
 80015d6:	1852      	adds	r2, r2, r1
 80015d8:	1c6e      	adds	r6, r5, #1
 80015da:	6023      	str	r3, [r4, #0]
 80015dc:	60e3      	str	r3, [r4, #12]
 80015de:	60a3      	str	r3, [r4, #8]
 80015e0:	7013      	strb	r3, [r2, #0]
 80015e2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80015e4:	4b54      	ldr	r3, [pc, #336]	@ (8001738 <_svfiprintf_r+0x1e8>)
 80015e6:	2205      	movs	r2, #5
 80015e8:	0018      	movs	r0, r3
 80015ea:	7831      	ldrb	r1, [r6, #0]
 80015ec:	9305      	str	r3, [sp, #20]
 80015ee:	f000 fa4d 	bl	8001a8c <memchr>
 80015f2:	1c75      	adds	r5, r6, #1
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d11f      	bne.n	8001638 <_svfiprintf_r+0xe8>
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	06d3      	lsls	r3, r2, #27
 80015fc:	d504      	bpl.n	8001608 <_svfiprintf_r+0xb8>
 80015fe:	2353      	movs	r3, #83	@ 0x53
 8001600:	a904      	add	r1, sp, #16
 8001602:	185b      	adds	r3, r3, r1
 8001604:	2120      	movs	r1, #32
 8001606:	7019      	strb	r1, [r3, #0]
 8001608:	0713      	lsls	r3, r2, #28
 800160a:	d504      	bpl.n	8001616 <_svfiprintf_r+0xc6>
 800160c:	2353      	movs	r3, #83	@ 0x53
 800160e:	a904      	add	r1, sp, #16
 8001610:	185b      	adds	r3, r3, r1
 8001612:	212b      	movs	r1, #43	@ 0x2b
 8001614:	7019      	strb	r1, [r3, #0]
 8001616:	7833      	ldrb	r3, [r6, #0]
 8001618:	2b2a      	cmp	r3, #42	@ 0x2a
 800161a:	d016      	beq.n	800164a <_svfiprintf_r+0xfa>
 800161c:	0035      	movs	r5, r6
 800161e:	2100      	movs	r1, #0
 8001620:	200a      	movs	r0, #10
 8001622:	68e3      	ldr	r3, [r4, #12]
 8001624:	782a      	ldrb	r2, [r5, #0]
 8001626:	1c6e      	adds	r6, r5, #1
 8001628:	3a30      	subs	r2, #48	@ 0x30
 800162a:	2a09      	cmp	r2, #9
 800162c:	d950      	bls.n	80016d0 <_svfiprintf_r+0x180>
 800162e:	2900      	cmp	r1, #0
 8001630:	d111      	bne.n	8001656 <_svfiprintf_r+0x106>
 8001632:	e017      	b.n	8001664 <_svfiprintf_r+0x114>
 8001634:	3501      	adds	r5, #1
 8001636:	e7af      	b.n	8001598 <_svfiprintf_r+0x48>
 8001638:	9b05      	ldr	r3, [sp, #20]
 800163a:	6822      	ldr	r2, [r4, #0]
 800163c:	1ac0      	subs	r0, r0, r3
 800163e:	2301      	movs	r3, #1
 8001640:	4083      	lsls	r3, r0
 8001642:	4313      	orrs	r3, r2
 8001644:	002e      	movs	r6, r5
 8001646:	6023      	str	r3, [r4, #0]
 8001648:	e7cc      	b.n	80015e4 <_svfiprintf_r+0x94>
 800164a:	9b07      	ldr	r3, [sp, #28]
 800164c:	1d19      	adds	r1, r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	9107      	str	r1, [sp, #28]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db01      	blt.n	800165a <_svfiprintf_r+0x10a>
 8001656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001658:	e004      	b.n	8001664 <_svfiprintf_r+0x114>
 800165a:	425b      	negs	r3, r3
 800165c:	60e3      	str	r3, [r4, #12]
 800165e:	2302      	movs	r3, #2
 8001660:	4313      	orrs	r3, r2
 8001662:	6023      	str	r3, [r4, #0]
 8001664:	782b      	ldrb	r3, [r5, #0]
 8001666:	2b2e      	cmp	r3, #46	@ 0x2e
 8001668:	d10c      	bne.n	8001684 <_svfiprintf_r+0x134>
 800166a:	786b      	ldrb	r3, [r5, #1]
 800166c:	2b2a      	cmp	r3, #42	@ 0x2a
 800166e:	d134      	bne.n	80016da <_svfiprintf_r+0x18a>
 8001670:	9b07      	ldr	r3, [sp, #28]
 8001672:	3502      	adds	r5, #2
 8001674:	1d1a      	adds	r2, r3, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	9207      	str	r2, [sp, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	da01      	bge.n	8001682 <_svfiprintf_r+0x132>
 800167e:	2301      	movs	r3, #1
 8001680:	425b      	negs	r3, r3
 8001682:	9309      	str	r3, [sp, #36]	@ 0x24
 8001684:	4e2d      	ldr	r6, [pc, #180]	@ (800173c <_svfiprintf_r+0x1ec>)
 8001686:	2203      	movs	r2, #3
 8001688:	0030      	movs	r0, r6
 800168a:	7829      	ldrb	r1, [r5, #0]
 800168c:	f000 f9fe 	bl	8001a8c <memchr>
 8001690:	2800      	cmp	r0, #0
 8001692:	d006      	beq.n	80016a2 <_svfiprintf_r+0x152>
 8001694:	2340      	movs	r3, #64	@ 0x40
 8001696:	1b80      	subs	r0, r0, r6
 8001698:	4083      	lsls	r3, r0
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	3501      	adds	r5, #1
 800169e:	4313      	orrs	r3, r2
 80016a0:	6023      	str	r3, [r4, #0]
 80016a2:	7829      	ldrb	r1, [r5, #0]
 80016a4:	2206      	movs	r2, #6
 80016a6:	4826      	ldr	r0, [pc, #152]	@ (8001740 <_svfiprintf_r+0x1f0>)
 80016a8:	1c6e      	adds	r6, r5, #1
 80016aa:	7621      	strb	r1, [r4, #24]
 80016ac:	f000 f9ee 	bl	8001a8c <memchr>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d038      	beq.n	8001726 <_svfiprintf_r+0x1d6>
 80016b4:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <_svfiprintf_r+0x1f4>)
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d122      	bne.n	8001700 <_svfiprintf_r+0x1b0>
 80016ba:	2207      	movs	r2, #7
 80016bc:	9b07      	ldr	r3, [sp, #28]
 80016be:	3307      	adds	r3, #7
 80016c0:	4393      	bics	r3, r2
 80016c2:	3308      	adds	r3, #8
 80016c4:	9307      	str	r3, [sp, #28]
 80016c6:	6963      	ldr	r3, [r4, #20]
 80016c8:	9a04      	ldr	r2, [sp, #16]
 80016ca:	189b      	adds	r3, r3, r2
 80016cc:	6163      	str	r3, [r4, #20]
 80016ce:	e762      	b.n	8001596 <_svfiprintf_r+0x46>
 80016d0:	4343      	muls	r3, r0
 80016d2:	0035      	movs	r5, r6
 80016d4:	2101      	movs	r1, #1
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	e7a4      	b.n	8001624 <_svfiprintf_r+0xd4>
 80016da:	2300      	movs	r3, #0
 80016dc:	200a      	movs	r0, #10
 80016de:	0019      	movs	r1, r3
 80016e0:	3501      	adds	r5, #1
 80016e2:	6063      	str	r3, [r4, #4]
 80016e4:	782a      	ldrb	r2, [r5, #0]
 80016e6:	1c6e      	adds	r6, r5, #1
 80016e8:	3a30      	subs	r2, #48	@ 0x30
 80016ea:	2a09      	cmp	r2, #9
 80016ec:	d903      	bls.n	80016f6 <_svfiprintf_r+0x1a6>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0c8      	beq.n	8001684 <_svfiprintf_r+0x134>
 80016f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80016f4:	e7c6      	b.n	8001684 <_svfiprintf_r+0x134>
 80016f6:	4341      	muls	r1, r0
 80016f8:	0035      	movs	r5, r6
 80016fa:	2301      	movs	r3, #1
 80016fc:	1889      	adds	r1, r1, r2
 80016fe:	e7f1      	b.n	80016e4 <_svfiprintf_r+0x194>
 8001700:	aa07      	add	r2, sp, #28
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	0021      	movs	r1, r4
 8001706:	003a      	movs	r2, r7
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <_svfiprintf_r+0x1f8>)
 800170a:	9803      	ldr	r0, [sp, #12]
 800170c:	e000      	b.n	8001710 <_svfiprintf_r+0x1c0>
 800170e:	bf00      	nop
 8001710:	9004      	str	r0, [sp, #16]
 8001712:	9b04      	ldr	r3, [sp, #16]
 8001714:	3301      	adds	r3, #1
 8001716:	d1d6      	bne.n	80016c6 <_svfiprintf_r+0x176>
 8001718:	89bb      	ldrh	r3, [r7, #12]
 800171a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800171c:	065b      	lsls	r3, r3, #25
 800171e:	d500      	bpl.n	8001722 <_svfiprintf_r+0x1d2>
 8001720:	e72c      	b.n	800157c <_svfiprintf_r+0x2c>
 8001722:	b021      	add	sp, #132	@ 0x84
 8001724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001726:	aa07      	add	r2, sp, #28
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	0021      	movs	r1, r4
 800172c:	003a      	movs	r2, r7
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <_svfiprintf_r+0x1f8>)
 8001730:	9803      	ldr	r0, [sp, #12]
 8001732:	f000 f87b 	bl	800182c <_printf_i>
 8001736:	e7eb      	b.n	8001710 <_svfiprintf_r+0x1c0>
 8001738:	08001ba4 	.word	0x08001ba4
 800173c:	08001baa 	.word	0x08001baa
 8001740:	08001bae 	.word	0x08001bae
 8001744:	00000000 	.word	0x00000000
 8001748:	08001491 	.word	0x08001491

0800174c <_printf_common>:
 800174c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800174e:	0016      	movs	r6, r2
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	688a      	ldr	r2, [r1, #8]
 8001754:	690b      	ldr	r3, [r1, #16]
 8001756:	000c      	movs	r4, r1
 8001758:	9000      	str	r0, [sp, #0]
 800175a:	4293      	cmp	r3, r2
 800175c:	da00      	bge.n	8001760 <_printf_common+0x14>
 800175e:	0013      	movs	r3, r2
 8001760:	0022      	movs	r2, r4
 8001762:	6033      	str	r3, [r6, #0]
 8001764:	3243      	adds	r2, #67	@ 0x43
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	2a00      	cmp	r2, #0
 800176a:	d001      	beq.n	8001770 <_printf_common+0x24>
 800176c:	3301      	adds	r3, #1
 800176e:	6033      	str	r3, [r6, #0]
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	069b      	lsls	r3, r3, #26
 8001774:	d502      	bpl.n	800177c <_printf_common+0x30>
 8001776:	6833      	ldr	r3, [r6, #0]
 8001778:	3302      	adds	r3, #2
 800177a:	6033      	str	r3, [r6, #0]
 800177c:	6822      	ldr	r2, [r4, #0]
 800177e:	2306      	movs	r3, #6
 8001780:	0015      	movs	r5, r2
 8001782:	401d      	ands	r5, r3
 8001784:	421a      	tst	r2, r3
 8001786:	d027      	beq.n	80017d8 <_printf_common+0x8c>
 8001788:	0023      	movs	r3, r4
 800178a:	3343      	adds	r3, #67	@ 0x43
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	1e5a      	subs	r2, r3, #1
 8001790:	4193      	sbcs	r3, r2
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	0692      	lsls	r2, r2, #26
 8001796:	d430      	bmi.n	80017fa <_printf_common+0xae>
 8001798:	0022      	movs	r2, r4
 800179a:	9901      	ldr	r1, [sp, #4]
 800179c:	9800      	ldr	r0, [sp, #0]
 800179e:	9d08      	ldr	r5, [sp, #32]
 80017a0:	3243      	adds	r2, #67	@ 0x43
 80017a2:	47a8      	blx	r5
 80017a4:	3001      	adds	r0, #1
 80017a6:	d025      	beq.n	80017f4 <_printf_common+0xa8>
 80017a8:	2206      	movs	r2, #6
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	2500      	movs	r5, #0
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d105      	bne.n	80017c0 <_printf_common+0x74>
 80017b4:	6833      	ldr	r3, [r6, #0]
 80017b6:	68e5      	ldr	r5, [r4, #12]
 80017b8:	1aed      	subs	r5, r5, r3
 80017ba:	43eb      	mvns	r3, r5
 80017bc:	17db      	asrs	r3, r3, #31
 80017be:	401d      	ands	r5, r3
 80017c0:	68a3      	ldr	r3, [r4, #8]
 80017c2:	6922      	ldr	r2, [r4, #16]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	dd01      	ble.n	80017cc <_printf_common+0x80>
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	18ed      	adds	r5, r5, r3
 80017cc:	2600      	movs	r6, #0
 80017ce:	42b5      	cmp	r5, r6
 80017d0:	d120      	bne.n	8001814 <_printf_common+0xc8>
 80017d2:	2000      	movs	r0, #0
 80017d4:	e010      	b.n	80017f8 <_printf_common+0xac>
 80017d6:	3501      	adds	r5, #1
 80017d8:	68e3      	ldr	r3, [r4, #12]
 80017da:	6832      	ldr	r2, [r6, #0]
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	42ab      	cmp	r3, r5
 80017e0:	ddd2      	ble.n	8001788 <_printf_common+0x3c>
 80017e2:	0022      	movs	r2, r4
 80017e4:	2301      	movs	r3, #1
 80017e6:	9901      	ldr	r1, [sp, #4]
 80017e8:	9800      	ldr	r0, [sp, #0]
 80017ea:	9f08      	ldr	r7, [sp, #32]
 80017ec:	3219      	adds	r2, #25
 80017ee:	47b8      	blx	r7
 80017f0:	3001      	adds	r0, #1
 80017f2:	d1f0      	bne.n	80017d6 <_printf_common+0x8a>
 80017f4:	2001      	movs	r0, #1
 80017f6:	4240      	negs	r0, r0
 80017f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017fa:	2030      	movs	r0, #48	@ 0x30
 80017fc:	18e1      	adds	r1, r4, r3
 80017fe:	3143      	adds	r1, #67	@ 0x43
 8001800:	7008      	strb	r0, [r1, #0]
 8001802:	0021      	movs	r1, r4
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	3145      	adds	r1, #69	@ 0x45
 8001808:	7809      	ldrb	r1, [r1, #0]
 800180a:	18a2      	adds	r2, r4, r2
 800180c:	3243      	adds	r2, #67	@ 0x43
 800180e:	3302      	adds	r3, #2
 8001810:	7011      	strb	r1, [r2, #0]
 8001812:	e7c1      	b.n	8001798 <_printf_common+0x4c>
 8001814:	0022      	movs	r2, r4
 8001816:	2301      	movs	r3, #1
 8001818:	9901      	ldr	r1, [sp, #4]
 800181a:	9800      	ldr	r0, [sp, #0]
 800181c:	9f08      	ldr	r7, [sp, #32]
 800181e:	321a      	adds	r2, #26
 8001820:	47b8      	blx	r7
 8001822:	3001      	adds	r0, #1
 8001824:	d0e6      	beq.n	80017f4 <_printf_common+0xa8>
 8001826:	3601      	adds	r6, #1
 8001828:	e7d1      	b.n	80017ce <_printf_common+0x82>
	...

0800182c <_printf_i>:
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b08b      	sub	sp, #44	@ 0x2c
 8001830:	9206      	str	r2, [sp, #24]
 8001832:	000a      	movs	r2, r1
 8001834:	3243      	adds	r2, #67	@ 0x43
 8001836:	9307      	str	r3, [sp, #28]
 8001838:	9005      	str	r0, [sp, #20]
 800183a:	9203      	str	r2, [sp, #12]
 800183c:	7e0a      	ldrb	r2, [r1, #24]
 800183e:	000c      	movs	r4, r1
 8001840:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001842:	2a78      	cmp	r2, #120	@ 0x78
 8001844:	d809      	bhi.n	800185a <_printf_i+0x2e>
 8001846:	2a62      	cmp	r2, #98	@ 0x62
 8001848:	d80b      	bhi.n	8001862 <_printf_i+0x36>
 800184a:	2a00      	cmp	r2, #0
 800184c:	d100      	bne.n	8001850 <_printf_i+0x24>
 800184e:	e0ba      	b.n	80019c6 <_printf_i+0x19a>
 8001850:	497a      	ldr	r1, [pc, #488]	@ (8001a3c <_printf_i+0x210>)
 8001852:	9104      	str	r1, [sp, #16]
 8001854:	2a58      	cmp	r2, #88	@ 0x58
 8001856:	d100      	bne.n	800185a <_printf_i+0x2e>
 8001858:	e08e      	b.n	8001978 <_printf_i+0x14c>
 800185a:	0025      	movs	r5, r4
 800185c:	3542      	adds	r5, #66	@ 0x42
 800185e:	702a      	strb	r2, [r5, #0]
 8001860:	e022      	b.n	80018a8 <_printf_i+0x7c>
 8001862:	0010      	movs	r0, r2
 8001864:	3863      	subs	r0, #99	@ 0x63
 8001866:	2815      	cmp	r0, #21
 8001868:	d8f7      	bhi.n	800185a <_printf_i+0x2e>
 800186a:	f7fe fc47 	bl	80000fc <__gnu_thumb1_case_shi>
 800186e:	0016      	.short	0x0016
 8001870:	fff6001f 	.word	0xfff6001f
 8001874:	fff6fff6 	.word	0xfff6fff6
 8001878:	001ffff6 	.word	0x001ffff6
 800187c:	fff6fff6 	.word	0xfff6fff6
 8001880:	fff6fff6 	.word	0xfff6fff6
 8001884:	0036009f 	.word	0x0036009f
 8001888:	fff6007e 	.word	0xfff6007e
 800188c:	00b0fff6 	.word	0x00b0fff6
 8001890:	0036fff6 	.word	0x0036fff6
 8001894:	fff6fff6 	.word	0xfff6fff6
 8001898:	0082      	.short	0x0082
 800189a:	0025      	movs	r5, r4
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	3542      	adds	r5, #66	@ 0x42
 80018a0:	1d11      	adds	r1, r2, #4
 80018a2:	6019      	str	r1, [r3, #0]
 80018a4:	6813      	ldr	r3, [r2, #0]
 80018a6:	702b      	strb	r3, [r5, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	e09e      	b.n	80019ea <_printf_i+0x1be>
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	6809      	ldr	r1, [r1, #0]
 80018b0:	1d02      	adds	r2, r0, #4
 80018b2:	060d      	lsls	r5, r1, #24
 80018b4:	d50b      	bpl.n	80018ce <_printf_i+0xa2>
 80018b6:	6806      	ldr	r6, [r0, #0]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	2e00      	cmp	r6, #0
 80018bc:	da03      	bge.n	80018c6 <_printf_i+0x9a>
 80018be:	232d      	movs	r3, #45	@ 0x2d
 80018c0:	9a03      	ldr	r2, [sp, #12]
 80018c2:	4276      	negs	r6, r6
 80018c4:	7013      	strb	r3, [r2, #0]
 80018c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a3c <_printf_i+0x210>)
 80018c8:	270a      	movs	r7, #10
 80018ca:	9304      	str	r3, [sp, #16]
 80018cc:	e018      	b.n	8001900 <_printf_i+0xd4>
 80018ce:	6806      	ldr	r6, [r0, #0]
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	0649      	lsls	r1, r1, #25
 80018d4:	d5f1      	bpl.n	80018ba <_printf_i+0x8e>
 80018d6:	b236      	sxth	r6, r6
 80018d8:	e7ef      	b.n	80018ba <_printf_i+0x8e>
 80018da:	6808      	ldr	r0, [r1, #0]
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	c940      	ldmia	r1!, {r6}
 80018e0:	0605      	lsls	r5, r0, #24
 80018e2:	d402      	bmi.n	80018ea <_printf_i+0xbe>
 80018e4:	0640      	lsls	r0, r0, #25
 80018e6:	d500      	bpl.n	80018ea <_printf_i+0xbe>
 80018e8:	b2b6      	uxth	r6, r6
 80018ea:	6019      	str	r1, [r3, #0]
 80018ec:	4b53      	ldr	r3, [pc, #332]	@ (8001a3c <_printf_i+0x210>)
 80018ee:	270a      	movs	r7, #10
 80018f0:	9304      	str	r3, [sp, #16]
 80018f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80018f4:	d100      	bne.n	80018f8 <_printf_i+0xcc>
 80018f6:	3f02      	subs	r7, #2
 80018f8:	0023      	movs	r3, r4
 80018fa:	2200      	movs	r2, #0
 80018fc:	3343      	adds	r3, #67	@ 0x43
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	60a3      	str	r3, [r4, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db06      	blt.n	8001916 <_printf_i+0xea>
 8001908:	2104      	movs	r1, #4
 800190a:	6822      	ldr	r2, [r4, #0]
 800190c:	9d03      	ldr	r5, [sp, #12]
 800190e:	438a      	bics	r2, r1
 8001910:	6022      	str	r2, [r4, #0]
 8001912:	4333      	orrs	r3, r6
 8001914:	d00c      	beq.n	8001930 <_printf_i+0x104>
 8001916:	9d03      	ldr	r5, [sp, #12]
 8001918:	0030      	movs	r0, r6
 800191a:	0039      	movs	r1, r7
 800191c:	f7fe fc7e 	bl	800021c <__aeabi_uidivmod>
 8001920:	9b04      	ldr	r3, [sp, #16]
 8001922:	3d01      	subs	r5, #1
 8001924:	5c5b      	ldrb	r3, [r3, r1]
 8001926:	702b      	strb	r3, [r5, #0]
 8001928:	0033      	movs	r3, r6
 800192a:	0006      	movs	r6, r0
 800192c:	429f      	cmp	r7, r3
 800192e:	d9f3      	bls.n	8001918 <_printf_i+0xec>
 8001930:	2f08      	cmp	r7, #8
 8001932:	d109      	bne.n	8001948 <_printf_i+0x11c>
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	07db      	lsls	r3, r3, #31
 8001938:	d506      	bpl.n	8001948 <_printf_i+0x11c>
 800193a:	6862      	ldr	r2, [r4, #4]
 800193c:	6923      	ldr	r3, [r4, #16]
 800193e:	429a      	cmp	r2, r3
 8001940:	dc02      	bgt.n	8001948 <_printf_i+0x11c>
 8001942:	2330      	movs	r3, #48	@ 0x30
 8001944:	3d01      	subs	r5, #1
 8001946:	702b      	strb	r3, [r5, #0]
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	1b5b      	subs	r3, r3, r5
 800194c:	6123      	str	r3, [r4, #16]
 800194e:	9b07      	ldr	r3, [sp, #28]
 8001950:	0021      	movs	r1, r4
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	9805      	ldr	r0, [sp, #20]
 8001956:	9b06      	ldr	r3, [sp, #24]
 8001958:	aa09      	add	r2, sp, #36	@ 0x24
 800195a:	f7ff fef7 	bl	800174c <_printf_common>
 800195e:	3001      	adds	r0, #1
 8001960:	d148      	bne.n	80019f4 <_printf_i+0x1c8>
 8001962:	2001      	movs	r0, #1
 8001964:	4240      	negs	r0, r0
 8001966:	b00b      	add	sp, #44	@ 0x2c
 8001968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196a:	2220      	movs	r2, #32
 800196c:	6809      	ldr	r1, [r1, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	6022      	str	r2, [r4, #0]
 8001972:	2278      	movs	r2, #120	@ 0x78
 8001974:	4932      	ldr	r1, [pc, #200]	@ (8001a40 <_printf_i+0x214>)
 8001976:	9104      	str	r1, [sp, #16]
 8001978:	0021      	movs	r1, r4
 800197a:	3145      	adds	r1, #69	@ 0x45
 800197c:	700a      	strb	r2, [r1, #0]
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	c940      	ldmia	r1!, {r6}
 8001984:	0610      	lsls	r0, r2, #24
 8001986:	d402      	bmi.n	800198e <_printf_i+0x162>
 8001988:	0650      	lsls	r0, r2, #25
 800198a:	d500      	bpl.n	800198e <_printf_i+0x162>
 800198c:	b2b6      	uxth	r6, r6
 800198e:	6019      	str	r1, [r3, #0]
 8001990:	07d3      	lsls	r3, r2, #31
 8001992:	d502      	bpl.n	800199a <_printf_i+0x16e>
 8001994:	2320      	movs	r3, #32
 8001996:	4313      	orrs	r3, r2
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	2e00      	cmp	r6, #0
 800199c:	d001      	beq.n	80019a2 <_printf_i+0x176>
 800199e:	2710      	movs	r7, #16
 80019a0:	e7aa      	b.n	80018f8 <_printf_i+0xcc>
 80019a2:	2220      	movs	r2, #32
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	4393      	bics	r3, r2
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	e7f8      	b.n	800199e <_printf_i+0x172>
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	680d      	ldr	r5, [r1, #0]
 80019b0:	1d10      	adds	r0, r2, #4
 80019b2:	6949      	ldr	r1, [r1, #20]
 80019b4:	6018      	str	r0, [r3, #0]
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	062e      	lsls	r6, r5, #24
 80019ba:	d501      	bpl.n	80019c0 <_printf_i+0x194>
 80019bc:	6019      	str	r1, [r3, #0]
 80019be:	e002      	b.n	80019c6 <_printf_i+0x19a>
 80019c0:	066d      	lsls	r5, r5, #25
 80019c2:	d5fb      	bpl.n	80019bc <_printf_i+0x190>
 80019c4:	8019      	strh	r1, [r3, #0]
 80019c6:	2300      	movs	r3, #0
 80019c8:	9d03      	ldr	r5, [sp, #12]
 80019ca:	6123      	str	r3, [r4, #16]
 80019cc:	e7bf      	b.n	800194e <_printf_i+0x122>
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	1d11      	adds	r1, r2, #4
 80019d2:	6019      	str	r1, [r3, #0]
 80019d4:	6815      	ldr	r5, [r2, #0]
 80019d6:	2100      	movs	r1, #0
 80019d8:	0028      	movs	r0, r5
 80019da:	6862      	ldr	r2, [r4, #4]
 80019dc:	f000 f856 	bl	8001a8c <memchr>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d001      	beq.n	80019e8 <_printf_i+0x1bc>
 80019e4:	1b40      	subs	r0, r0, r5
 80019e6:	6060      	str	r0, [r4, #4]
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	6123      	str	r3, [r4, #16]
 80019ec:	2300      	movs	r3, #0
 80019ee:	9a03      	ldr	r2, [sp, #12]
 80019f0:	7013      	strb	r3, [r2, #0]
 80019f2:	e7ac      	b.n	800194e <_printf_i+0x122>
 80019f4:	002a      	movs	r2, r5
 80019f6:	6923      	ldr	r3, [r4, #16]
 80019f8:	9906      	ldr	r1, [sp, #24]
 80019fa:	9805      	ldr	r0, [sp, #20]
 80019fc:	9d07      	ldr	r5, [sp, #28]
 80019fe:	47a8      	blx	r5
 8001a00:	3001      	adds	r0, #1
 8001a02:	d0ae      	beq.n	8001962 <_printf_i+0x136>
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	079b      	lsls	r3, r3, #30
 8001a08:	d415      	bmi.n	8001a36 <_printf_i+0x20a>
 8001a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a0c:	68e0      	ldr	r0, [r4, #12]
 8001a0e:	4298      	cmp	r0, r3
 8001a10:	daa9      	bge.n	8001966 <_printf_i+0x13a>
 8001a12:	0018      	movs	r0, r3
 8001a14:	e7a7      	b.n	8001966 <_printf_i+0x13a>
 8001a16:	0022      	movs	r2, r4
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9906      	ldr	r1, [sp, #24]
 8001a1c:	9805      	ldr	r0, [sp, #20]
 8001a1e:	9e07      	ldr	r6, [sp, #28]
 8001a20:	3219      	adds	r2, #25
 8001a22:	47b0      	blx	r6
 8001a24:	3001      	adds	r0, #1
 8001a26:	d09c      	beq.n	8001962 <_printf_i+0x136>
 8001a28:	3501      	adds	r5, #1
 8001a2a:	68e3      	ldr	r3, [r4, #12]
 8001a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	42ab      	cmp	r3, r5
 8001a32:	dcf0      	bgt.n	8001a16 <_printf_i+0x1ea>
 8001a34:	e7e9      	b.n	8001a0a <_printf_i+0x1de>
 8001a36:	2500      	movs	r5, #0
 8001a38:	e7f7      	b.n	8001a2a <_printf_i+0x1fe>
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	08001bb5 	.word	0x08001bb5
 8001a40:	08001bc6 	.word	0x08001bc6

08001a44 <memmove>:
 8001a44:	b510      	push	{r4, lr}
 8001a46:	4288      	cmp	r0, r1
 8001a48:	d902      	bls.n	8001a50 <memmove+0xc>
 8001a4a:	188b      	adds	r3, r1, r2
 8001a4c:	4298      	cmp	r0, r3
 8001a4e:	d308      	bcc.n	8001a62 <memmove+0x1e>
 8001a50:	2300      	movs	r3, #0
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d007      	beq.n	8001a66 <memmove+0x22>
 8001a56:	5ccc      	ldrb	r4, [r1, r3]
 8001a58:	54c4      	strb	r4, [r0, r3]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	e7f9      	b.n	8001a52 <memmove+0xe>
 8001a5e:	5c8b      	ldrb	r3, [r1, r2]
 8001a60:	5483      	strb	r3, [r0, r2]
 8001a62:	3a01      	subs	r2, #1
 8001a64:	d2fb      	bcs.n	8001a5e <memmove+0x1a>
 8001a66:	bd10      	pop	{r4, pc}

08001a68 <_sbrk_r>:
 8001a68:	2300      	movs	r3, #0
 8001a6a:	b570      	push	{r4, r5, r6, lr}
 8001a6c:	4d06      	ldr	r5, [pc, #24]	@ (8001a88 <_sbrk_r+0x20>)
 8001a6e:	0004      	movs	r4, r0
 8001a70:	0008      	movs	r0, r1
 8001a72:	602b      	str	r3, [r5, #0]
 8001a74:	f7ff fa42 	bl	8000efc <_sbrk>
 8001a78:	1c43      	adds	r3, r0, #1
 8001a7a:	d103      	bne.n	8001a84 <_sbrk_r+0x1c>
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d000      	beq.n	8001a84 <_sbrk_r+0x1c>
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	bd70      	pop	{r4, r5, r6, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	200001a8 	.word	0x200001a8

08001a8c <memchr>:
 8001a8c:	b2c9      	uxtb	r1, r1
 8001a8e:	1882      	adds	r2, r0, r2
 8001a90:	4290      	cmp	r0, r2
 8001a92:	d101      	bne.n	8001a98 <memchr+0xc>
 8001a94:	2000      	movs	r0, #0
 8001a96:	4770      	bx	lr
 8001a98:	7803      	ldrb	r3, [r0, #0]
 8001a9a:	428b      	cmp	r3, r1
 8001a9c:	d0fb      	beq.n	8001a96 <memchr+0xa>
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	e7f6      	b.n	8001a90 <memchr+0x4>

08001aa2 <memcpy>:
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d100      	bne.n	8001aac <memcpy+0xa>
 8001aaa:	bd10      	pop	{r4, pc}
 8001aac:	5ccc      	ldrb	r4, [r1, r3]
 8001aae:	54c4      	strb	r4, [r0, r3]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	e7f8      	b.n	8001aa6 <memcpy+0x4>

08001ab4 <_realloc_r>:
 8001ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ab6:	0006      	movs	r6, r0
 8001ab8:	000c      	movs	r4, r1
 8001aba:	0015      	movs	r5, r2
 8001abc:	2900      	cmp	r1, #0
 8001abe:	d105      	bne.n	8001acc <_realloc_r+0x18>
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	f7ff fc55 	bl	8001370 <_malloc_r>
 8001ac6:	0004      	movs	r4, r0
 8001ac8:	0020      	movs	r0, r4
 8001aca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001acc:	2a00      	cmp	r2, #0
 8001ace:	d103      	bne.n	8001ad8 <_realloc_r+0x24>
 8001ad0:	f7ff fbe2 	bl	8001298 <_free_r>
 8001ad4:	002c      	movs	r4, r5
 8001ad6:	e7f7      	b.n	8001ac8 <_realloc_r+0x14>
 8001ad8:	f000 f81c 	bl	8001b14 <_malloc_usable_size_r>
 8001adc:	0007      	movs	r7, r0
 8001ade:	4285      	cmp	r5, r0
 8001ae0:	d802      	bhi.n	8001ae8 <_realloc_r+0x34>
 8001ae2:	0843      	lsrs	r3, r0, #1
 8001ae4:	42ab      	cmp	r3, r5
 8001ae6:	d3ef      	bcc.n	8001ac8 <_realloc_r+0x14>
 8001ae8:	0029      	movs	r1, r5
 8001aea:	0030      	movs	r0, r6
 8001aec:	f7ff fc40 	bl	8001370 <_malloc_r>
 8001af0:	9001      	str	r0, [sp, #4]
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d101      	bne.n	8001afa <_realloc_r+0x46>
 8001af6:	9c01      	ldr	r4, [sp, #4]
 8001af8:	e7e6      	b.n	8001ac8 <_realloc_r+0x14>
 8001afa:	002a      	movs	r2, r5
 8001afc:	42bd      	cmp	r5, r7
 8001afe:	d900      	bls.n	8001b02 <_realloc_r+0x4e>
 8001b00:	003a      	movs	r2, r7
 8001b02:	0021      	movs	r1, r4
 8001b04:	9801      	ldr	r0, [sp, #4]
 8001b06:	f7ff ffcc 	bl	8001aa2 <memcpy>
 8001b0a:	0021      	movs	r1, r4
 8001b0c:	0030      	movs	r0, r6
 8001b0e:	f7ff fbc3 	bl	8001298 <_free_r>
 8001b12:	e7f0      	b.n	8001af6 <_realloc_r+0x42>

08001b14 <_malloc_usable_size_r>:
 8001b14:	1f0b      	subs	r3, r1, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1f18      	subs	r0, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da01      	bge.n	8001b22 <_malloc_usable_size_r+0xe>
 8001b1e:	580b      	ldr	r3, [r1, r0]
 8001b20:	18c0      	adds	r0, r0, r3
 8001b22:	4770      	bx	lr

08001b24 <_init>:
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b2a:	bc08      	pop	{r3}
 8001b2c:	469e      	mov	lr, r3
 8001b2e:	4770      	bx	lr

08001b30 <_fini>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b36:	bc08      	pop	{r3}
 8001b38:	469e      	mov	lr, r3
 8001b3a:	4770      	bx	lr
